
ProyectoFinal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f9c  08007f9c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa4  08007fa4  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  24000000  08007fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400001c  08007fc8  0002001c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400007c  08008028  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004578  240000dc  08008088  000200dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24004654  08008088  00024654  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00030c32  00000000  00000000  0002010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004f09  00000000  00000000  00050d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001af0  00000000  00000000  00055c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001968  00000000  00000000  00057738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d2b1  00000000  00000000  000590a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f808  00000000  00000000  00096351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001935a5  00000000  00000000  000b5b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  002490fe  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000072b4  00000000  00000000  00249154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000dc 	.word	0x240000dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007eec 	.word	0x08007eec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e0 	.word	0x240000e0
 80002dc:	08007eec 	.word	0x08007eec

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <vApplicationGetIdleTaskMemory+0x2c>)
 800071c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <vApplicationGetIdleTaskMemory+0x30>)
 8000722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	240000f8 	.word	0x240000f8
 800073c:	2400014c 	.word	0x2400014c

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
  HAL_RCCEx_EnableBootCore(RCC_BOOT_C2);
 8000746:	2008      	movs	r0, #8
 8000748:	f004 f8d8 	bl	80048fc <HAL_RCCEx_EnableBootCore>
  WAIT_COND_WITH_TIMEOUT(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET, 0xFFFF);
 800074c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
 8000752:	bf00      	nop
 8000754:	4b66      	ldr	r3, [pc, #408]	; (80008f0 <main+0x1b0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d004      	beq.n	800076a <main+0x2a>
 8000760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	64ba      	str	r2, [r7, #72]	; 0x48
 8000766:	2b00      	cmp	r3, #0
 8000768:	dcf4      	bgt.n	8000754 <main+0x14>
 800076a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800076c:	2b00      	cmp	r3, #0
 800076e:	da01      	bge.n	8000774 <main+0x34>
 8000770:	f000 fb1c 	bl	8000dac <Error_Handler>
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800077a:	bf00      	nop
 800077c:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <main+0x1b0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <main+0x52>
 8000788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800078a:	1e5a      	subs	r2, r3, #1
 800078c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800078e:	2b00      	cmp	r3, #0
 8000790:	dcf4      	bgt.n	800077c <main+0x3c>
  if ( timeout < 0 )
 8000792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000794:	2b00      	cmp	r3, #0
 8000796:	da01      	bge.n	800079c <main+0x5c>
  {
  Error_Handler();
 8000798:	f000 fb08 	bl	8000dac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079c:	f000 fd92 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a0:	f000 f8b8 	bl	8000914 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
  ringbuff_init(valvula, (void *)BUFFDATA_CM7_TO_CM4_ADDR, BUFFDATA_CM7_TO_CM4_LEN);
 80007a4:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <main+0x1b4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ac:	4952      	ldr	r1, [pc, #328]	; (80008f8 <main+0x1b8>)
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 fa1c 	bl	8007bec <ringbuff_init>
  ringbuff_init(bombaAire, (void *)BUFFDATA_CM4_TO_CM7_ADDR, BUFFDATA_CM4_TO_CM7_LEN);
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <main+0x1bc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007bc:	4950      	ldr	r1, [pc, #320]	; (8000900 <main+0x1c0>)
 80007be:	4618      	mov	r0, r3
 80007c0:	f007 fa14 	bl	8007bec <ringbuff_init>
  /* Wakeup CPU2 */
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007c4:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <main+0x1b0>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ca:	4a49      	ldr	r2, [pc, #292]	; (80008f0 <main+0x1b0>)
 80007cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d4:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <main+0x1b0>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
	HSEM_TAKE_RELEASE(HSEM_WAKEUP_CPU2);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f001 fcce 	bl	8002184 <HAL_HSEM_FastTake>
 80007e8:	2100      	movs	r1, #0
 80007ea:	2000      	movs	r0, #0
 80007ec:	f001 fce4 	bl	80021b8 <HAL_HSEM_Release>
	WAIT_COND_WITH_TIMEOUT(__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET, 0xFFFF);
 80007f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
 80007f6:	bf00      	nop
 80007f8:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <main+0x1b0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <main+0xce>
 8000804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	647a      	str	r2, [r7, #68]	; 0x44
 800080a:	2b00      	cmp	r3, #0
 800080c:	dcf4      	bgt.n	80007f8 <main+0xb8>
 800080e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000810:	2b00      	cmp	r3, #0
 8000812:	da01      	bge.n	8000818 <main+0xd8>
 8000814:	f000 faca 	bl	8000dac <Error_Handler>


	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <main+0x1b0>)
 800081a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081e:	4a34      	ldr	r2, [pc, #208]	; (80008f0 <main+0x1b0>)
 8000820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <main+0x1b0>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000836:	2000      	movs	r0, #0
 8000838:	f001 fca4 	bl	8002184 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800083c:	2100      	movs	r1, #0
 800083e:	2000      	movs	r0, #0
 8000840:	f001 fcba 	bl	80021b8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000848:	64fb      	str	r3, [r7, #76]	; 0x4c
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800084a:	bf00      	nop
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <main+0x1b0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <main+0x122>
 8000858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800085e:	2b00      	cmp	r3, #0
 8000860:	dcf4      	bgt.n	800084c <main+0x10c>
	if ( timeout < 0 )
 8000862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000864:	2b00      	cmp	r3, #0
 8000866:	da01      	bge.n	800086c <main+0x12c>
	{
	Error_Handler();
 8000868:	f000 faa0 	bl	8000dac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086c:	f000 f9a0 	bl	8000bb0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000870:	f000 f8d4 	bl	8000a1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000874:	f000 f91e 	bl	8000ab4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000878:	f000 f968 	bl	8000b4c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  while (!ringbuff_is_ready(bombaAire) || !ringbuff_is_ready(valvula)) {}
 800087c:	bf00      	nop
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <main+0x1bc>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f007 f9de 	bl	8007c44 <ringbuff_is_ready>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0f7      	beq.n	800087e <main+0x13e>
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <main+0x1b4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f007 f9d6 	bl	8007c44 <ringbuff_is_ready>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0ef      	beq.n	800087e <main+0x13e>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of bombaControl */
  osThreadDef(bombaControl, bomba_Init, osPriorityHigh, 0, 128);
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <main+0x1c4>)
 80008a0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80008a4:	461d      	mov	r5, r3
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bombaControlHandle = osThreadCreate(osThread(bombaControl), NULL);
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f005 ff66 	bl	800678a <osThreadCreate>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a11      	ldr	r2, [pc, #68]	; (8000908 <main+0x1c8>)
 80008c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of valvulaControl */
  osThreadDef(valvulaControl, valvula_Init, osPriorityHigh, 0, 128);
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <main+0x1cc>)
 80008c6:	f107 040c 	add.w	r4, r7, #12
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  valvulaControlHandle = osThreadCreate(osThread(valvulaControl), NULL);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 ff53 	bl	800678a <osThreadCreate>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <main+0x1d0>)
 80008e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008ea:	f005 ff47 	bl	800677c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <main+0x1ae>
 80008f0:	58024400 	.word	0x58024400
 80008f4:	2400000c 	.word	0x2400000c
 80008f8:	38000438 	.word	0x38000438
 80008fc:	24000008 	.word	0x24000008
 8000900:	3800001c 	.word	0x3800001c
 8000904:	08007f24 	.word	0x08007f24
 8000908:	24004544 	.word	0x24004544
 800090c:	08007f40 	.word	0x08007f40
 8000910:	24004540 	.word	0x24004540

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b09c      	sub	sp, #112	; 0x70
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	224c      	movs	r2, #76	; 0x4c
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f007 fada 	bl	8007edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2220      	movs	r2, #32
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fad4 	bl	8007edc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000934:	2004      	movs	r0, #4
 8000936:	f001 fd9b 	bl	8002470 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <SystemClock_Config+0xfc>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <SystemClock_Config+0xfc>)
 8000944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <SystemClock_Config+0xfc>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <SystemClock_Config+0x100>)
 8000956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000958:	4a2e      	ldr	r2, [pc, #184]	; (8000a14 <SystemClock_Config+0x100>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <SystemClock_Config+0x100>)
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xfc>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <SystemClock_Config+0x104>)
 800097e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000980:	f023 0303 	bic.w	r3, r3, #3
 8000984:	4a24      	ldr	r2, [pc, #144]	; (8000a18 <SystemClock_Config+0x104>)
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000990:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	2302      	movs	r3, #2
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80009a2:	2378      	movs	r3, #120	; 0x78
 80009a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b2:	230c      	movs	r3, #12
 80009b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fdbe 	bl	8002544 <HAL_RCC_OscConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80009ce:	f000 f9ed 	bl	8000dac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	233f      	movs	r3, #63	; 0x3f
 80009d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d6:	2303      	movs	r3, #3
 80009d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009de:	2308      	movs	r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2104      	movs	r1, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 f9b3 	bl	8002d64 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a04:	f000 f9d2 	bl	8000dac <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3770      	adds	r7, #112	; 0x70
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	58024800 	.word	0x58024800
 8000a14:	58000400 	.word	0x58000400
 8000a18:	58024400 	.word	0x58024400

08000a1c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a22:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <MX_ETH_Init+0x84>)
 8000a24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a34:	22e1      	movs	r2, #225	; 0xe1
 8000a36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a4c:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_ETH_Init+0x88>)
 8000a4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <MX_ETH_Init+0x8c>)
 8000a5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_ETH_Init+0x90>)
 8000a60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_ETH_Init+0x80>)
 8000a6c:	f000 fdaa 	bl	80015c4 <HAL_ETH_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a76:	f000 f999 	bl	8000dac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <MX_ETH_Init+0x94>)
 8000a80:	f007 fa2c 	bl	8007edc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_ETH_Init+0x94>)
 8000a86:	2221      	movs	r2, #33	; 0x21
 8000a88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_ETH_Init+0x94>)
 8000a8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_ETH_Init+0x94>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24004548 	.word	0x24004548
 8000aa0:	40028000 	.word	0x40028000
 8000aa4:	2400034c 	.word	0x2400034c
 8000aa8:	2400007c 	.word	0x2400007c
 8000aac:	2400001c 	.word	0x2400001c
 8000ab0:	240045d0 	.word	0x240045d0

08000ab4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000aba:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <MX_USART3_UART_Init+0x94>)
 8000abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ada:	220c      	movs	r2, #12
 8000adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000afe:	f004 fb47 	bl	8005190 <HAL_UART_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b08:	f000 f950 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b10:	f005 fa94 	bl	800603c <HAL_UARTEx_SetTxFifoThreshold>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 f947 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4808      	ldr	r0, [pc, #32]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b22:	f005 fac9 	bl	80060b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b2c:	f000 f93e 	bl	8000dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_USART3_UART_Init+0x90>)
 8000b32:	f005 fa4a 	bl	8005fca <HAL_UARTEx_DisableFifoMode>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b3c:	f000 f936 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	240040a8 	.word	0x240040a8
 8000b48:	40004800 	.word	0x40004800

08000b4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b54:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2209      	movs	r2, #9
 8000b5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2202      	movs	r2, #2
 8000b60:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b94:	f001 fb24 	bl	80021e0 <HAL_PCD_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b9e:	f000 f905 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	24004138 	.word	0x24004138
 8000bac:	40080000 	.word	0x40080000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a27      	ldr	r2, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	4a20      	ldr	r2, [pc, #128]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_GPIO_Init+0xf8>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	21c0      	movs	r1, #192	; 0xc0
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0xfc>)
 8000c80:	f001 fa66 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c84:	23c0      	movs	r3, #192	; 0xc0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_GPIO_Init+0xfc>)
 8000c9c:	f001 f8a8 	bl	8001df0 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58020400 	.word	0x58020400

08000cb0 <bomba_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_bomba_Init */
void bomba_Init(void const * argument)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  size_t len;
  /* Infinite loop */
  for(;;)
  {
	//while(!xQueueReceive(compresor2Handle, &onOff, 1000));
	while ((len = ringbuff_get_linear_block_read_length(bombaAire)) > 0) {
 8000cb8:	e01e      	b.n	8000cf8 <bomba_Init+0x48>
		onOff = ringbuff_get_linear_block_read_address(bombaAire);
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <bomba_Init+0x64>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f007 f82c 	bl	8007d1c <ringbuff_get_linear_block_read_address>
 8000cc4:	60b8      	str	r0, [r7, #8]
		if (*onOff=='1'){
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b31      	cmp	r3, #49	; 0x31
 8000ccc:	d105      	bne.n	8000cda <bomba_Init+0x2a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	4811      	ldr	r0, [pc, #68]	; (8000d18 <bomba_Init+0x68>)
 8000cd4:	f001 fa3c 	bl	8002150 <HAL_GPIO_WritePin>
 8000cd8:	e008      	b.n	8000cec <bomba_Init+0x3c>
		}else if (*onOff=='0'){
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b30      	cmp	r3, #48	; 0x30
 8000ce0:	d104      	bne.n	8000cec <bomba_Init+0x3c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2140      	movs	r1, #64	; 0x40
 8000ce6:	480c      	ldr	r0, [pc, #48]	; (8000d18 <bomba_Init+0x68>)
 8000ce8:	f001 fa32 	bl	8002150 <HAL_GPIO_WritePin>
		}
		ringbuff_skip(bombaAire, len);
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <bomba_Init+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68f9      	ldr	r1, [r7, #12]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f007 f87e 	bl	8007df4 <ringbuff_skip>
	while ((len = ringbuff_get_linear_block_read_length(bombaAire)) > 0) {
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <bomba_Init+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f007 f837 	bl	8007d70 <ringbuff_get_linear_block_read_length>
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1d7      	bne.n	8000cba <bomba_Init+0xa>
	}
	osDelay(100);
 8000d0a:	2064      	movs	r0, #100	; 0x64
 8000d0c:	f005 fd89 	bl	8006822 <osDelay>
	while ((len = ringbuff_get_linear_block_read_length(bombaAire)) > 0) {
 8000d10:	e7f2      	b.n	8000cf8 <bomba_Init+0x48>
 8000d12:	bf00      	nop
 8000d14:	24000008 	.word	0x24000008
 8000d18:	58020400 	.word	0x58020400

08000d1c <valvula_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_valvula_Init */
void valvula_Init(void const * argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  size_t len;
  /* Infinite loop */
  for(;;)
  {
	//while(!xQueueReceive(valvula2Handle, &openClose, 1000));
	while ((len = ringbuff_get_linear_block_read_length(valvula)) > 0) {
 8000d24:	e01e      	b.n	8000d64 <valvula_Init+0x48>
		openClose = ringbuff_get_linear_block_read_address(valvula);
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <valvula_Init+0x64>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f006 fff6 	bl	8007d1c <ringbuff_get_linear_block_read_address>
 8000d30:	60b8      	str	r0, [r7, #8]
		if (*openClose=='1'){
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b31      	cmp	r3, #49	; 0x31
 8000d38:	d105      	bne.n	8000d46 <valvula_Init+0x2a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2180      	movs	r1, #128	; 0x80
 8000d3e:	4811      	ldr	r0, [pc, #68]	; (8000d84 <valvula_Init+0x68>)
 8000d40:	f001 fa06 	bl	8002150 <HAL_GPIO_WritePin>
 8000d44:	e008      	b.n	8000d58 <valvula_Init+0x3c>
		}else if (*openClose=='0'){
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b30      	cmp	r3, #48	; 0x30
 8000d4c:	d104      	bne.n	8000d58 <valvula_Init+0x3c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <valvula_Init+0x68>)
 8000d54:	f001 f9fc 	bl	8002150 <HAL_GPIO_WritePin>
		}
		ringbuff_skip(valvula, len);
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <valvula_Init+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68f9      	ldr	r1, [r7, #12]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f007 f848 	bl	8007df4 <ringbuff_skip>
	while ((len = ringbuff_get_linear_block_read_length(valvula)) > 0) {
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <valvula_Init+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f007 f801 	bl	8007d70 <ringbuff_get_linear_block_read_length>
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1d7      	bne.n	8000d26 <valvula_Init+0xa>
	}
	osDelay(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f005 fd53 	bl	8006822 <osDelay>
	while ((len = ringbuff_get_linear_block_read_length(valvula)) > 0) {
 8000d7c:	e7f2      	b.n	8000d64 <valvula_Init+0x48>
 8000d7e:	bf00      	nop
 8000d80:	2400000c 	.word	0x2400000c
 8000d84:	58020400 	.word	0x58020400

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9a:	f000 facf 	bl	800133c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40010000 	.word	0x40010000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x38>)
 8000dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_MspInit+0x38>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x38>)
 8000dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	210f      	movs	r1, #15
 8000de0:	f06f 0001 	mvn.w	r0, #1
 8000de4:	f000 fbc6 	bl	8001574 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a59      	ldr	r2, [pc, #356]	; (8000f78 <HAL_ETH_MspInit+0x184>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f040 80ab 	bne.w	8000f6e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e18:	4b58      	ldr	r3, [pc, #352]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1e:	4a57      	ldr	r2, [pc, #348]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e28:	4b54      	ldr	r3, [pc, #336]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e36:	4b51      	ldr	r3, [pc, #324]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3c:	4a4f      	ldr	r2, [pc, #316]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e46:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e54:	4b49      	ldr	r3, [pc, #292]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e5a:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e64:	4b45      	ldr	r3, [pc, #276]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e72:	4b42      	ldr	r3, [pc, #264]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e78:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e82:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b3a      	ldr	r3, [pc, #232]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	4a39      	ldr	r2, [pc, #228]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea0:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a2a      	ldr	r2, [pc, #168]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eea:	2332      	movs	r3, #50	; 0x32
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efa:	230b      	movs	r3, #11
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	481e      	ldr	r0, [pc, #120]	; (8000f80 <HAL_ETH_MspInit+0x18c>)
 8000f06:	f000 ff73 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f0a:	2386      	movs	r3, #134	; 0x86
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4817      	ldr	r0, [pc, #92]	; (8000f84 <HAL_ETH_MspInit+0x190>)
 8000f26:	f000 ff63 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <HAL_ETH_MspInit+0x194>)
 8000f48:	f000 ff52 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5e:	230b      	movs	r3, #11
 8000f60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	4619      	mov	r1, r3
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <HAL_ETH_MspInit+0x198>)
 8000f6a:	f000 ff41 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3738      	adds	r7, #56	; 0x38
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40028000 	.word	0x40028000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	58020800 	.word	0x58020800
 8000f84:	58020000 	.word	0x58020000
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	58021800 	.word	0x58021800

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0b8      	sub	sp, #224	; 0xe0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	22bc      	movs	r2, #188	; 0xbc
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 ff93 	bl	8007edc <memset>
  if(huart->Instance==USART3)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <HAL_UART_MspInit+0xc0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d142      	bne.n	8001046 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fa96 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fda:	f7ff fee7 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000ff0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8001004:	f043 0308 	orr.w	r3, r3, #8
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0xc4>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800101a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001034:	2307      	movs	r3, #7
 8001036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0xc8>)
 8001042:	f000 fed5 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	37e0      	adds	r7, #224	; 0xe0
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40004800 	.word	0x40004800
 8001054:	58024400 	.word	0x58024400
 8001058:	58020c00 	.word	0x58020c00

0800105c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0b8      	sub	sp, #224	; 0xe0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	22bc      	movs	r2, #188	; 0xbc
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f006 ff2d 	bl	8007edc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a36      	ldr	r2, [pc, #216]	; (8001160 <HAL_PCD_MspInit+0x104>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d165      	bne.n	8001158 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800108c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001090:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001096:	2318      	movs	r3, #24
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800109e:	2304      	movs	r3, #4
 80010a0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010aa:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 fa1f 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010c8:	f7ff fe70 	bl	8000dac <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010cc:	f001 fa2a 	bl	8002524 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_PCD_MspInit+0x108>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <HAL_PCD_MspInit+0x108>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_PCD_MspInit+0x108>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010ee:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001108:	230a      	movs	r3, #10
 800110a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001112:	4619      	mov	r1, r3
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <HAL_PCD_MspInit+0x10c>)
 8001116:	f000 fe6b 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800111a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <HAL_PCD_MspInit+0x10c>)
 8001136:	f000 fe5b 	bl	8001df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <HAL_PCD_MspInit+0x108>)
 800113c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_PCD_MspInit+0x108>)
 8001142:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001146:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_PCD_MspInit+0x108>)
 800114c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	37e0      	adds	r7, #224	; 0xe0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40080000 	.word	0x40080000
 8001164:	58024400 	.word	0x58024400
 8001168:	58020000 	.word	0x58020000

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	d844      	bhi.n	8001204 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800117a:	2200      	movs	r2, #0
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	2019      	movs	r0, #25
 8001180:	f000 f9f8 	bl	8001574 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001184:	2019      	movs	r0, #25
 8001186:	f000 fa0f 	bl	80015a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800118a:	4a24      	ldr	r2, [pc, #144]	; (800121c <HAL_InitTick+0xb0>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_InitTick+0xb4>)
 8001192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001196:	4a22      	ldr	r2, [pc, #136]	; (8001220 <HAL_InitTick+0xb4>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <HAL_InitTick+0xb4>)
 80011a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 f95f 	bl	800347c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011be:	f002 f947 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 80011c2:	4603      	mov	r3, r0
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_InitTick+0xb8>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9b      	lsrs	r3, r3, #18
 80011d2:	3b01      	subs	r3, #1
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_InitTick+0xbc>)
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <HAL_InitTick+0xc0>)
 80011da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0xbc>)
 80011de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80011e4:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_InitTick+0xbc>)
 80011e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_InitTick+0xbc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_InitTick+0xbc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <HAL_InitTick+0xbc>)
 80011f8:	f003 fcf8 	bl	8004bec <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d107      	bne.n	8001212 <HAL_InitTick+0xa6>
 8001202:	e001      	b.n	8001208 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e005      	b.n	8001214 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <HAL_InitTick+0xbc>)
 800120a:	f003 fd51 	bl	8004cb0 <HAL_TIM_Base_Start_IT>
 800120e:	4603      	mov	r3, r0
 8001210:	e000      	b.n	8001214 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	3738      	adds	r7, #56	; 0x38
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	24000010 	.word	0x24000010
 8001220:	58024400 	.word	0x58024400
 8001224:	431bde83 	.word	0x431bde83
 8001228:	24004604 	.word	0x24004604
 800122c:	40010000 	.word	0x40010000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <NMI_Handler+0x4>

08001236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <MemManage_Handler+0x4>

08001242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <BusFault_Handler+0x4>

08001248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <UsageFault_Handler+0x4>

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <TIM1_UP_IRQHandler+0x10>)
 8001262:	f003 fd95 	bl	8004d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	24004604 	.word	0x24004604

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001274:	f7ff f9b0 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f006 fdf9 	bl	8007e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fa4d 	bl	8000740 <main>
  bx  lr
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b0:	2400001c 	.word	0x2400001c
  ldr r2, =_sidata
 80012b4:	08007fac 	.word	0x08007fac
  ldr r2, =_sbss
 80012b8:	240000dc 	.word	0x240000dc
  ldr r4, =_ebss
 80012bc:	24004654 	.word	0x24004654

080012c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC3_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 f947 	bl	800155e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012d0:	f001 fefe 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_Init+0x68>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	4913      	ldr	r1, [pc, #76]	; (8001330 <HAL_Init+0x6c>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_Init+0x68>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_Init+0x6c>)
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_Init+0x70>)
 8001306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_Init+0x74>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130e:	200f      	movs	r0, #15
 8001310:	f7ff ff2c 	bl	800116c <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e002      	b.n	8001324 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131e:	f7ff fd4b 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58024400 	.word	0x58024400
 8001330:	08007f64 	.word	0x08007f64
 8001334:	24000004 	.word	0x24000004
 8001338:	24000000 	.word	0x24000000

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	24000014 	.word	0x24000014
 8001360:	24004650 	.word	0x24004650

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	24004650 	.word	0x24004650

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	24000014 	.word	0x24000014

080013c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetREVID+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	0c1b      	lsrs	r3, r3, #16
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	5c001000 	.word	0x5c001000

080013dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80013ec:	4904      	ldr	r1, [pc, #16]	; (8001400 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	58000400 	.word	0x58000400

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	; (8001444 <__NVIC_SetPriorityGrouping+0x40>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00
 8001448:	05fa0000 	.word	0x05fa0000

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff4c 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001582:	f7ff ff63 	bl	800144c <__NVIC_GetPriorityGrouping>
 8001586:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	6978      	ldr	r0, [r7, #20]
 800158e:	f7ff ffb3 	bl	80014f8 <NVIC_EncodePriority>
 8001592:	4602      	mov	r2, r0
 8001594:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff82 	bl	80014a4 <__NVIC_SetPriority>
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff56 	bl	8001468 <__NVIC_EnableIRQ>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0c6      	b.n	8001764 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fc08 	bl	8000df4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2223      	movs	r2, #35	; 0x23
 80015e8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_ETH_Init+0x1a8>)
 80015ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f0:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_ETH_Init+0x1a8>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <HAL_ETH_Init+0x1a8>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7a1b      	ldrb	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fee3 	bl	80013dc <HAL_SYSCFG_ETHInterfaceSelect>
 8001616:	e003      	b.n	8001620 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001618:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800161c:	f7ff fede 	bl	80013dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff fe94 	bl	8001364 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800163e:	e00f      	b.n	8001660 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001640:	f7ff fe90 	bl	8001364 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800164e:	d907      	bls.n	8001660 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	22e0      	movs	r2, #224	; 0xe0
 800165a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e081      	b.n	8001764 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1e6      	bne.n	8001640 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fac0 	bl	8001bf8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001678:	f001 fea4 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800167c:	4603      	mov	r3, r0
 800167e:	4a3c      	ldr	r2, [pc, #240]	; (8001770 <HAL_ETH_Init+0x1ac>)
 8001680:	fba2 2303 	umull	r2, r3, r2, r3
 8001684:	0c9a      	lsrs	r2, r3, #18
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3a01      	subs	r2, #1
 800168c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fa13 	bl	8001abc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80016b0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	22e0      	movs	r2, #224	; 0xe0
 80016c8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e04a      	b.n	8001764 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	f241 1308 	movw	r3, #4360	; 0x1108
 80016d6:	4413      	add	r3, r2
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_ETH_Init+0x1b0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6952      	ldr	r2, [r2, #20]
 80016e2:	0052      	lsls	r2, r2, #1
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	6809      	ldr	r1, [r1, #0]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80016ee:	440b      	add	r3, r1
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fad8 	bl	8001ca8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fb1c 	bl	8001d36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	3305      	adds	r3, #5
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	021a      	lsls	r2, r3, #8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	3304      	adds	r3, #4
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	061a      	lsls	r2, r3, #24
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	3302      	adds	r3, #2
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800173c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800174a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800174c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2210      	movs	r2, #16
 800175a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2210      	movs	r2, #16
 8001760:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400
 8001770:	431bde83 	.word	0x431bde83
 8001774:	ffff8001 	.word	0xffff8001

08001778 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800178a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	791b      	ldrb	r3, [r3, #4]
 8001790:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001792:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	7b1b      	ldrb	r3, [r3, #12]
 8001798:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800179a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	7b5b      	ldrb	r3, [r3, #13]
 80017a0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017a2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	7b9b      	ldrb	r3, [r3, #14]
 80017a8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80017aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	7bdb      	ldrb	r3, [r3, #15]
 80017b0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017b2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	7c12      	ldrb	r2, [r2, #16]
 80017b8:	2a00      	cmp	r2, #0
 80017ba:	d102      	bne.n	80017c2 <ETH_SetMACConfig+0x4a>
 80017bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017c0:	e000      	b.n	80017c4 <ETH_SetMACConfig+0x4c>
 80017c2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017c4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	7c52      	ldrb	r2, [r2, #17]
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d102      	bne.n	80017d4 <ETH_SetMACConfig+0x5c>
 80017ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d2:	e000      	b.n	80017d6 <ETH_SetMACConfig+0x5e>
 80017d4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017d6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	7c9b      	ldrb	r3, [r3, #18]
 80017dc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017de:	431a      	orrs	r2, r3
                                macconf->Speed |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80017e4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80017ea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	7f1b      	ldrb	r3, [r3, #28]
 80017f0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80017f2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	7f5b      	ldrb	r3, [r3, #29]
 80017f8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80017fa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	7f92      	ldrb	r2, [r2, #30]
 8001800:	2a00      	cmp	r2, #0
 8001802:	d102      	bne.n	800180a <ETH_SetMACConfig+0x92>
 8001804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001808:	e000      	b.n	800180c <ETH_SetMACConfig+0x94>
 800180a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800180c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	7fdb      	ldrb	r3, [r3, #31]
 8001812:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001814:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	f892 2020 	ldrb.w	r2, [r2, #32]
 800181c:	2a00      	cmp	r2, #0
 800181e:	d102      	bne.n	8001826 <ETH_SetMACConfig+0xae>
 8001820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001824:	e000      	b.n	8001828 <ETH_SetMACConfig+0xb0>
 8001826:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001828:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800182e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001836:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001838:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <ETH_SetMACConfig+0x22c>)
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	430b      	orrs	r3, r1
 8001854:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001862:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001864:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800186c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800186e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001876:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001878:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001880:	2a00      	cmp	r2, #0
 8001882:	d102      	bne.n	800188a <ETH_SetMACConfig+0x112>
 8001884:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001888:	e000      	b.n	800188c <ETH_SetMACConfig+0x114>
 800188a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800188c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <ETH_SetMACConfig+0x230>)
 800189e:	4013      	ands	r3, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	68f9      	ldr	r1, [r7, #12]
 80018a6:	430b      	orrs	r3, r1
 80018a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <ETH_SetMACConfig+0x234>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018da:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	d101      	bne.n	80018ea <ETH_SetMACConfig+0x172>
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	e000      	b.n	80018ec <ETH_SetMACConfig+0x174>
 80018ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018ec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018fe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	430b      	orrs	r3, r1
 800190c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001914:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800191c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192a:	f023 0103 	bic.w	r1, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	430a      	orrs	r2, r1
 8001936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001942:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800195e:	2a00      	cmp	r2, #0
 8001960:	d101      	bne.n	8001966 <ETH_SetMACConfig+0x1ee>
 8001962:	2240      	movs	r2, #64	; 0x40
 8001964:	e000      	b.n	8001968 <ETH_SetMACConfig+0x1f0>
 8001966:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001968:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001970:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001972:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800197a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001988:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	430a      	orrs	r2, r1
 8001994:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	00048083 	.word	0x00048083
 80019a8:	c0f88000 	.word	0xc0f88000
 80019ac:	fffffef0 	.word	0xfffffef0

080019b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <ETH_SetDMAConfig+0xf8>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	6809      	ldr	r1, [r1, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80019d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	791b      	ldrb	r3, [r3, #4]
 80019dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	7b1b      	ldrb	r3, [r3, #12]
 80019e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80019f6:	4413      	add	r3, r2
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <ETH_SetDMAConfig+0xfc>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6811      	ldr	r1, [r2, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	f241 0304 	movw	r3, #4100	; 0x1004
 8001a0a:	440b      	add	r3, r1
 8001a0c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <ETH_SetDMAConfig+0x100>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6811      	ldr	r1, [r2, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001a36:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	7d1b      	ldrb	r3, [r3, #20]
 8001a40:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a42:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	7f5b      	ldrb	r3, [r3, #29]
 8001a48:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a56:	4413      	add	r3, r2
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <ETH_SetDMAConfig+0x104>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6811      	ldr	r1, [r2, #0]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	431a      	orrs	r2, r3
 8001a66:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a6a:	440b      	add	r3, r1
 8001a6c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	7f1b      	ldrb	r3, [r3, #28]
 8001a72:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a84:	4413      	add	r3, r2
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <ETH_SetDMAConfig+0x108>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6811      	ldr	r1, [r2, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	431a      	orrs	r2, r3
 8001a94:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a98:	440b      	add	r3, r1
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	ffff87fd 	.word	0xffff87fd
 8001aac:	ffff2ffe 	.word	0xffff2ffe
 8001ab0:	fffec000 	.word	0xfffec000
 8001ab4:	ffc0efef 	.word	0xffc0efef
 8001ab8:	7fc0ffff 	.word	0x7fc0ffff

08001abc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0a4      	sub	sp, #144	; 0x90
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aca:	2300      	movs	r3, #0
 8001acc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001b14:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001b18:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b36:	2300      	movs	r3, #0
 8001b38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b54:	2320      	movs	r3, #32
 8001b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b70:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b96:	2300      	movs	r3, #0
 8001b98:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fde6 	bl	8001778 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bac:	2301      	movs	r3, #1
 8001bae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bd4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001bdc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fee1 	bl	80019b0 <ETH_SetDMAConfig>
}
 8001bee:	bf00      	nop
 8001bf0:	3790      	adds	r7, #144	; 0x90
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c12:	f001 fbd7 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8001c16:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d908      	bls.n	8001c32 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d804      	bhi.n	8001c32 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e027      	b.n	8001c82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4a18      	ldr	r2, [pc, #96]	; (8001c98 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d908      	bls.n	8001c4c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d204      	bcs.n	8001c4c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e01a      	b.n	8001c82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d303      	bcc.n	8001c5c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d911      	bls.n	8001c80 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d908      	bls.n	8001c76 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d804      	bhi.n	8001c76 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e005      	b.n	8001c82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e000      	b.n	8001c82 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c80:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	01312cff 	.word	0x01312cff
 8001c98:	02160ebf 	.word	0x02160ebf
 8001c9c:	03938700 	.word	0x03938700
 8001ca0:	05f5e0ff 	.word	0x05f5e0ff
 8001ca4:	08f0d17f 	.word	0x08f0d17f

08001ca8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e01d      	b.n	8001cf2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68d9      	ldr	r1, [r3, #12]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	3206      	adds	r2, #6
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d9de      	bls.n	8001cb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f241 132c 	movw	r3, #4396	; 0x112c
 8001d06:	4413      	add	r3, r2
 8001d08:	2203      	movs	r2, #3
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68d9      	ldr	r1, [r3, #12]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f241 1314 	movw	r3, #4372	; 0x1114
 8001d18:	4413      	add	r3, r2
 8001d1a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e024      	b.n	8001d8e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6919      	ldr	r1, [r3, #16]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3310      	adds	r3, #16
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d9d7      	bls.n	8001d44 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f241 1330 	movw	r3, #4400	; 0x1130
 8001dba:	4413      	add	r3, r2
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6919      	ldr	r1, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	f241 131c 	movw	r3, #4380	; 0x111c
 8001dcc:	4413      	add	r3, r2
 8001dce:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f241 1328 	movw	r3, #4392	; 0x1128
 8001de0:	4413      	add	r3, r2
 8001de2:	6019      	str	r1, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	; 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dfe:	4b89      	ldr	r3, [pc, #548]	; (8002024 <HAL_GPIO_Init+0x234>)
 8001e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e02:	e194      	b.n	800212e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8186 	beq.w	8002128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d00b      	beq.n	8001e3c <HAL_GPIO_Init+0x4c>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d007      	beq.n	8001e3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e30:	2b11      	cmp	r3, #17
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b12      	cmp	r3, #18
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0xee>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d123      	bne.n	8001f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0203 	and.w	r2, r3, #3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80e0 	beq.w	8002128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_GPIO_Init+0x238>)
 8001f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <HAL_GPIO_Init+0x238>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_GPIO_Init+0x238>)
 8001f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f86:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_GPIO_Init+0x23c>)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a20      	ldr	r2, [pc, #128]	; (8002030 <HAL_GPIO_Init+0x240>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d052      	beq.n	8002058 <HAL_GPIO_Init+0x268>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_GPIO_Init+0x244>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_GPIO_Init+0x22e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <HAL_GPIO_Init+0x248>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x22a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_GPIO_Init+0x24c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x226>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_GPIO_Init+0x250>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x222>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_GPIO_Init+0x254>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x21e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_GPIO_Init+0x258>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x21a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_GPIO_Init+0x25c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x216>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_GPIO_Init+0x260>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x212>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_GPIO_Init+0x264>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x20e>
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	e02d      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8001ffe:	230a      	movs	r3, #10
 8002000:	e02b      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002002:	2308      	movs	r3, #8
 8002004:	e029      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002006:	2307      	movs	r3, #7
 8002008:	e027      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800200a:	2306      	movs	r3, #6
 800200c:	e025      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800200e:	2305      	movs	r3, #5
 8002010:	e023      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002012:	2304      	movs	r3, #4
 8002014:	e021      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002016:	2303      	movs	r3, #3
 8002018:	e01f      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800201a:	2302      	movs	r3, #2
 800201c:	e01d      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800201e:	2301      	movs	r3, #1
 8002020:	e01b      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002022:	bf00      	nop
 8002024:	58000080 	.word	0x58000080
 8002028:	58024400 	.word	0x58024400
 800202c:	58000400 	.word	0x58000400
 8002030:	58020000 	.word	0x58020000
 8002034:	58020400 	.word	0x58020400
 8002038:	58020800 	.word	0x58020800
 800203c:	58020c00 	.word	0x58020c00
 8002040:	58021000 	.word	0x58021000
 8002044:	58021400 	.word	0x58021400
 8002048:	58021800 	.word	0x58021800
 800204c:	58021c00 	.word	0x58021c00
 8002050:	58022000 	.word	0x58022000
 8002054:	58022400 	.word	0x58022400
 8002058:	2300      	movs	r3, #0
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206a:	4938      	ldr	r1, [pc, #224]	; (800214c <HAL_GPIO_Init+0x35c>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f ae63 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	; 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	58000400 	.word	0x58000400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800218c:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_HSEM_FastTake+0x2c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3320      	adds	r3, #32
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_HSEM_FastTake+0x30>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	58026400 	.word	0x58026400
 80021b4:	80000300 	.word	0x80000300

080021b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021c2:	4906      	ldr	r1, [pc, #24]	; (80021dc <HAL_HSEM_Release+0x24>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	58026400 	.word	0x58026400

080021e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e2:	b08f      	sub	sp, #60	; 0x3c
 80021e4:	af0a      	add	r7, sp, #40	; 0x28
 80021e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e116      	b.n	8002420 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe ff25 	bl	800105c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2203      	movs	r2, #3
 8002216:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f83b 	bl	80062ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	687e      	ldr	r6, [r7, #4]
 800223e:	466d      	mov	r5, sp
 8002240:	f106 0410 	add.w	r4, r6, #16
 8002244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800224a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800224c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002250:	e885 0003 	stmia.w	r5, {r0, r1}
 8002254:	1d33      	adds	r3, r6, #4
 8002256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002258:	6838      	ldr	r0, [r7, #0]
 800225a:	f003 ffb9 	bl	80061d0 <USB_CoreInit>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0d7      	b.n	8002420 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f004 f829 	bl	80062ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e04a      	b.n	8002318 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333d      	adds	r3, #61	; 0x3d
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	333c      	adds	r3, #60	; 0x3c
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	b298      	uxth	r0, r3
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3342      	adds	r3, #66	; 0x42
 80022be:	4602      	mov	r2, r0
 80022c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	1a9b      	subs	r3, r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	333f      	adds	r3, #63	; 0x3f
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	3344      	adds	r3, #68	; 0x44
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3348      	adds	r3, #72	; 0x48
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3350      	adds	r3, #80	; 0x50
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	3301      	adds	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d3af      	bcc.n	8002282 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e044      	b.n	80023b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800233e:	7bfa      	ldrb	r2, [r7, #15]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002354:	7bfa      	ldrb	r2, [r7, #15]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
 80023ae:	3301      	adds	r3, #1
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3b5      	bcc.n	8002328 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	687e      	ldr	r6, [r7, #4]
 80023c4:	466d      	mov	r5, sp
 80023c6:	f106 0410 	add.w	r4, r6, #16
 80023ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023da:	1d33      	adds	r3, r6, #4
 80023dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023de:	6838      	ldr	r0, [r7, #0]
 80023e0:	f003 ffa0 	bl	8006324 <USB_DevInit>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e014      	b.n	8002420 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f80a 	bl	8002428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f004 f942 	bl	80066a2 <USB_DevDisconnect>

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_PCDEx_ActivateLPM+0x44>)
 8002458:	4313      	orrs	r3, r2
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	10000003 	.word	0x10000003

08002470 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_PWREx_ConfigSupply+0xb0>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	2b06      	cmp	r3, #6
 8002482:	d00a      	beq.n	800249a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_PWREx_ConfigSupply+0xb0>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e040      	b.n	8002518 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e03e      	b.n	8002518 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_PWREx_ConfigSupply+0xb0>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024a2:	491f      	ldr	r1, [pc, #124]	; (8002520 <HAL_PWREx_ConfigSupply+0xb0>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024aa:	f7fe ff5b 	bl	8001364 <HAL_GetTick>
 80024ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024b0:	e009      	b.n	80024c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b2:	f7fe ff57 	bl	8001364 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c0:	d901      	bls.n	80024c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e028      	b.n	8002518 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_PWREx_ConfigSupply+0xb0>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d2:	d1ee      	bne.n	80024b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b1e      	cmp	r3, #30
 80024d8:	d008      	beq.n	80024ec <HAL_PWREx_ConfigSupply+0x7c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b2e      	cmp	r3, #46	; 0x2e
 80024de:	d005      	beq.n	80024ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b1d      	cmp	r3, #29
 80024e4:	d002      	beq.n	80024ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b2d      	cmp	r3, #45	; 0x2d
 80024ea:	d114      	bne.n	8002516 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024ec:	f7fe ff3a 	bl	8001364 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024f2:	e009      	b.n	8002508 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024f4:	f7fe ff36 	bl	8001364 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002502:	d901      	bls.n	8002508 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_PWREx_ConfigSupply+0xb0>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d1ee      	bne.n	80024f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	58024800 	.word	0x58024800

08002524 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	58024800 	.word	0x58024800

08002544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e3ff      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8087 	beq.w	8002672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002564:	4b99      	ldr	r3, [pc, #612]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800256e:	4b97      	ldr	r3, [pc, #604]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	2b10      	cmp	r3, #16
 8002578:	d007      	beq.n	800258a <HAL_RCC_OscConfig+0x46>
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	2b18      	cmp	r3, #24
 800257e:	d110      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d10b      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4b90      	ldr	r3, [pc, #576]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06c      	beq.n	8002670 <HAL_RCC_OscConfig+0x12c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d168      	bne.n	8002670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e3d9      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x76>
 80025ac:	4b87      	ldr	r3, [pc, #540]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a86      	ldr	r2, [pc, #536]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e02e      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b82      	ldr	r3, [pc, #520]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a81      	ldr	r2, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0xbc>
 80025e6:	4b79      	ldr	r3, [pc, #484]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a78      	ldr	r2, [pc, #480]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b76      	ldr	r3, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a75      	ldr	r2, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 8002600:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6e      	ldr	r2, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fea0 	bl	8001364 <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fe9c 	bl	8001364 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e38d      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800263a:	4b64      	ldr	r3, [pc, #400]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xe4>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fe8c 	bl	8001364 <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fe88 	bl	8001364 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	; 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e379      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x10c>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80ae 	beq.w	80027dc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002680:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002688:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268a:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_RCC_OscConfig+0x162>
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2b18      	cmp	r3, #24
 800269a:	d13a      	bne.n	8002712 <HAL_RCC_OscConfig+0x1ce>
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d135      	bne.n	8002712 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCC_OscConfig+0x17a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e34b      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	f7fe fe81 	bl	80013c4 <HAL_GetREVID>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d817      	bhi.n	80026fc <HAL_RCC_OscConfig+0x1b8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d108      	bne.n	80026e6 <HAL_RCC_OscConfig+0x1a2>
 80026d4:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80026de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e4:	e07a      	b.n	80027dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	031b      	lsls	r3, r3, #12
 80026f4:	4935      	ldr	r1, [pc, #212]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fa:	e06f      	b.n	80027dc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	061b      	lsls	r3, r3, #24
 800270a:	4930      	ldr	r1, [pc, #192]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002710:	e064      	b.n	80027dc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d045      	beq.n	80027a6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0219 	bic.w	r2, r3, #25
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4929      	ldr	r1, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fe1a 	bl	8001364 <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002734:	f7fe fe16 	bl	8001364 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e307      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002752:	f7fe fe37 	bl	80013c4 <HAL_GetREVID>
 8002756:	4603      	mov	r3, r0
 8002758:	f241 0203 	movw	r2, #4099	; 0x1003
 800275c:	4293      	cmp	r3, r2
 800275e:	d817      	bhi.n	8002790 <HAL_RCC_OscConfig+0x24c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d108      	bne.n	800277a <HAL_RCC_OscConfig+0x236>
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002770:	4a16      	ldr	r2, [pc, #88]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002776:	6053      	str	r3, [r2, #4]
 8002778:	e030      	b.n	80027dc <HAL_RCC_OscConfig+0x298>
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	031b      	lsls	r3, r3, #12
 8002788:	4910      	ldr	r1, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
 800278e:	e025      	b.n	80027dc <HAL_RCC_OscConfig+0x298>
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	490b      	ldr	r1, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
 80027a4:	e01a      	b.n	80027dc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <HAL_RCC_OscConfig+0x288>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fdd7 	bl	8001364 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fe fdd3 	bl	8001364 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d903      	bls.n	80027d0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e2c4      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
 80027cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d0:	4ba4      	ldr	r3, [pc, #656]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a9 	beq.w	800293c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027f4:	4b9b      	ldr	r3, [pc, #620]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d007      	beq.n	8002810 <HAL_RCC_OscConfig+0x2cc>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b18      	cmp	r3, #24
 8002804:	d13a      	bne.n	800287c <HAL_RCC_OscConfig+0x338>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d135      	bne.n	800287c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002810:	4b94      	ldr	r3, [pc, #592]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_OscConfig+0x2e4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d001      	beq.n	8002828 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e296      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002828:	f7fe fdcc 	bl	80013c4 <HAL_GetREVID>
 800282c:	4603      	mov	r3, r0
 800282e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002832:	4293      	cmp	r3, r2
 8002834:	d817      	bhi.n	8002866 <HAL_RCC_OscConfig+0x322>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	2b20      	cmp	r3, #32
 800283c:	d108      	bne.n	8002850 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b89      	ldr	r3, [pc, #548]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800284c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800284e:	e075      	b.n	800293c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002850:	4b84      	ldr	r3, [pc, #528]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	4981      	ldr	r1, [pc, #516]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002864:	e06a      	b.n	800293c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	497b      	ldr	r1, [pc, #492]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800287a:	e05f      	b.n	800293c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d042      	beq.n	800290a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002884:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a76      	ldr	r2, [pc, #472]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 800288a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fd68 	bl	8001364 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002898:	f7fe fd64 	bl	8001364 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e255      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028aa:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028b6:	f7fe fd85 	bl	80013c4 <HAL_GetREVID>
 80028ba:	4603      	mov	r3, r0
 80028bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d817      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x3b0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d108      	bne.n	80028de <HAL_RCC_OscConfig+0x39a>
 80028cc:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80028d4:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80028d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028da:	6053      	str	r3, [r2, #4]
 80028dc:	e02e      	b.n	800293c <HAL_RCC_OscConfig+0x3f8>
 80028de:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	495d      	ldr	r1, [pc, #372]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
 80028f2:	e023      	b.n	800293c <HAL_RCC_OscConfig+0x3f8>
 80028f4:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	4958      	ldr	r1, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002904:	4313      	orrs	r3, r2
 8002906:	60cb      	str	r3, [r1, #12]
 8002908:	e018      	b.n	800293c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800290a:	4b56      	ldr	r3, [pc, #344]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a55      	ldr	r2, [pc, #340]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe fd25 	bl	8001364 <HAL_GetTick>
 800291a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800291e:	f7fe fd21 	bl	8001364 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e212      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002930:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d036      	beq.n	80029b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d019      	beq.n	8002984 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002950:	4b44      	ldr	r3, [pc, #272]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	4a43      	ldr	r2, [pc, #268]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fd02 	bl	8001364 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fcfe 	bl	8001364 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1ef      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002976:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x420>
 8002982:	e018      	b.n	80029b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002988:	4a36      	ldr	r2, [pc, #216]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 800298a:	f023 0301 	bic.w	r3, r3, #1
 800298e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fce8 	bl	8001364 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe fce4 	bl	8001364 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e1d5      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029aa:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d036      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d019      	beq.n	80029fe <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029ca:	4b26      	ldr	r3, [pc, #152]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a25      	ldr	r2, [pc, #148]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80029d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fcc5 	bl	8001364 <HAL_GetTick>
 80029da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029de:	f7fe fcc1 	bl	8001364 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1b2      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x49a>
 80029fc:	e018      	b.n	8002a30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029fe:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a0a:	f7fe fcab 	bl	8001364 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a12:	f7fe fca7 	bl	8001364 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e198      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_RCC_OscConfig+0x520>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8085 	beq.w	8002b48 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_RCC_OscConfig+0x524>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x524>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4a:	f7fe fc8b 	bl	8001364 <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a50:	e00c      	b.n	8002a6c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7fe fc87 	bl	8001364 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d905      	bls.n	8002a6c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e178      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
 8002a64:	58024400 	.word	0x58024400
 8002a68:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6c:	4b96      	ldr	r3, [pc, #600]	; (8002cc8 <HAL_RCC_OscConfig+0x784>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ec      	beq.n	8002a52 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x54a>
 8002a80:	4b92      	ldr	r3, [pc, #584]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a91      	ldr	r2, [pc, #580]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a8c:	e02d      	b.n	8002aea <HAL_RCC_OscConfig+0x5a6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x56c>
 8002a96:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	4a8c      	ldr	r2, [pc, #560]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa2:	4b8a      	ldr	r3, [pc, #552]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	4a89      	ldr	r2, [pc, #548]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6713      	str	r3, [r2, #112]	; 0x70
 8002aae:	e01c      	b.n	8002aea <HAL_RCC_OscConfig+0x5a6>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x58e>
 8002ab8:	4b84      	ldr	r3, [pc, #528]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a83      	ldr	r2, [pc, #524]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	4b81      	ldr	r3, [pc, #516]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a80      	ldr	r2, [pc, #512]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	e00b      	b.n	8002aea <HAL_RCC_OscConfig+0x5a6>
 8002ad2:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a7d      	ldr	r2, [pc, #500]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a7a      	ldr	r2, [pc, #488]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d015      	beq.n	8002b1e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af2:	f7fe fc37 	bl	8001364 <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af8:	e00a      	b.n	8002b10 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f7fe fc33 	bl	8001364 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e122      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b10:	4b6e      	ldr	r3, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ee      	beq.n	8002afa <HAL_RCC_OscConfig+0x5b6>
 8002b1c:	e014      	b.n	8002b48 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fc21 	bl	8001364 <HAL_GetTick>
 8002b22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fc1d 	bl	8001364 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e10c      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b3c:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1ee      	bne.n	8002b26 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 8101 	beq.w	8002d54 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b52:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b5a:	2b18      	cmp	r3, #24
 8002b5c:	f000 80bc 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f040 8095 	bne.w	8002c94 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe fbf5 	bl	8001364 <HAL_GetTick>
 8002b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe fbf1 	bl	8001364 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0e2      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b90:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_RCC_OscConfig+0x78c>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	4946      	ldr	r1, [pc, #280]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	628b      	str	r3, [r1, #40]	; 0x28
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	025b      	lsls	r3, r3, #9
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	3b01      	subs	r3, #1
 8002be0:	061b      	lsls	r3, r3, #24
 8002be2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002be6:	4939      	ldr	r1, [pc, #228]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002bec:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	4a36      	ldr	r2, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bf8:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <HAL_RCC_OscConfig+0x790>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c04:	00d2      	lsls	r2, r2, #3
 8002c06:	4931      	ldr	r1, [pc, #196]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	f023 020c 	bic.w	r2, r3, #12
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	492c      	ldr	r1, [pc, #176]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	f023 0202 	bic.w	r2, r3, #2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4928      	ldr	r1, [pc, #160]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a19      	ldr	r2, [pc, #100]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb7a 	bl	8001364 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe fb76 	bl	8001364 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x730>
 8002c92:	e05f      	b.n	8002d54 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fb60 	bl	8001364 <HAL_GetTick>
 8002ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fb5c 	bl	8001364 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04d      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_RCC_OscConfig+0x788>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x764>
 8002cc6:	e045      	b.n	8002d54 <HAL_RCC_OscConfig+0x810>
 8002cc8:	58024800 	.word	0x58024800
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	fffffc0c 	.word	0xfffffc0c
 8002cd4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002cd8:	4b21      	ldr	r3, [pc, #132]	; (8002d60 <HAL_RCC_OscConfig+0x81c>)
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_OscConfig+0x81c>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d031      	beq.n	8002d50 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f003 0203 	and.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d12a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d122      	bne.n	8002d50 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d11a      	bne.n	8002d50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	0a5b      	lsrs	r3, r3, #9
 8002d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d26:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	0c1b      	lsrs	r3, r3, #16
 8002d30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d108      	bne.n	8002d50 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0e1b      	lsrs	r3, r3, #24
 8002d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3730      	adds	r7, #48	; 0x30
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	58024400 	.word	0x58024400

08002d64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e19c      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d78:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d910      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b87      	ldr	r3, [pc, #540]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 020f 	bic.w	r2, r3, #15
 8002d8e:	4985      	ldr	r1, [pc, #532]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b83      	ldr	r3, [pc, #524]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e184      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d010      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d908      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc4:	4b78      	ldr	r3, [pc, #480]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4975      	ldr	r1, [pc, #468]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b70      	ldr	r3, [pc, #448]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d908      	bls.n	8002e04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002df2:	4b6d      	ldr	r3, [pc, #436]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	496a      	ldr	r1, [pc, #424]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d010      	beq.n	8002e32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d908      	bls.n	8002e32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e20:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	495e      	ldr	r1, [pc, #376]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d010      	beq.n	8002e60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d908      	bls.n	8002e60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4953      	ldr	r1, [pc, #332]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b4d      	ldr	r3, [pc, #308]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d908      	bls.n	8002e8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f023 020f 	bic.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4947      	ldr	r1, [pc, #284]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d055      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e9a:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	4940      	ldr	r1, [pc, #256]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0f6      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d115      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0ea      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0de      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0d6      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f023 0207 	bic.w	r2, r3, #7
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4925      	ldr	r1, [pc, #148]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe fa25 	bl	8001364 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1e:	f7fe fa21 	bl	8001364 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0be      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f34:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d1eb      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d010      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d208      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	490e      	ldr	r1, [pc, #56]	; (8002fa8 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d214      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 020f 	bic.w	r2, r3, #15
 8002f8a:	4906      	ldr	r1, [pc, #24]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_RCC_ClockConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e086      	b.n	80030b2 <HAL_RCC_ClockConfig+0x34e>
 8002fa4:	52002000 	.word	0x52002000
 8002fa8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d010      	beq.n	8002fda <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d208      	bcs.n	8002fda <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	4939      	ldr	r1, [pc, #228]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d208      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	492e      	ldr	r1, [pc, #184]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003004:	4313      	orrs	r3, r2
 8003006:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d010      	beq.n	8003036 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699a      	ldr	r2, [r3, #24]
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003020:	429a      	cmp	r2, r3
 8003022:	d208      	bcs.n	8003036 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003024:	4b25      	ldr	r3, [pc, #148]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	4922      	ldr	r1, [pc, #136]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003032:	4313      	orrs	r3, r2
 8003034:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d010      	beq.n	8003064 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304e:	429a      	cmp	r2, r3
 8003050:	d208      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4917      	ldr	r1, [pc, #92]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003060:	4313      	orrs	r3, r2
 8003062:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003064:	f000 f834 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	4912      	ldr	r1, [pc, #72]	; (80030c0 <HAL_RCC_ClockConfig+0x35c>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x358>)
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	4a0d      	ldr	r2, [pc, #52]	; (80030c0 <HAL_RCC_ClockConfig+0x35c>)
 800308c:	5cd3      	ldrb	r3, [r2, r3]
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x360>)
 800309a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x364>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x368>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe f860 	bl	800116c <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	58024400 	.word	0x58024400
 80030c0:	08007f64 	.word	0x08007f64
 80030c4:	24000004 	.word	0x24000004
 80030c8:	24000000 	.word	0x24000000
 80030cc:	24000010 	.word	0x24000010

080030d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	; 0x24
 80030d4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d6:	4bb3      	ldr	r3, [pc, #716]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030de:	2b18      	cmp	r3, #24
 80030e0:	f200 8155 	bhi.w	800338e <HAL_RCC_GetSysClockFreq+0x2be>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_RCC_GetSysClockFreq+0x1c>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003151 	.word	0x08003151
 80030f0:	0800338f 	.word	0x0800338f
 80030f4:	0800338f 	.word	0x0800338f
 80030f8:	0800338f 	.word	0x0800338f
 80030fc:	0800338f 	.word	0x0800338f
 8003100:	0800338f 	.word	0x0800338f
 8003104:	0800338f 	.word	0x0800338f
 8003108:	0800338f 	.word	0x0800338f
 800310c:	08003177 	.word	0x08003177
 8003110:	0800338f 	.word	0x0800338f
 8003114:	0800338f 	.word	0x0800338f
 8003118:	0800338f 	.word	0x0800338f
 800311c:	0800338f 	.word	0x0800338f
 8003120:	0800338f 	.word	0x0800338f
 8003124:	0800338f 	.word	0x0800338f
 8003128:	0800338f 	.word	0x0800338f
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800338f 	.word	0x0800338f
 8003134:	0800338f 	.word	0x0800338f
 8003138:	0800338f 	.word	0x0800338f
 800313c:	0800338f 	.word	0x0800338f
 8003140:	0800338f 	.word	0x0800338f
 8003144:	0800338f 	.word	0x0800338f
 8003148:	0800338f 	.word	0x0800338f
 800314c:	08003183 	.word	0x08003183
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003150:	4b94      	ldr	r3, [pc, #592]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800315c:	4b91      	ldr	r3, [pc, #580]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	4a90      	ldr	r2, [pc, #576]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800316e:	e111      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003170:	4b8d      	ldr	r3, [pc, #564]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003172:	61bb      	str	r3, [r7, #24]
    break;
 8003174:	e10e      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003176:	4b8d      	ldr	r3, [pc, #564]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003178:	61bb      	str	r3, [r7, #24]
    break;
 800317a:	e10b      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800317c:	4b8c      	ldr	r3, [pc, #560]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800317e:	61bb      	str	r3, [r7, #24]
    break;
 8003180:	e108      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003182:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800318c:	4b85      	ldr	r3, [pc, #532]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003196:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003198:	4b82      	ldr	r3, [pc, #520]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031a2:	4b80      	ldr	r3, [pc, #512]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80e1 	beq.w	8003388 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	f000 8083 	beq.w	80032d4 <HAL_RCC_GetSysClockFreq+0x204>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f200 80a1 	bhi.w	8003318 <HAL_RCC_GetSysClockFreq+0x248>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x114>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d056      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031e2:	e099      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e4:	4b6f      	ldr	r3, [pc, #444]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d02d      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031f0:	4b6c      	ldr	r3, [pc, #432]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	4a6b      	ldr	r2, [pc, #428]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800321a:	4b62      	ldr	r3, [pc, #392]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322a:	ed97 6a02 	vldr	s12, [r7, #8]
 800322e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800323a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003246:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800324a:	e087      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800325a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325e:	4b51      	ldr	r3, [pc, #324]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003272:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800327a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800328e:	e065      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b40      	ldr	r3, [pc, #256]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032d2:	e043      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003316:	e021      	b.n	800335c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800335a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	0a5b      	lsrs	r3, r3, #9
 8003362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003366:	3301      	adds	r3, #1
 8003368:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003374:	edd7 6a07 	vldr	s13, [r7, #28]
 8003378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800337c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003380:	ee17 3a90 	vmov	r3, s15
 8003384:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003386:	e005      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	61bb      	str	r3, [r7, #24]
    break;
 800338c:	e002      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003390:	61bb      	str	r3, [r7, #24]
    break;
 8003392:	bf00      	nop
  }

  return sysclockfreq;
 8003394:	69bb      	ldr	r3, [r7, #24]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	58024400 	.word	0x58024400
 80033a8:	03d09000 	.word	0x03d09000
 80033ac:	003d0900 	.word	0x003d0900
 80033b0:	007a1200 	.word	0x007a1200
 80033b4:	46000000 	.word	0x46000000
 80033b8:	4c742400 	.word	0x4c742400
 80033bc:	4a742400 	.word	0x4a742400
 80033c0:	4af42400 	.word	0x4af42400

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ca:	f7ff fe81 	bl	80030d0 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_RCC_GetHCLKFreq+0x50>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490f      	ldr	r1, [pc, #60]	; (8003418 <HAL_RCC_GetHCLKFreq+0x54>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	fa22 f303 	lsr.w	r3, r2, r3
 80033e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e8:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_GetHCLKFreq+0x54>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_RCC_GetHCLKFreq+0x58>)
 8003400:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_RCC_GetHCLKFreq+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	58024400 	.word	0x58024400
 8003418:	08007f64 	.word	0x08007f64
 800341c:	24000004 	.word	0x24000004
 8003420:	24000000 	.word	0x24000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003428:	f7ff ffcc 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4904      	ldr	r1, [pc, #16]	; (800344c <HAL_RCC_GetPCLK1Freq+0x28>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	58024400 	.word	0x58024400
 800344c:	08007f64 	.word	0x08007f64

08003450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003454:	f7ff ffb6 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4904      	ldr	r1, [pc, #16]	; (8003478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	08007f64 	.word	0x08007f64

0800347c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223f      	movs	r2, #63	; 0x3f
 800348a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f003 0207 	and.w	r2, r3, #7
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCC_GetClockConfig+0x7c>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetClockConfig+0x80>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	601a      	str	r2, [r3, #0]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	58024400 	.word	0x58024400
 80034fc:	52002000 	.word	0x52002000

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800350c:	2300      	movs	r3, #0
 800350e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d03f      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003520:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003524:	d02a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003526:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800352a:	d824      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800352c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003530:	d018      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003532:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003536:	d81e      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800353c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003540:	d007      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003542:	e018      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4bab      	ldr	r3, [pc, #684]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4aaa      	ldr	r2, [pc, #680]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003550:	e015      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f001 f9e3 	bl	8004924 <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003562:	e00c      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fa8c 	bl	8004a88 <RCCEx_PLL3_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
      break;
 800357a:	e000      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800357c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003584:	4b9b      	ldr	r3, [pc, #620]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003590:	4998      	ldr	r1, [pc, #608]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	650b      	str	r3, [r1, #80]	; 0x50
 8003596:	e001      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d03d      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d826      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035cd 	.word	0x080035cd
 80035bc:	080035db 	.word	0x080035db
 80035c0:	080035ed 	.word	0x080035ed
 80035c4:	08003605 	.word	0x08003605
 80035c8:	08003605 	.word	0x08003605
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035cc:	4b89      	ldr	r3, [pc, #548]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	4a88      	ldr	r2, [pc, #544]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035d8:	e015      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f001 f99f 	bl	8004924 <RCCEx_PLL2_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035ea:	e00c      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3324      	adds	r3, #36	; 0x24
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fa48 	bl	8004a88 <RCCEx_PLL3_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	75fb      	strb	r3, [r7, #23]
      break;
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800360c:	4b79      	ldr	r3, [pc, #484]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	f023 0207 	bic.w	r2, r3, #7
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	4976      	ldr	r1, [pc, #472]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	650b      	str	r3, [r1, #80]	; 0x50
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d042      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003638:	d02b      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800363a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363e:	d825      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003640:	2bc0      	cmp	r3, #192	; 0xc0
 8003642:	d028      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003644:	2bc0      	cmp	r3, #192	; 0xc0
 8003646:	d821      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d016      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d81d      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003654:	2b40      	cmp	r3, #64	; 0x40
 8003656:	d007      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003658:	e018      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365a:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	4a65      	ldr	r2, [pc, #404]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003666:	e017      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f958 	bl	8004924 <RCCEx_PLL2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003678:	e00e      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3324      	adds	r3, #36	; 0x24
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f001 fa01 	bl	8004a88 <RCCEx_PLL3_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800368a:	e005      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
      break;
 8003690:	e002      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800369e:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	4952      	ldr	r1, [pc, #328]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	650b      	str	r3, [r1, #80]	; 0x50
 80036b0:	e001      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d049      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036cc:	d030      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d2:	d82a      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036d8:	d02c      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036da:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036de:	d824      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e4:	d018      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ea:	d81e      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f4:	d007      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036f6:	e018      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f8:	4b3e      	ldr	r3, [pc, #248]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	4a3d      	ldr	r2, [pc, #244]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003704:	e017      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f001 f909 	bl	8004924 <RCCEx_PLL2_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003716:	e00e      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3324      	adds	r3, #36	; 0x24
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f001 f9b2 	bl	8004a88 <RCCEx_PLL3_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003728:	e005      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	75fb      	strb	r3, [r7, #23]
      break;
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003734:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800374a:	492a      	ldr	r1, [pc, #168]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800374c:	4313      	orrs	r3, r2
 800374e:	658b      	str	r3, [r1, #88]	; 0x58
 8003750:	e001      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375e:	2b00      	cmp	r3, #0
 8003760:	d04c      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003768:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800376c:	d030      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800376e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003772:	d82a      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003778:	d02c      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800377a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800377e:	d824      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003784:	d018      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378a:	d81e      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003794:	d007      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003796:	e018      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a15      	ldr	r2, [pc, #84]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a4:	e017      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f001 f8b9 	bl	8004924 <RCCEx_PLL2_Config>
 80037b2:	4603      	mov	r3, r0
 80037b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037b6:	e00e      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3324      	adds	r3, #36	; 0x24
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 f962 	bl	8004a88 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c8:	e005      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
      break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80037d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10d      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ea:	4902      	ldr	r1, [pc, #8]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	658b      	str	r3, [r1, #88]	; 0x58
 80037f0:	e004      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d032      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d01c      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003810:	2b30      	cmp	r3, #48	; 0x30
 8003812:	d817      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003814:	2b20      	cmp	r3, #32
 8003816:	d00c      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003818:	2b20      	cmp	r3, #32
 800381a:	d813      	bhi.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800381c:	2b00      	cmp	r3, #0
 800381e:	d016      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003820:	2b10      	cmp	r3, #16
 8003822:	d10f      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003824:	4baf      	ldr	r3, [pc, #700]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4aae      	ldr	r2, [pc, #696]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800382a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003830:	e00e      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3304      	adds	r3, #4
 8003836:	2102      	movs	r1, #2
 8003838:	4618      	mov	r0, r3
 800383a:	f001 f873 	bl	8004924 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003842:	e005      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
      break;
 8003848:	e002      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800384e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003856:	4ba3      	ldr	r3, [pc, #652]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	49a0      	ldr	r1, [pc, #640]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003868:	e001      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d047      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003882:	d030      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003888:	d82a      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800388a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800388e:	d02c      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003894:	d824      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389a:	d018      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	d81e      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038aa:	d007      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80038ac:	e018      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ae:	4b8d      	ldr	r3, [pc, #564]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	4a8c      	ldr	r2, [pc, #560]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038ba:	e017      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 f82e 	bl	8004924 <RCCEx_PLL2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038cc:	e00e      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3324      	adds	r3, #36	; 0x24
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f8d7 	bl	8004a88 <RCCEx_PLL3_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038de:	e005      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
      break;
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80038ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038f2:	4b7c      	ldr	r3, [pc, #496]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	4979      	ldr	r1, [pc, #484]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	650b      	str	r3, [r1, #80]	; 0x50
 8003904:	e001      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d049      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800391a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800391e:	d02e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d828      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003926:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800392a:	d02a      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800392c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003930:	d822      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003936:	d026      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393c:	d81c      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800393e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003942:	d010      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003948:	d816      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01d      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003952:	d111      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f000 ffe2 	bl	8004924 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003964:	e012      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f88b 	bl	8004a88 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003976:	e009      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800398a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d109      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003992:	4b54      	ldr	r3, [pc, #336]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	4951      	ldr	r1, [pc, #324]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	650b      	str	r3, [r1, #80]	; 0x50
 80039a4:	e001      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d04b      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c0:	d02e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80039c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c6:	d828      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d02a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d2:	d822      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d8:	d026      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80039da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039de:	d81c      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039e4:	d010      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ea:	d816      	bhi.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d01d      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80039f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f4:	d111      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 ff91 	bl	8004924 <RCCEx_PLL2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a06:	e012      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3324      	adds	r3, #36	; 0x24
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 f83a 	bl	8004a88 <RCCEx_PLL3_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a18:	e009      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1e:	e006      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a20:	bf00      	nop
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a24:	bf00      	nop
 8003a26:	e002      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a28:	bf00      	nop
 8003a2a:	e000      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a34:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a42:	4928      	ldr	r1, [pc, #160]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	658b      	str	r3, [r1, #88]	; 0x58
 8003a48:	e001      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d02f      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a62:	d00e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a68:	d814      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d10f      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a80:	e00c      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 ff4b 	bl	8004924 <RCCEx_PLL2_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a92:	e003      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
      break;
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003a9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aae:	490d      	ldr	r1, [pc, #52]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ab4:	e001      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab6:	7dfb      	ldrb	r3, [r7, #23]
 8003ab8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d033      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d81c      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003b0f 	.word	0x08003b0f
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af7 	.word	0x08003af7
 8003ae0:	08003b0f 	.word	0x08003b0f
 8003ae4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae8:	4bb8      	ldr	r3, [pc, #736]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	4ab7      	ldr	r2, [pc, #732]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003af4:	e00c      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2102      	movs	r1, #2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 ff11 	bl	8004924 <RCCEx_PLL2_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b06:	e003      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d109      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b16:	4bad      	ldr	r3, [pc, #692]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	49aa      	ldr	r1, [pc, #680]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b28:	e001      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8086 	beq.w	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3c:	4ba4      	ldr	r3, [pc, #656]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4aa3      	ldr	r2, [pc, #652]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b48:	f7fd fc0c 	bl	8001364 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4e:	e009      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b50:	f7fd fc08 	bl	8001364 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d902      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	75fb      	strb	r3, [r7, #23]
        break;
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b64:	4b9a      	ldr	r3, [pc, #616]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d166      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b76:	4b95      	ldr	r3, [pc, #596]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b80:	4053      	eors	r3, r2
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d013      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b8a:	4b90      	ldr	r3, [pc, #576]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b92:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b8d      	ldr	r3, [pc, #564]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a8c      	ldr	r2, [pc, #560]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba0:	4b8a      	ldr	r3, [pc, #552]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a89      	ldr	r2, [pc, #548]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bac:	4a87      	ldr	r2, [pc, #540]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bbc:	d115      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fd fbd1 	bl	8001364 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc4:	e00b      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd fbcd 	bl	8001364 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d902      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	75fb      	strb	r3, [r7, #23]
            break;
 8003bdc:	e005      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bde:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ed      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d126      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c00:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c0e:	0919      	lsrs	r1, r3, #4
 8003c10:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003c12:	400b      	ands	r3, r1
 8003c14:	496d      	ldr	r1, [pc, #436]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	610b      	str	r3, [r1, #16]
 8003c1a:	e005      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c1c:	4b6b      	ldr	r3, [pc, #428]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4a6a      	ldr	r2, [pc, #424]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c26:	6113      	str	r3, [r2, #16]
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c36:	4965      	ldr	r1, [pc, #404]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	670b      	str	r3, [r1, #112]	; 0x70
 8003c3c:	e004      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c3e:	7dfb      	ldrb	r3, [r7, #23]
 8003c40:	75bb      	strb	r3, [r7, #22]
 8003c42:	e001      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d07e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c58:	2b28      	cmp	r3, #40	; 0x28
 8003c5a:	d867      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003d33 	.word	0x08003d33
 8003c68:	08003d2d 	.word	0x08003d2d
 8003c6c:	08003d2d 	.word	0x08003d2d
 8003c70:	08003d2d 	.word	0x08003d2d
 8003c74:	08003d2d 	.word	0x08003d2d
 8003c78:	08003d2d 	.word	0x08003d2d
 8003c7c:	08003d2d 	.word	0x08003d2d
 8003c80:	08003d2d 	.word	0x08003d2d
 8003c84:	08003d09 	.word	0x08003d09
 8003c88:	08003d2d 	.word	0x08003d2d
 8003c8c:	08003d2d 	.word	0x08003d2d
 8003c90:	08003d2d 	.word	0x08003d2d
 8003c94:	08003d2d 	.word	0x08003d2d
 8003c98:	08003d2d 	.word	0x08003d2d
 8003c9c:	08003d2d 	.word	0x08003d2d
 8003ca0:	08003d2d 	.word	0x08003d2d
 8003ca4:	08003d1b 	.word	0x08003d1b
 8003ca8:	08003d2d 	.word	0x08003d2d
 8003cac:	08003d2d 	.word	0x08003d2d
 8003cb0:	08003d2d 	.word	0x08003d2d
 8003cb4:	08003d2d 	.word	0x08003d2d
 8003cb8:	08003d2d 	.word	0x08003d2d
 8003cbc:	08003d2d 	.word	0x08003d2d
 8003cc0:	08003d2d 	.word	0x08003d2d
 8003cc4:	08003d33 	.word	0x08003d33
 8003cc8:	08003d2d 	.word	0x08003d2d
 8003ccc:	08003d2d 	.word	0x08003d2d
 8003cd0:	08003d2d 	.word	0x08003d2d
 8003cd4:	08003d2d 	.word	0x08003d2d
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003d2d 	.word	0x08003d2d
 8003ce0:	08003d2d 	.word	0x08003d2d
 8003ce4:	08003d33 	.word	0x08003d33
 8003ce8:	08003d2d 	.word	0x08003d2d
 8003cec:	08003d2d 	.word	0x08003d2d
 8003cf0:	08003d2d 	.word	0x08003d2d
 8003cf4:	08003d2d 	.word	0x08003d2d
 8003cf8:	08003d2d 	.word	0x08003d2d
 8003cfc:	08003d2d 	.word	0x08003d2d
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d33 	.word	0x08003d33
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fe08 	bl	8004924 <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d18:	e00c      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3324      	adds	r3, #36	; 0x24
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 feb1 	bl	8004a88 <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d2a:	e003      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d46:	4921      	ldr	r1, [pc, #132]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8003d4c:	e001      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d03e      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	d820      	bhi.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003daf 	.word	0x08003daf
 8003d70:	08003d85 	.word	0x08003d85
 8003d74:	08003d97 	.word	0x08003d97
 8003d78:	08003daf 	.word	0x08003daf
 8003d7c:	08003daf 	.word	0x08003daf
 8003d80:	08003daf 	.word	0x08003daf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fdca 	bl	8004924 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d94:	e00c      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3324      	adds	r3, #36	; 0x24
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fe73 	bl	8004a88 <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003da6:	e003      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dac:	e000      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d110      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f023 0207 	bic.w	r2, r3, #7
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	4902      	ldr	r1, [pc, #8]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	654b      	str	r3, [r1, #84]	; 0x54
 8003dc8:	e008      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003dca:	bf00      	nop
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	58024800 	.word	0x58024800
 8003dd4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d039      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d820      	bhi.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e3b 	.word	0x08003e3b
 8003dfc:	08003e11 	.word	0x08003e11
 8003e00:	08003e23 	.word	0x08003e23
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	2101      	movs	r1, #1
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fd84 	bl	8004924 <RCCEx_PLL2_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e20:	e00c      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3324      	adds	r3, #36	; 0x24
 8003e26:	2101      	movs	r1, #1
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fe2d 	bl	8004a88 <RCCEx_PLL3_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	75fb      	strb	r3, [r7, #23]
      break;
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e42:	4bb7      	ldr	r3, [pc, #732]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	49b3      	ldr	r1, [pc, #716]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	658b      	str	r3, [r1, #88]	; 0x58
 8003e56:	e001      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04b      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e72:	d02e      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e78:	d828      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7e:	d02a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d822      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e8a:	d026      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e90:	d81c      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e96:	d010      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9c:	d816      	bhi.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01d      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea6:	d111      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fd38 	bl	8004924 <RCCEx_PLL2_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eb8:	e012      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3324      	adds	r3, #36	; 0x24
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fde1 	bl	8004a88 <RCCEx_PLL3_Config>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003eca:	e009      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed0:	e006      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ee6:	4b8e      	ldr	r3, [pc, #568]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	498a      	ldr	r1, [pc, #552]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	654b      	str	r3, [r1, #84]	; 0x54
 8003efa:	e001      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d04b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f16:	d02e      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003f18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f1c:	d828      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f22:	d02a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f28:	d822      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f2e:	d026      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f34:	d81c      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f40:	d816      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01d      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d111      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fce6 	bl	8004924 <RCCEx_PLL2_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f5c:	e012      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	3324      	adds	r3, #36	; 0x24
 8003f62:	2102      	movs	r1, #2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fd8f 	bl	8004a88 <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f6e:	e009      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	75fb      	strb	r3, [r7, #23]
      break;
 8003f74:	e006      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f76:	bf00      	nop
 8003f78:	e004      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f98:	4961      	ldr	r1, [pc, #388]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f9e:	e001      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	7dfb      	ldrb	r3, [r7, #23]
 8003fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d04b      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fba:	d02e      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003fbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fc0:	d828      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc6:	d02a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003fc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fcc:	d822      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fd2:	d026      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fd8:	d81c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fde:	d010      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe4:	d816      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01d      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d111      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fc94 	bl	8004924 <RCCEx_PLL2_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004000:	e012      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	2102      	movs	r1, #2
 8004008:	4618      	mov	r0, r3
 800400a:	f000 fd3d 	bl	8004a88 <RCCEx_PLL3_Config>
 800400e:	4603      	mov	r3, r0
 8004010:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004012:	e009      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800401a:	bf00      	nop
 800401c:	e004      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403c:	4938      	ldr	r1, [pc, #224]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800403e:	4313      	orrs	r3, r2
 8004040:	658b      	str	r3, [r1, #88]	; 0x58
 8004042:	e001      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d10a      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3324      	adds	r3, #36	; 0x24
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd0e 	bl	8004a88 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004084:	4926      	ldr	r1, [pc, #152]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004086:	4313      	orrs	r3, r2
 8004088:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a0:	d10a      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3324      	adds	r3, #36	; 0x24
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fced 	bl	8004a88 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c6:	4916      	ldr	r1, [pc, #88]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d036      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e2:	d01f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80040e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e8:	d817      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d009      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80040f4:	e011      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fc11 	bl	8004924 <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004106:	e00e      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	2102      	movs	r1, #2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fcba 	bl	8004a88 <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004118:	e005      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004120:	58024400 	.word	0x58024400
      break;
 8004124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800412c:	4b93      	ldr	r3, [pc, #588]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800413a:	4990      	ldr	r1, [pc, #576]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800413c:	4313      	orrs	r3, r2
 800413e:	658b      	str	r3, [r1, #88]	; 0x58
 8004140:	e001      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d033      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004158:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800415c:	d01c      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800415e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004162:	d816      	bhi.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004168:	d003      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800416a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800416e:	d007      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004170:	e00f      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004172:	4b82      	ldr	r3, [pc, #520]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	4a81      	ldr	r2, [pc, #516]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800417e:	e00c      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3324      	adds	r3, #36	; 0x24
 8004184:	2101      	movs	r1, #1
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fc7e 	bl	8004a88 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004190:	e003      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
      break;
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419a:	7dfb      	ldrb	r3, [r7, #23]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041a0:	4b76      	ldr	r3, [pc, #472]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ae:	4973      	ldr	r1, [pc, #460]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	654b      	str	r3, [r1, #84]	; 0x54
 80041b4:	e001      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d029      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d007      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80041d4:	e00f      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d6:	4b69      	ldr	r3, [pc, #420]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4a68      	ldr	r2, [pc, #416]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041e2:	e00b      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fb9a 	bl	8004924 <RCCEx_PLL2_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
      break;
 80041fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004202:	4b5e      	ldr	r3, [pc, #376]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	495b      	ldr	r1, [pc, #364]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004214:	e001      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fc2b 	bl	8004a88 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d030      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004250:	d017      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004256:	d811      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425c:	d013      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800425e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004262:	d80b      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426c:	d106      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800426e:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	4a42      	ldr	r2, [pc, #264]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800427a:	e007      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e004      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800428a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004292:	4b3a      	ldr	r3, [pc, #232]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800429e:	4937      	ldr	r1, [pc, #220]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	654b      	str	r3, [r1, #84]	; 0x54
 80042a4:	e001      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	492e      	ldr	r1, [pc, #184]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042e2:	4926      	ldr	r1, [pc, #152]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004300:	491e      	ldr	r1, [pc, #120]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004312:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	4a19      	ldr	r2, [pc, #100]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004318:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800431c:	6113      	str	r3, [r2, #16]
 800431e:	4b17      	ldr	r3, [pc, #92]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004328:	4914      	ldr	r1, [pc, #80]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	da08      	bge.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004354:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	4906      	ldr	r1, [pc, #24]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004368:	7dbb      	ldrb	r3, [r7, #22]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	58024400 	.word	0x58024400

08004380 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004384:	f7ff f81e 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4904      	ldr	r1, [pc, #16]	; (80043a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	58024400 	.word	0x58024400
 80043a8:	08007f64 	.word	0x08007f64

080043ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b089      	sub	sp, #36	; 0x24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043b4:	4ba1      	ldr	r3, [pc, #644]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80043be:	4b9f      	ldr	r3, [pc, #636]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	0b1b      	lsrs	r3, r3, #12
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80043ca:	4b9c      	ldr	r3, [pc, #624]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80043d6:	4b99      	ldr	r3, [pc, #612]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	08db      	lsrs	r3, r3, #3
 80043dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8111 	beq.w	800461c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	f000 8083 	beq.w	8004508 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b02      	cmp	r3, #2
 8004406:	f200 80a1 	bhi.w	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d056      	beq.n	80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004416:	e099      	b.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004418:	4b88      	ldr	r3, [pc, #544]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d02d      	beq.n	8004480 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004424:	4b85      	ldr	r3, [pc, #532]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	08db      	lsrs	r3, r3, #3
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	4a84      	ldr	r2, [pc, #528]	; (8004640 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	ee07 3a90 	vmov	s15, r3
 800443c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	ee07 3a90 	vmov	s15, r3
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800444e:	4b7b      	ldr	r3, [pc, #492]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800445e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004462:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800446a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800446e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800447a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800447e:	e087      	b.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004648 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800448e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004492:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044c2:	e065      	b.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800464c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d6:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004506:	e043      	b.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004512:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b48      	ldr	r3, [pc, #288]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800454a:	e021      	b.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800464c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004572:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800458e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004590:	4b2a      	ldr	r3, [pc, #168]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	0a5b      	lsrs	r3, r3, #9
 8004596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b6:	ee17 2a90 	vmov	r2, s15
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80045be:	4b1f      	ldr	r3, [pc, #124]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	0c1b      	lsrs	r3, r3, #16
 80045c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c8:	ee07 3a90 	vmov	s15, r3
 80045cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e4:	ee17 2a90 	vmov	r2, s15
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80045ec:	4b13      	ldr	r3, [pc, #76]	; (800463c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004606:	edd7 6a07 	vldr	s13, [r7, #28]
 800460a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004612:	ee17 2a90 	vmov	r2, s15
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800461a:	e008      	b.n	800462e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	609a      	str	r2, [r3, #8]
}
 800462e:	bf00      	nop
 8004630:	3724      	adds	r7, #36	; 0x24
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	58024400 	.word	0x58024400
 8004640:	03d09000 	.word	0x03d09000
 8004644:	46000000 	.word	0x46000000
 8004648:	4c742400 	.word	0x4c742400
 800464c:	4a742400 	.word	0x4a742400
 8004650:	4af42400 	.word	0x4af42400

08004654 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800465c:	4ba1      	ldr	r3, [pc, #644]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004666:	4b9f      	ldr	r3, [pc, #636]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	0d1b      	lsrs	r3, r3, #20
 800466c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004670:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004672:	4b9c      	ldr	r3, [pc, #624]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800467e:	4b99      	ldr	r3, [pc, #612]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	08db      	lsrs	r3, r3, #3
 8004684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8111 	beq.w	80048c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f000 8083 	beq.w	80047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	f200 80a1 	bhi.w	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d056      	beq.n	800476c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80046be:	e099      	b.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c0:	4b88      	ldr	r3, [pc, #544]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02d      	beq.n	8004728 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046cc:	4b85      	ldr	r3, [pc, #532]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	08db      	lsrs	r3, r3, #3
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	4a84      	ldr	r2, [pc, #528]	; (80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004726:	e087      	b.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a03 	vldr	s12, [r7, #12]
 800474e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800476a:	e065      	b.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ae:	e043      	b.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f2:	e021      	b.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b37      	ldr	r3, [pc, #220]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004836:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004838:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	0a5b      	lsrs	r3, r3, #9
 800483e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800484e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004852:	edd7 6a07 	vldr	s13, [r7, #28]
 8004856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485e:	ee17 2a90 	vmov	r2, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800487c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004880:	edd7 6a07 	vldr	s13, [r7, #28]
 8004884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488c:	ee17 2a90 	vmov	r2, s15
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ba:	ee17 2a90 	vmov	r2, s15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
}
 80048d6:	bf00      	nop
 80048d8:	3724      	adds	r7, #36	; 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	03d09000 	.word	0x03d09000
 80048ec:	46000000 	.word	0x46000000
 80048f0:	4c742400 	.word	0x4c742400
 80048f4:	4a742400 	.word	0x4a742400
 80048f8:	4af42400 	.word	0x4af42400

080048fc <HAL_RCCEx_EnableBootCore>:
  * @note   This bit can be set by software but is cleared by hardware after a system reset or STANDBY
  *
  * @retval None
  */
void HAL_RCCEx_EnableBootCore(uint32_t RCC_BootCx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_BOOT_CORE(RCC_BootCx));
  SET_BIT(RCC->GCR, RCC_BootCx) ;
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <HAL_RCCEx_EnableBootCore+0x24>)
 8004906:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800490a:	4905      	ldr	r1, [pc, #20]	; (8004920 <HAL_RCCEx_EnableBootCore+0x24>)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	58024400 	.word	0x58024400

08004924 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004932:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b03      	cmp	r3, #3
 800493c:	d101      	bne.n	8004942 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e099      	b.n	8004a76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004942:	4b4f      	ldr	r3, [pc, #316]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4e      	ldr	r2, [pc, #312]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004948:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fc fd09 	bl	8001364 <HAL_GetTick>
 8004952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004954:	e008      	b.n	8004968 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004956:	f7fc fd05 	bl	8001364 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e086      	b.n	8004a76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004968:	4b45      	ldr	r3, [pc, #276]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004974:	4b42      	ldr	r3, [pc, #264]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	493f      	ldr	r1, [pc, #252]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	628b      	str	r3, [r1, #40]	; 0x28
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	3b01      	subs	r3, #1
 800498e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	025b      	lsls	r3, r3, #9
 800499a:	b29b      	uxth	r3, r3
 800499c:	431a      	orrs	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	061b      	lsls	r3, r3, #24
 80049b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049b8:	4931      	ldr	r1, [pc, #196]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80049be:	4b30      	ldr	r3, [pc, #192]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	492d      	ldr	r1, [pc, #180]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80049d0:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f023 0220 	bic.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	4928      	ldr	r1, [pc, #160]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80049e2:	4b27      	ldr	r3, [pc, #156]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f2:	4b24      	ldr	r3, [pc, #144]	; (8004a84 <RCCEx_PLL2_Config+0x160>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	69d2      	ldr	r2, [r2, #28]
 80049fa:	00d2      	lsls	r2, r2, #3
 80049fc:	4920      	ldr	r1, [pc, #128]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a02:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a08:	f043 0310 	orr.w	r3, r3, #16
 8004a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d106      	bne.n	8004a22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a14:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a20:	e00f      	b.n	8004a42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d106      	bne.n	8004a36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2c:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a34:	e005      	b.n	8004a42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	4a11      	ldr	r2, [pc, #68]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4e:	f7fc fc89 	bl	8001364 <HAL_GetTick>
 8004a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a54:	e008      	b.n	8004a68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a56:	f7fc fc85 	bl	8001364 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e006      	b.n	8004a76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
 8004a84:	ffff0007 	.word	0xffff0007

08004a88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a96:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d101      	bne.n	8004aa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e099      	b.n	8004bda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4e      	ldr	r2, [pc, #312]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fc57 	bl	8001364 <HAL_GetTick>
 8004ab6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ab8:	e008      	b.n	8004acc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004aba:	f7fc fc53 	bl	8001364 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e086      	b.n	8004bda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004acc:	4b45      	ldr	r3, [pc, #276]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f0      	bne.n	8004aba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	051b      	lsls	r3, r3, #20
 8004ae6:	493f      	ldr	r1, [pc, #252]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	628b      	str	r3, [r1, #40]	; 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	025b      	lsls	r3, r3, #9
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b1c:	4931      	ldr	r1, [pc, #196]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b22:	4b30      	ldr	r3, [pc, #192]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	492d      	ldr	r1, [pc, #180]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b34:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	4928      	ldr	r1, [pc, #160]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b46:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <RCCEx_PLL3_Config+0x160>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	69d2      	ldr	r2, [r2, #28]
 8004b5e:	00d2      	lsls	r2, r2, #3
 8004b60:	4920      	ldr	r1, [pc, #128]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004b66:	4b1f      	ldr	r3, [pc, #124]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b84:	e00f      	b.n	8004ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004b8c:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b98:	e005      	b.n	8004ba6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb2:	f7fc fbd7 	bl	8001364 <HAL_GetTick>
 8004bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bb8:	e008      	b.n	8004bcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004bba:	f7fc fbd3 	bl	8001364 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e006      	b.n	8004bda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <RCCEx_PLL3_Config+0x15c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d0f0      	beq.n	8004bba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	58024400 	.word	0x58024400
 8004be8:	ffff0007 	.word	0xffff0007

08004bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e049      	b.n	8004c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f841 	bl	8004c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4610      	mov	r0, r2
 8004c2c:	f000 f9f8 	bl	8005020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d001      	beq.n	8004cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e04f      	b.n	8004d68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a23      	ldr	r2, [pc, #140]	; (8004d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01d      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x76>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d018      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x76>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x76>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00e      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x76>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d009      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x76>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d004      	beq.n	8004d26 <HAL_TIM_Base_Start_IT+0x76>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a19      	ldr	r2, [pc, #100]	; (8004d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d115      	bne.n	8004d52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d015      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0xb4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3e:	d011      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d50:	e008      	b.n	8004d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e000      	b.n	8004d66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40001800 	.word	0x40001800
 8004d8c:	00010007 	.word	0x00010007

08004d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d122      	bne.n	8004dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d11b      	bne.n	8004dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f06f 0202 	mvn.w	r2, #2
 8004dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f905 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004dd8:	e005      	b.n	8004de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8f7 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f908 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b04      	cmp	r3, #4
 8004df8:	d122      	bne.n	8004e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d11b      	bne.n	8004e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0204 	mvn.w	r2, #4
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2202      	movs	r2, #2
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f8db 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8cd 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f8de 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0208 	mvn.w	r2, #8
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2204      	movs	r2, #4
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8b1 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8a3 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f8b4 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0210 	mvn.w	r2, #16
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f887 	bl	8004fe2 <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f879 	bl	8004fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f88a 	bl	8004ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0201 	mvn.w	r2, #1
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fb ff3a 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d10e      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d107      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f914 	bl	8005168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4e:	d10e      	bne.n	8004f6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	2b80      	cmp	r3, #128	; 0x80
 8004f5c:	d107      	bne.n	8004f6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f907 	bl	800517c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d10e      	bne.n	8004f9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	d107      	bne.n	8004f9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f838 	bl	800500a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d10e      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d107      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f06f 0220 	mvn.w	r2, #32
 8004fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f8c7 	bl	8005154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a40      	ldr	r2, [pc, #256]	; (8005134 <TIM_Base_SetConfig+0x114>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d013      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d00f      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a3d      	ldr	r2, [pc, #244]	; (8005138 <TIM_Base_SetConfig+0x118>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00b      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a3c      	ldr	r2, [pc, #240]	; (800513c <TIM_Base_SetConfig+0x11c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d007      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a3b      	ldr	r2, [pc, #236]	; (8005140 <TIM_Base_SetConfig+0x120>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d003      	beq.n	8005060 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a3a      	ldr	r2, [pc, #232]	; (8005144 <TIM_Base_SetConfig+0x124>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d108      	bne.n	8005072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a2f      	ldr	r2, [pc, #188]	; (8005134 <TIM_Base_SetConfig+0x114>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01f      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005080:	d01b      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a2c      	ldr	r2, [pc, #176]	; (8005138 <TIM_Base_SetConfig+0x118>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d017      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a2b      	ldr	r2, [pc, #172]	; (800513c <TIM_Base_SetConfig+0x11c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <TIM_Base_SetConfig+0x120>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d00f      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <TIM_Base_SetConfig+0x124>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00b      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a28      	ldr	r2, [pc, #160]	; (8005148 <TIM_Base_SetConfig+0x128>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d007      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a27      	ldr	r2, [pc, #156]	; (800514c <TIM_Base_SetConfig+0x12c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d003      	beq.n	80050ba <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <TIM_Base_SetConfig+0x130>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d108      	bne.n	80050cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <TIM_Base_SetConfig+0x114>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0xf8>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a12      	ldr	r2, [pc, #72]	; (8005144 <TIM_Base_SetConfig+0x124>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0xf8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a11      	ldr	r2, [pc, #68]	; (8005148 <TIM_Base_SetConfig+0x128>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0xf8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a10      	ldr	r2, [pc, #64]	; (800514c <TIM_Base_SetConfig+0x12c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0xf8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <TIM_Base_SetConfig+0x130>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d103      	bne.n	8005120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	615a      	str	r2, [r3, #20]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40000400 	.word	0x40000400
 800513c:	40000800 	.word	0x40000800
 8005140:	40000c00 	.word	0x40000c00
 8005144:	40010400 	.word	0x40010400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800

08005154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e042      	b.n	8005228 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7fb feeb 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f82c 	bl	8005230 <UART_SetConfig>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e022      	b.n	8005228 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fd80 	bl	8005cf0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800520e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fe07 	bl	8005e34 <UART_CheckIdleState>
 8005226:	4603      	mov	r3, r0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005230:	b5b0      	push	{r4, r5, r7, lr}
 8005232:	b08e      	sub	sp, #56	; 0x38
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	431a      	orrs	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	4313      	orrs	r3, r2
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4bbf      	ldr	r3, [pc, #764]	; (800555c <UART_SetConfig+0x32c>)
 800525e:	4013      	ands	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005266:	430b      	orrs	r3, r1
 8005268:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4ab5      	ldr	r2, [pc, #724]	; (8005560 <UART_SetConfig+0x330>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005296:	4313      	orrs	r3, r2
 8005298:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4bb0      	ldr	r3, [pc, #704]	; (8005564 <UART_SetConfig+0x334>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052aa:	430b      	orrs	r3, r1
 80052ac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f023 010f 	bic.w	r1, r3, #15
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4aa7      	ldr	r2, [pc, #668]	; (8005568 <UART_SetConfig+0x338>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d176      	bne.n	80053bc <UART_SetConfig+0x18c>
 80052ce:	4ba7      	ldr	r3, [pc, #668]	; (800556c <UART_SetConfig+0x33c>)
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d6:	2b28      	cmp	r3, #40	; 0x28
 80052d8:	d86c      	bhi.n	80053b4 <UART_SetConfig+0x184>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0xb0>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005385 	.word	0x08005385
 80052e4:	080053b5 	.word	0x080053b5
 80052e8:	080053b5 	.word	0x080053b5
 80052ec:	080053b5 	.word	0x080053b5
 80052f0:	080053b5 	.word	0x080053b5
 80052f4:	080053b5 	.word	0x080053b5
 80052f8:	080053b5 	.word	0x080053b5
 80052fc:	080053b5 	.word	0x080053b5
 8005300:	0800538d 	.word	0x0800538d
 8005304:	080053b5 	.word	0x080053b5
 8005308:	080053b5 	.word	0x080053b5
 800530c:	080053b5 	.word	0x080053b5
 8005310:	080053b5 	.word	0x080053b5
 8005314:	080053b5 	.word	0x080053b5
 8005318:	080053b5 	.word	0x080053b5
 800531c:	080053b5 	.word	0x080053b5
 8005320:	08005395 	.word	0x08005395
 8005324:	080053b5 	.word	0x080053b5
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053b5 	.word	0x080053b5
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080053b5 	.word	0x080053b5
 8005338:	080053b5 	.word	0x080053b5
 800533c:	080053b5 	.word	0x080053b5
 8005340:	0800539d 	.word	0x0800539d
 8005344:	080053b5 	.word	0x080053b5
 8005348:	080053b5 	.word	0x080053b5
 800534c:	080053b5 	.word	0x080053b5
 8005350:	080053b5 	.word	0x080053b5
 8005354:	080053b5 	.word	0x080053b5
 8005358:	080053b5 	.word	0x080053b5
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053b5 	.word	0x080053b5
 8005368:	080053b5 	.word	0x080053b5
 800536c:	080053b5 	.word	0x080053b5
 8005370:	080053b5 	.word	0x080053b5
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053b5 	.word	0x080053b5
 800537c:	080053b5 	.word	0x080053b5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538a:	e222      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e21e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e21a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e216      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80053a4:	2320      	movs	r3, #32
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e212      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80053ac:	2340      	movs	r3, #64	; 0x40
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e20e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e20a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a6b      	ldr	r2, [pc, #428]	; (8005570 <UART_SetConfig+0x340>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d130      	bne.n	8005428 <UART_SetConfig+0x1f8>
 80053c6:	4b69      	ldr	r3, [pc, #420]	; (800556c <UART_SetConfig+0x33c>)
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d826      	bhi.n	8005420 <UART_SetConfig+0x1f0>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x1a8>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e1ec      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80053f8:	2304      	movs	r3, #4
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e1e8      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005406:	e1e4      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005408:	2310      	movs	r3, #16
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540e:	e1e0      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005410:	2320      	movs	r3, #32
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005416:	e1dc      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541e:	e1d8      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005426:	e1d4      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a51      	ldr	r2, [pc, #324]	; (8005574 <UART_SetConfig+0x344>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d130      	bne.n	8005494 <UART_SetConfig+0x264>
 8005432:	4b4e      	ldr	r3, [pc, #312]	; (800556c <UART_SetConfig+0x33c>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b05      	cmp	r3, #5
 800543c:	d826      	bhi.n	800548c <UART_SetConfig+0x25c>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x214>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	0800545d 	.word	0x0800545d
 8005448:	08005465 	.word	0x08005465
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005462:	e1b6      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546a:	e1b2      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005472:	e1ae      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547a:	e1aa      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800547c:	2320      	movs	r3, #32
 800547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005482:	e1a6      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548a:	e1a2      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005492:	e19e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a37      	ldr	r2, [pc, #220]	; (8005578 <UART_SetConfig+0x348>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d130      	bne.n	8005500 <UART_SetConfig+0x2d0>
 800549e:	4b33      	ldr	r3, [pc, #204]	; (800556c <UART_SetConfig+0x33c>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d826      	bhi.n	80054f8 <UART_SetConfig+0x2c8>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x280>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054d9 	.word	0x080054d9
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e180      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d6:	e17c      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054de:	e178      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e6:	e174      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80054e8:	2320      	movs	r3, #32
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ee:	e170      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80054f0:	2340      	movs	r3, #64	; 0x40
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e16c      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	e168      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1d      	ldr	r2, [pc, #116]	; (800557c <UART_SetConfig+0x34c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d142      	bne.n	8005590 <UART_SetConfig+0x360>
 800550a:	4b18      	ldr	r3, [pc, #96]	; (800556c <UART_SetConfig+0x33c>)
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	2b05      	cmp	r3, #5
 8005514:	d838      	bhi.n	8005588 <UART_SetConfig+0x358>
 8005516:	a201      	add	r2, pc, #4	; (adr r2, 800551c <UART_SetConfig+0x2ec>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005535 	.word	0x08005535
 8005520:	0800553d 	.word	0x0800553d
 8005524:	08005545 	.word	0x08005545
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005555 	.word	0x08005555
 8005530:	08005581 	.word	0x08005581
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553a:	e14a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800553c:	2304      	movs	r3, #4
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e146      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005544:	2308      	movs	r3, #8
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e142      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800554c:	2310      	movs	r3, #16
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005552:	e13e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005554:	2320      	movs	r3, #32
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555a:	e13a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800555c:	cfff69f3 	.word	0xcfff69f3
 8005560:	58000c00 	.word	0x58000c00
 8005564:	11fff4ff 	.word	0x11fff4ff
 8005568:	40011000 	.word	0x40011000
 800556c:	58024400 	.word	0x58024400
 8005570:	40004400 	.word	0x40004400
 8005574:	40004800 	.word	0x40004800
 8005578:	40004c00 	.word	0x40004c00
 800557c:	40005000 	.word	0x40005000
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e124      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	e120      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4acc      	ldr	r2, [pc, #816]	; (80058c8 <UART_SetConfig+0x698>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d176      	bne.n	8005688 <UART_SetConfig+0x458>
 800559a:	4bcc      	ldr	r3, [pc, #816]	; (80058cc <UART_SetConfig+0x69c>)
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055a2:	2b28      	cmp	r3, #40	; 0x28
 80055a4:	d86c      	bhi.n	8005680 <UART_SetConfig+0x450>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0x37c>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	08005651 	.word	0x08005651
 80055b0:	08005681 	.word	0x08005681
 80055b4:	08005681 	.word	0x08005681
 80055b8:	08005681 	.word	0x08005681
 80055bc:	08005681 	.word	0x08005681
 80055c0:	08005681 	.word	0x08005681
 80055c4:	08005681 	.word	0x08005681
 80055c8:	08005681 	.word	0x08005681
 80055cc:	08005659 	.word	0x08005659
 80055d0:	08005681 	.word	0x08005681
 80055d4:	08005681 	.word	0x08005681
 80055d8:	08005681 	.word	0x08005681
 80055dc:	08005681 	.word	0x08005681
 80055e0:	08005681 	.word	0x08005681
 80055e4:	08005681 	.word	0x08005681
 80055e8:	08005681 	.word	0x08005681
 80055ec:	08005661 	.word	0x08005661
 80055f0:	08005681 	.word	0x08005681
 80055f4:	08005681 	.word	0x08005681
 80055f8:	08005681 	.word	0x08005681
 80055fc:	08005681 	.word	0x08005681
 8005600:	08005681 	.word	0x08005681
 8005604:	08005681 	.word	0x08005681
 8005608:	08005681 	.word	0x08005681
 800560c:	08005669 	.word	0x08005669
 8005610:	08005681 	.word	0x08005681
 8005614:	08005681 	.word	0x08005681
 8005618:	08005681 	.word	0x08005681
 800561c:	08005681 	.word	0x08005681
 8005620:	08005681 	.word	0x08005681
 8005624:	08005681 	.word	0x08005681
 8005628:	08005681 	.word	0x08005681
 800562c:	08005671 	.word	0x08005671
 8005630:	08005681 	.word	0x08005681
 8005634:	08005681 	.word	0x08005681
 8005638:	08005681 	.word	0x08005681
 800563c:	08005681 	.word	0x08005681
 8005640:	08005681 	.word	0x08005681
 8005644:	08005681 	.word	0x08005681
 8005648:	08005681 	.word	0x08005681
 800564c:	08005679 	.word	0x08005679
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005656:	e0bc      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005658:	2304      	movs	r3, #4
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e0b8      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005660:	2308      	movs	r3, #8
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e0b4      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005668:	2310      	movs	r3, #16
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e0b0      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005670:	2320      	movs	r3, #32
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e0ac      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567e:	e0a8      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005686:	e0a4      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a90      	ldr	r2, [pc, #576]	; (80058d0 <UART_SetConfig+0x6a0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d130      	bne.n	80056f4 <UART_SetConfig+0x4c4>
 8005692:	4b8e      	ldr	r3, [pc, #568]	; (80058cc <UART_SetConfig+0x69c>)
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b05      	cmp	r3, #5
 800569c:	d826      	bhi.n	80056ec <UART_SetConfig+0x4bc>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0x474>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056bd 	.word	0x080056bd
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056cd 	.word	0x080056cd
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c2:	e086      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ca:	e082      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056d2:	e07e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056da:	e07a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056dc:	2320      	movs	r3, #32
 80056de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056e2:	e076      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056e4:	2340      	movs	r3, #64	; 0x40
 80056e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ea:	e072      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f2:	e06e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a76      	ldr	r2, [pc, #472]	; (80058d4 <UART_SetConfig+0x6a4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d130      	bne.n	8005760 <UART_SetConfig+0x530>
 80056fe:	4b73      	ldr	r3, [pc, #460]	; (80058cc <UART_SetConfig+0x69c>)
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b05      	cmp	r3, #5
 8005708:	d826      	bhi.n	8005758 <UART_SetConfig+0x528>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x4e0>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005729 	.word	0x08005729
 8005714:	08005731 	.word	0x08005731
 8005718:	08005739 	.word	0x08005739
 800571c:	08005741 	.word	0x08005741
 8005720:	08005749 	.word	0x08005749
 8005724:	08005751 	.word	0x08005751
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572e:	e050      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005736:	e04c      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e048      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005746:	e044      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005748:	2320      	movs	r3, #32
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574e:	e040      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005756:	e03c      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575e:	e038      	b.n	80057d2 <UART_SetConfig+0x5a2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a5c      	ldr	r2, [pc, #368]	; (80058d8 <UART_SetConfig+0x6a8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d130      	bne.n	80057cc <UART_SetConfig+0x59c>
 800576a:	4b58      	ldr	r3, [pc, #352]	; (80058cc <UART_SetConfig+0x69c>)
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	2b05      	cmp	r3, #5
 8005774:	d826      	bhi.n	80057c4 <UART_SetConfig+0x594>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0x54c>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	08005795 	.word	0x08005795
 8005780:	0800579d 	.word	0x0800579d
 8005784:	080057a5 	.word	0x080057a5
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	2302      	movs	r3, #2
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e01a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e016      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057aa:	e012      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b2:	e00e      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80057b4:	2320      	movs	r3, #32
 80057b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ba:	e00a      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c2:	e006      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ca:	e002      	b.n	80057d2 <UART_SetConfig+0x5a2>
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a40      	ldr	r2, [pc, #256]	; (80058d8 <UART_SetConfig+0x6a8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	f040 80ef 	bne.w	80059bc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	dc46      	bgt.n	8005874 <UART_SetConfig+0x644>
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f2c0 8081 	blt.w	80058ee <UART_SetConfig+0x6be>
 80057ec:	3b02      	subs	r3, #2
 80057ee:	2b1e      	cmp	r3, #30
 80057f0:	d87d      	bhi.n	80058ee <UART_SetConfig+0x6be>
 80057f2:	a201      	add	r2, pc, #4	; (adr r2, 80057f8 <UART_SetConfig+0x5c8>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	0800587b 	.word	0x0800587b
 80057fc:	080058ef 	.word	0x080058ef
 8005800:	08005883 	.word	0x08005883
 8005804:	080058ef 	.word	0x080058ef
 8005808:	080058ef 	.word	0x080058ef
 800580c:	080058ef 	.word	0x080058ef
 8005810:	08005893 	.word	0x08005893
 8005814:	080058ef 	.word	0x080058ef
 8005818:	080058ef 	.word	0x080058ef
 800581c:	080058ef 	.word	0x080058ef
 8005820:	080058ef 	.word	0x080058ef
 8005824:	080058ef 	.word	0x080058ef
 8005828:	080058ef 	.word	0x080058ef
 800582c:	080058ef 	.word	0x080058ef
 8005830:	080058a3 	.word	0x080058a3
 8005834:	080058ef 	.word	0x080058ef
 8005838:	080058ef 	.word	0x080058ef
 800583c:	080058ef 	.word	0x080058ef
 8005840:	080058ef 	.word	0x080058ef
 8005844:	080058ef 	.word	0x080058ef
 8005848:	080058ef 	.word	0x080058ef
 800584c:	080058ef 	.word	0x080058ef
 8005850:	080058ef 	.word	0x080058ef
 8005854:	080058ef 	.word	0x080058ef
 8005858:	080058ef 	.word	0x080058ef
 800585c:	080058ef 	.word	0x080058ef
 8005860:	080058ef 	.word	0x080058ef
 8005864:	080058ef 	.word	0x080058ef
 8005868:	080058ef 	.word	0x080058ef
 800586c:	080058ef 	.word	0x080058ef
 8005870:	080058e1 	.word	0x080058e1
 8005874:	2b40      	cmp	r3, #64	; 0x40
 8005876:	d036      	beq.n	80058e6 <UART_SetConfig+0x6b6>
 8005878:	e039      	b.n	80058ee <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800587a:	f7fe fd81 	bl	8004380 <HAL_RCCEx_GetD3PCLK1Freq>
 800587e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005880:	e03b      	b.n	80058fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005882:	f107 0314 	add.w	r3, r7, #20
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe fd90 	bl	80043ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005890:	e033      	b.n	80058fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005892:	f107 0308 	add.w	r3, r7, #8
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fedc 	bl	8004654 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058a0:	e02b      	b.n	80058fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a2:	4b0a      	ldr	r3, [pc, #40]	; (80058cc <UART_SetConfig+0x69c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <UART_SetConfig+0x69c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	08db      	lsrs	r3, r3, #3
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	4a08      	ldr	r2, [pc, #32]	; (80058dc <UART_SetConfig+0x6ac>)
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058c0:	e01b      	b.n	80058fa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80058c2:	4b06      	ldr	r3, [pc, #24]	; (80058dc <UART_SetConfig+0x6ac>)
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058c6:	e018      	b.n	80058fa <UART_SetConfig+0x6ca>
 80058c8:	40011400 	.word	0x40011400
 80058cc:	58024400 	.word	0x58024400
 80058d0:	40007800 	.word	0x40007800
 80058d4:	40007c00 	.word	0x40007c00
 80058d8:	58000c00 	.word	0x58000c00
 80058dc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058e0:	4bc4      	ldr	r3, [pc, #784]	; (8005bf4 <UART_SetConfig+0x9c4>)
 80058e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058e4:	e009      	b.n	80058fa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ec:	e005      	b.n	80058fa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80058f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 81da 	beq.w	8005cb6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	4abc      	ldr	r2, [pc, #752]	; (8005bf8 <UART_SetConfig+0x9c8>)
 8005908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800590c:	461a      	mov	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	fbb3 f3f2 	udiv	r3, r3, r2
 8005914:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	4613      	mov	r3, r2
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4413      	add	r3, r2
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	429a      	cmp	r2, r3
 8005924:	d305      	bcc.n	8005932 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	429a      	cmp	r2, r3
 8005930:	d903      	bls.n	800593a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005938:	e1bd      	b.n	8005cb6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	4618      	mov	r0, r3
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005946:	4aac      	ldr	r2, [pc, #688]	; (8005bf8 <UART_SetConfig+0x9c8>)
 8005948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594c:	b29a      	uxth	r2, r3
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f7fa fcc5 	bl	80002e0 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4610      	mov	r0, r2
 800595c:	4619      	mov	r1, r3
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	020b      	lsls	r3, r1, #8
 8005968:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800596c:	0202      	lsls	r2, r0, #8
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	6849      	ldr	r1, [r1, #4]
 8005972:	0849      	lsrs	r1, r1, #1
 8005974:	4608      	mov	r0, r1
 8005976:	f04f 0100 	mov.w	r1, #0
 800597a:	1814      	adds	r4, r2, r0
 800597c:	eb43 0501 	adc.w	r5, r3, r1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	461a      	mov	r2, r3
 8005986:	f04f 0300 	mov.w	r3, #0
 800598a:	4620      	mov	r0, r4
 800598c:	4629      	mov	r1, r5
 800598e:	f7fa fca7 	bl	80002e0 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4613      	mov	r3, r2
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a0:	d308      	bcc.n	80059b4 <UART_SetConfig+0x784>
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059a8:	d204      	bcs.n	80059b4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e180      	b.n	8005cb6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80059ba:	e17c      	b.n	8005cb6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c4:	f040 80bf 	bne.w	8005b46 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80059c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	dc49      	bgt.n	8005a64 <UART_SetConfig+0x834>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	db7c      	blt.n	8005ace <UART_SetConfig+0x89e>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d87a      	bhi.n	8005ace <UART_SetConfig+0x89e>
 80059d8:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x7b0>)
 80059da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059de:	bf00      	nop
 80059e0:	08005a6b 	.word	0x08005a6b
 80059e4:	08005a73 	.word	0x08005a73
 80059e8:	08005acf 	.word	0x08005acf
 80059ec:	08005acf 	.word	0x08005acf
 80059f0:	08005a7b 	.word	0x08005a7b
 80059f4:	08005acf 	.word	0x08005acf
 80059f8:	08005acf 	.word	0x08005acf
 80059fc:	08005acf 	.word	0x08005acf
 8005a00:	08005a8b 	.word	0x08005a8b
 8005a04:	08005acf 	.word	0x08005acf
 8005a08:	08005acf 	.word	0x08005acf
 8005a0c:	08005acf 	.word	0x08005acf
 8005a10:	08005acf 	.word	0x08005acf
 8005a14:	08005acf 	.word	0x08005acf
 8005a18:	08005acf 	.word	0x08005acf
 8005a1c:	08005acf 	.word	0x08005acf
 8005a20:	08005a9b 	.word	0x08005a9b
 8005a24:	08005acf 	.word	0x08005acf
 8005a28:	08005acf 	.word	0x08005acf
 8005a2c:	08005acf 	.word	0x08005acf
 8005a30:	08005acf 	.word	0x08005acf
 8005a34:	08005acf 	.word	0x08005acf
 8005a38:	08005acf 	.word	0x08005acf
 8005a3c:	08005acf 	.word	0x08005acf
 8005a40:	08005acf 	.word	0x08005acf
 8005a44:	08005acf 	.word	0x08005acf
 8005a48:	08005acf 	.word	0x08005acf
 8005a4c:	08005acf 	.word	0x08005acf
 8005a50:	08005acf 	.word	0x08005acf
 8005a54:	08005acf 	.word	0x08005acf
 8005a58:	08005acf 	.word	0x08005acf
 8005a5c:	08005acf 	.word	0x08005acf
 8005a60:	08005ac1 	.word	0x08005ac1
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d02e      	beq.n	8005ac6 <UART_SetConfig+0x896>
 8005a68:	e031      	b.n	8005ace <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a6a:	f7fd fcdb 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8005a6e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a70:	e033      	b.n	8005ada <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a72:	f7fd fced 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 8005a76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005a78:	e02f      	b.n	8005ada <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a7a:	f107 0314 	add.w	r3, r7, #20
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fc94 	bl	80043ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a88:	e027      	b.n	8005ada <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fde0 	bl	8004654 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005a98:	e01f      	b.n	8005ada <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a9a:	4b58      	ldr	r3, [pc, #352]	; (8005bfc <UART_SetConfig+0x9cc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005aa6:	4b55      	ldr	r3, [pc, #340]	; (8005bfc <UART_SetConfig+0x9cc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	4a53      	ldr	r2, [pc, #332]	; (8005c00 <UART_SetConfig+0x9d0>)
 8005ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ab8:	e00f      	b.n	8005ada <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005aba:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <UART_SetConfig+0x9d0>)
 8005abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005abe:	e00c      	b.n	8005ada <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ac0:	4b4c      	ldr	r3, [pc, #304]	; (8005bf4 <UART_SetConfig+0x9c4>)
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 80ea 	beq.w	8005cb6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	4a44      	ldr	r2, [pc, #272]	; (8005bf8 <UART_SetConfig+0x9c8>)
 8005ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af4:	005a      	lsls	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b0f      	cmp	r3, #15
 8005b0e:	d916      	bls.n	8005b3e <UART_SetConfig+0x90e>
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b16:	d212      	bcs.n	8005b3e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f023 030f 	bic.w	r3, r3, #15
 8005b20:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b30:	4313      	orrs	r3, r2
 8005b32:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005b3a:	60da      	str	r2, [r3, #12]
 8005b3c:	e0bb      	b.n	8005cb6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b44:	e0b7      	b.n	8005cb6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	dc4a      	bgt.n	8005be4 <UART_SetConfig+0x9b4>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f2c0 8086 	blt.w	8005c60 <UART_SetConfig+0xa30>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	f200 8083 	bhi.w	8005c60 <UART_SetConfig+0xa30>
 8005b5a:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <UART_SetConfig+0x930>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005beb 	.word	0x08005beb
 8005b64:	08005c05 	.word	0x08005c05
 8005b68:	08005c61 	.word	0x08005c61
 8005b6c:	08005c61 	.word	0x08005c61
 8005b70:	08005c0d 	.word	0x08005c0d
 8005b74:	08005c61 	.word	0x08005c61
 8005b78:	08005c61 	.word	0x08005c61
 8005b7c:	08005c61 	.word	0x08005c61
 8005b80:	08005c1d 	.word	0x08005c1d
 8005b84:	08005c61 	.word	0x08005c61
 8005b88:	08005c61 	.word	0x08005c61
 8005b8c:	08005c61 	.word	0x08005c61
 8005b90:	08005c61 	.word	0x08005c61
 8005b94:	08005c61 	.word	0x08005c61
 8005b98:	08005c61 	.word	0x08005c61
 8005b9c:	08005c61 	.word	0x08005c61
 8005ba0:	08005c2d 	.word	0x08005c2d
 8005ba4:	08005c61 	.word	0x08005c61
 8005ba8:	08005c61 	.word	0x08005c61
 8005bac:	08005c61 	.word	0x08005c61
 8005bb0:	08005c61 	.word	0x08005c61
 8005bb4:	08005c61 	.word	0x08005c61
 8005bb8:	08005c61 	.word	0x08005c61
 8005bbc:	08005c61 	.word	0x08005c61
 8005bc0:	08005c61 	.word	0x08005c61
 8005bc4:	08005c61 	.word	0x08005c61
 8005bc8:	08005c61 	.word	0x08005c61
 8005bcc:	08005c61 	.word	0x08005c61
 8005bd0:	08005c61 	.word	0x08005c61
 8005bd4:	08005c61 	.word	0x08005c61
 8005bd8:	08005c61 	.word	0x08005c61
 8005bdc:	08005c61 	.word	0x08005c61
 8005be0:	08005c53 	.word	0x08005c53
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d037      	beq.n	8005c58 <UART_SetConfig+0xa28>
 8005be8:	e03a      	b.n	8005c60 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bea:	f7fd fc1b 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8005bee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005bf0:	e03c      	b.n	8005c6c <UART_SetConfig+0xa3c>
 8005bf2:	bf00      	nop
 8005bf4:	003d0900 	.word	0x003d0900
 8005bf8:	08007f74 	.word	0x08007f74
 8005bfc:	58024400 	.word	0x58024400
 8005c00:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c04:	f7fd fc24 	bl	8003450 <HAL_RCC_GetPCLK2Freq>
 8005c08:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c0a:	e02f      	b.n	8005c6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0c:	f107 0314 	add.w	r3, r7, #20
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe fbcb 	bl	80043ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c1a:	e027      	b.n	8005c6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fd17 	bl	8004654 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c2a:	e01f      	b.n	8005c6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c2c:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <UART_SetConfig+0xab0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d009      	beq.n	8005c4c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c38:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <UART_SetConfig+0xab0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	f003 0303 	and.w	r3, r3, #3
 8005c42:	4a28      	ldr	r2, [pc, #160]	; (8005ce4 <UART_SetConfig+0xab4>)
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c4a:	e00f      	b.n	8005c6c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <UART_SetConfig+0xab4>)
 8005c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c50:	e00c      	b.n	8005c6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c52:	4b25      	ldr	r3, [pc, #148]	; (8005ce8 <UART_SetConfig+0xab8>)
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c56:	e009      	b.n	8005c6c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c5e:	e005      	b.n	8005c6c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d021      	beq.n	8005cb6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	4a1d      	ldr	r2, [pc, #116]	; (8005cec <UART_SetConfig+0xabc>)
 8005c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	085b      	lsrs	r3, r3, #1
 8005c8a:	441a      	add	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	d908      	bls.n	8005cb0 <UART_SetConfig+0xa80>
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca4:	d204      	bcs.n	8005cb0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cac:	60da      	str	r2, [r3, #12]
 8005cae:	e002      	b.n	8005cb6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005cd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3738      	adds	r7, #56	; 0x38
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	58024400 	.word	0x58024400
 8005ce4:	03d09000 	.word	0x03d09000
 8005ce8:	003d0900 	.word	0x003d0900
 8005cec:	08007f74 	.word	0x08007f74

08005cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00a      	beq.n	8005d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00a      	beq.n	8005da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01a      	beq.n	8005e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dee:	d10a      	bne.n	8005e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e44:	f7fb fa8e 	bl	8001364 <HAL_GetTick>
 8005e48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d10e      	bne.n	8005e76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f82f 	bl	8005eca <UART_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e025      	b.n	8005ec2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d10e      	bne.n	8005ea2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f819 	bl	8005eca <UART_WaitOnFlagUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e00f      	b.n	8005ec2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eda:	e062      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d05e      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee4:	f7fb fa3e 	bl	8001364 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d302      	bcc.n	8005efa <UART_WaitOnFlagUntilTimeout+0x30>
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d11d      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e045      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02e      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f52:	d126      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e00f      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d08d      	beq.n	8005edc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b085      	sub	sp, #20
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e027      	b.n	8006030 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2224      	movs	r2, #36	; 0x24
 8005fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800600e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006050:	2302      	movs	r3, #2
 8006052:	e02d      	b.n	80060b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	; 0x24
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f84f 	bl	8006134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2220      	movs	r2, #32
 80060a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e02d      	b.n	800612c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	; 0x24
 80060dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f811 	bl	8006134 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006140:	2b00      	cmp	r3, #0
 8006142:	d108      	bne.n	8006156 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006154:	e031      	b.n	80061ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006156:	2310      	movs	r3, #16
 8006158:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800615a:	2310      	movs	r3, #16
 800615c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	0e5b      	lsrs	r3, r3, #25
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	0f5b      	lsrs	r3, r3, #29
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	7b3a      	ldrb	r2, [r7, #12]
 8006182:	4911      	ldr	r1, [pc, #68]	; (80061c8 <UARTEx_SetNbDataToProcess+0x94>)
 8006184:	5c8a      	ldrb	r2, [r1, r2]
 8006186:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800618a:	7b3a      	ldrb	r2, [r7, #12]
 800618c:	490f      	ldr	r1, [pc, #60]	; (80061cc <UARTEx_SetNbDataToProcess+0x98>)
 800618e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006190:	fb93 f3f2 	sdiv	r3, r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800619c:	7bfb      	ldrb	r3, [r7, #15]
 800619e:	7b7a      	ldrb	r2, [r7, #13]
 80061a0:	4909      	ldr	r1, [pc, #36]	; (80061c8 <UARTEx_SetNbDataToProcess+0x94>)
 80061a2:	5c8a      	ldrb	r2, [r1, r2]
 80061a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061a8:	7b7a      	ldrb	r2, [r7, #13]
 80061aa:	4908      	ldr	r1, [pc, #32]	; (80061cc <UARTEx_SetNbDataToProcess+0x98>)
 80061ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	08007f8c 	.word	0x08007f8c
 80061cc:	08007f94 	.word	0x08007f94

080061d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061d0:	b084      	sub	sp, #16
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	f107 001c 	add.w	r0, r7, #28
 80061de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d120      	bne.n	800622a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	4b2a      	ldr	r3, [pc, #168]	; (80062a4 <USB_CoreInit+0xd4>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800620c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d105      	bne.n	800621e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa60 	bl	80066e4 <USB_CoreReset>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	e01a      	b.n	8006260 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa54 	bl	80066e4 <USB_CoreReset>
 800623c:	4603      	mov	r3, r0
 800623e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
 8006252:	e005      	b.n	8006260 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b01      	cmp	r3, #1
 8006264:	d116      	bne.n	8006294 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <USB_CoreInit+0xd8>)
 8006276:	4313      	orrs	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f043 0206 	orr.w	r2, r3, #6
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a0:	b004      	add	sp, #16
 80062a2:	4770      	bx	lr
 80062a4:	ffbdffbf 	.word	0xffbdffbf
 80062a8:	03ee0000 	.word	0x03ee0000

080062ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f023 0201 	bic.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d106      	bne.n	80062fa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	e00b      	b.n	8006312 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
 800630c:	e001      	b.n	8006312 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e003      	b.n	800631a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006312:	2032      	movs	r0, #50	; 0x32
 8006314:	f7fb f832 	bl	800137c <HAL_Delay>

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006324:	b084      	sub	sp, #16
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006336:	2300      	movs	r3, #0
 8006338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800633e:	2300      	movs	r3, #0
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	e009      	b.n	8006358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	3340      	adds	r3, #64	; 0x40
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	2200      	movs	r2, #0
 8006350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3301      	adds	r3, #1
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	2b0e      	cmp	r3, #14
 800635c:	d9f2      	bls.n	8006344 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800635e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11c      	bne.n	800639e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006372:	f043 0302 	orr.w	r3, r3, #2
 8006376:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	e005      	b.n	80063aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063b0:	461a      	mov	r2, r3
 80063b2:	2300      	movs	r3, #0
 80063b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063bc:	4619      	mov	r1, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	461a      	mov	r2, r3
 80063c6:	680b      	ldr	r3, [r1, #0]
 80063c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d10c      	bne.n	80063ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80063d6:	2100      	movs	r1, #0
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f949 	bl	8006670 <USB_SetDevSpeed>
 80063de:	e008      	b.n	80063f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80063e0:	2101      	movs	r1, #1
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f944 	bl	8006670 <USB_SetDevSpeed>
 80063e8:	e003      	b.n	80063f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80063ea:	2103      	movs	r1, #3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f93f 	bl	8006670 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063f2:	2110      	movs	r1, #16
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f8f3 	bl	80065e0 <USB_FlushTxFifo>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f911 	bl	800662c <USB_FlushRxFifo>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	461a      	mov	r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	461a      	mov	r2, r3
 8006434:	2300      	movs	r3, #0
 8006436:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006438:	2300      	movs	r3, #0
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e043      	b.n	80064c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006454:	d118      	bne.n	8006488 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e013      	b.n	800649a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647e:	461a      	mov	r2, r3
 8006480:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e008      	b.n	800649a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006494:	461a      	mov	r2, r3
 8006496:	2300      	movs	r3, #0
 8006498:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	461a      	mov	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	461a      	mov	r2, r3
 80064ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	3301      	adds	r3, #1
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d3b7      	bcc.n	800643e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e043      	b.n	800655c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ea:	d118      	bne.n	800651e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	461a      	mov	r2, r3
 8006500:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e013      	b.n	8006530 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006514:	461a      	mov	r2, r3
 8006516:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e008      	b.n	8006530 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	461a      	mov	r2, r3
 800652c:	2300      	movs	r3, #0
 800652e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653c:	461a      	mov	r2, r3
 800653e:	2300      	movs	r3, #0
 8006540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	461a      	mov	r2, r3
 8006550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3301      	adds	r3, #1
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	429a      	cmp	r2, r3
 8006562:	d3b7      	bcc.n	80064d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006572:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006576:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006584:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	f043 0210 	orr.w	r2, r3, #16
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <USB_DevInit+0x2b4>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f043 0208 	orr.w	r2, r3, #8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d105      	bne.n	80065c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699a      	ldr	r2, [r3, #24]
 80065c0:	4b06      	ldr	r3, [pc, #24]	; (80065dc <USB_DevInit+0x2b8>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065d4:	b004      	add	sp, #16
 80065d6:	4770      	bx	lr
 80065d8:	803c3800 	.word	0x803c3800
 80065dc:	40000004 	.word	0x40000004

080065e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <USB_FlushTxFifo+0x48>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b20      	cmp	r3, #32
 8006616:	d0f0      	beq.n	80065fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	00030d40 	.word	0x00030d40

0800662c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2210      	movs	r2, #16
 800663c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a09      	ldr	r2, [pc, #36]	; (800666c <USB_FlushRxFifo+0x40>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e006      	b.n	800665e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b10      	cmp	r3, #16
 800665a:	d0f0      	beq.n	800663e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	00030d40 	.word	0x00030d40

08006670 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	78fb      	ldrb	r3, [r7, #3]
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006690:	4313      	orrs	r3, r2
 8006692:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <USB_CoreReset+0x64>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e01b      	b.n	800673a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	daf2      	bge.n	80066f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f043 0201 	orr.w	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4a09      	ldr	r2, [pc, #36]	; (8006748 <USB_CoreReset+0x64>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d901      	bls.n	800672c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e006      	b.n	800673a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b01      	cmp	r3, #1
 8006736:	d0f0      	beq.n	800671a <USB_CoreReset+0x36>

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	00030d40 	.word	0x00030d40

0800674c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800675a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800675e:	2b84      	cmp	r3, #132	; 0x84
 8006760:	d005      	beq.n	800676e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006762:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4413      	add	r3, r2
 800676a:	3303      	adds	r3, #3
 800676c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006780:	f000 feda 	bl	8007538 <vTaskStartScheduler>
  
  return osOK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	bd80      	pop	{r7, pc}

0800678a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800678a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678c:	b089      	sub	sp, #36	; 0x24
 800678e:	af04      	add	r7, sp, #16
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <osThreadCreate+0x54>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01c      	beq.n	80067de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685c      	ldr	r4, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681d      	ldr	r5, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691e      	ldr	r6, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ffc8 	bl	800674c <makeFreeRtosPriority>
 80067bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067c6:	9202      	str	r2, [sp, #8]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	9100      	str	r1, [sp, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	4632      	mov	r2, r6
 80067d0:	4629      	mov	r1, r5
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 fce8 	bl	80071a8 <xTaskCreateStatic>
 80067d8:	4603      	mov	r3, r0
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e01c      	b.n	8006818 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685c      	ldr	r4, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067ea:	b29e      	uxth	r6, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7ff ffaa 	bl	800674c <makeFreeRtosPriority>
 80067f8:	4602      	mov	r2, r0
 80067fa:	f107 030c 	add.w	r3, r7, #12
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	9200      	str	r2, [sp, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	4632      	mov	r2, r6
 8006806:	4629      	mov	r1, r5
 8006808:	4620      	mov	r0, r4
 800680a:	f000 fd2a 	bl	8007262 <xTaskCreate>
 800680e:	4603      	mov	r3, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	d001      	beq.n	8006818 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	e000      	b.n	800681a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006818:	68fb      	ldr	r3, [r7, #12]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006822 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <osDelay+0x16>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	e000      	b.n	800683a <osDelay+0x18>
 8006838:	2301      	movs	r3, #1
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fe48 	bl	80074d0 <vTaskDelay>
  
  return osOK;
 8006840:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006858:	f000 fece 	bl	80075f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800685c:	4b5b      	ldr	r3, [pc, #364]	; (80069cc <pvPortMalloc+0x180>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006864:	f000 f920 	bl	8006aa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006868:	4b59      	ldr	r3, [pc, #356]	; (80069d0 <pvPortMalloc+0x184>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4013      	ands	r3, r2
 8006870:	2b00      	cmp	r3, #0
 8006872:	f040 8093 	bne.w	800699c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01d      	beq.n	80068b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800687c:	2208      	movs	r2, #8
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d014      	beq.n	80068b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f023 0307 	bic.w	r3, r3, #7
 8006894:	3308      	adds	r3, #8
 8006896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d06e      	beq.n	800699c <pvPortMalloc+0x150>
 80068be:	4b45      	ldr	r3, [pc, #276]	; (80069d4 <pvPortMalloc+0x188>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d869      	bhi.n	800699c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068c8:	4b43      	ldr	r3, [pc, #268]	; (80069d8 <pvPortMalloc+0x18c>)
 80068ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068cc:	4b42      	ldr	r3, [pc, #264]	; (80069d8 <pvPortMalloc+0x18c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068d2:	e004      	b.n	80068de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d903      	bls.n	80068f0 <pvPortMalloc+0xa4>
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f1      	bne.n	80068d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068f0:	4b36      	ldr	r3, [pc, #216]	; (80069cc <pvPortMalloc+0x180>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d050      	beq.n	800699c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2208      	movs	r2, #8
 8006900:	4413      	add	r3, r2
 8006902:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	2308      	movs	r3, #8
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	429a      	cmp	r2, r3
 800691a:	d91f      	bls.n	800695c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800691c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <pvPortMalloc+0xf8>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	613b      	str	r3, [r7, #16]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	f000 f908 	bl	8006b6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800695c:	4b1d      	ldr	r3, [pc, #116]	; (80069d4 <pvPortMalloc+0x188>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <pvPortMalloc+0x188>)
 8006968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800696a:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <pvPortMalloc+0x188>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <pvPortMalloc+0x190>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d203      	bcs.n	800697e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006976:	4b17      	ldr	r3, [pc, #92]	; (80069d4 <pvPortMalloc+0x188>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	; (80069dc <pvPortMalloc+0x190>)
 800697c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4b13      	ldr	r3, [pc, #76]	; (80069d0 <pvPortMalloc+0x184>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	431a      	orrs	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006992:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <pvPortMalloc+0x194>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <pvPortMalloc+0x194>)
 800699a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800699c:	f000 fe3a 	bl	8007614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <pvPortMalloc+0x174>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60fb      	str	r3, [r7, #12]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <pvPortMalloc+0x172>
	return pvReturn;
 80069c0:	69fb      	ldr	r3, [r7, #28]
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3728      	adds	r7, #40	; 0x28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	24003f5c 	.word	0x24003f5c
 80069d0:	24003f70 	.word	0x24003f70
 80069d4:	24003f60 	.word	0x24003f60
 80069d8:	24003f54 	.word	0x24003f54
 80069dc:	24003f64 	.word	0x24003f64
 80069e0:	24003f68 	.word	0x24003f68

080069e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b086      	sub	sp, #24
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04d      	beq.n	8006a92 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069f6:	2308      	movs	r3, #8
 80069f8:	425b      	negs	r3, r3
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	4b24      	ldr	r3, [pc, #144]	; (8006a9c <vPortFree+0xb8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <vPortFree+0x44>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	60fb      	str	r3, [r7, #12]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <vPortFree+0x62>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60bb      	str	r3, [r7, #8]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <vPortFree+0xb8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01e      	beq.n	8006a92 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11a      	bne.n	8006a92 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <vPortFree+0xb8>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	401a      	ands	r2, r3
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a6c:	f000 fdc4 	bl	80075f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <vPortFree+0xbc>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4413      	add	r3, r2
 8006a7a:	4a09      	ldr	r2, [pc, #36]	; (8006aa0 <vPortFree+0xbc>)
 8006a7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a7e:	6938      	ldr	r0, [r7, #16]
 8006a80:	f000 f874 	bl	8006b6c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <vPortFree+0xc0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vPortFree+0xc0>)
 8006a8c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a8e:	f000 fdc1 	bl	8007614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a92:	bf00      	nop
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	24003f70 	.word	0x24003f70
 8006aa0:	24003f60 	.word	0x24003f60
 8006aa4:	24003f6c 	.word	0x24003f6c

08006aa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ab2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ab4:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <prvHeapInit+0xac>)
 8006ab6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3307      	adds	r3, #7
 8006ac6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <prvHeapInit+0xac>)
 8006ad8:	4413      	add	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ae0:	4a1d      	ldr	r2, [pc, #116]	; (8006b58 <prvHeapInit+0xb0>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	; (8006b58 <prvHeapInit+0xb0>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4413      	add	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006af4:	2208      	movs	r2, #8
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0307 	bic.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <prvHeapInit+0xb4>)
 8006b08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b0a:	4b14      	ldr	r3, [pc, #80]	; (8006b5c <prvHeapInit+0xb4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b12:	4b12      	ldr	r3, [pc, #72]	; (8006b5c <prvHeapInit+0xb4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <prvHeapInit+0xb4>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	4a0a      	ldr	r2, [pc, #40]	; (8006b60 <prvHeapInit+0xb8>)
 8006b36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4a09      	ldr	r2, [pc, #36]	; (8006b64 <prvHeapInit+0xbc>)
 8006b3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b40:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <prvHeapInit+0xc0>)
 8006b42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b46:	601a      	str	r2, [r3, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	24000354 	.word	0x24000354
 8006b58:	24003f54 	.word	0x24003f54
 8006b5c:	24003f5c 	.word	0x24003f5c
 8006b60:	24003f64 	.word	0x24003f64
 8006b64:	24003f60 	.word	0x24003f60
 8006b68:	24003f70 	.word	0x24003f70

08006b6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b74:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <prvInsertBlockIntoFreeList+0xac>)
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e002      	b.n	8006b80 <prvInsertBlockIntoFreeList+0x14>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d8f7      	bhi.n	8006b7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d108      	bne.n	8006bae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d118      	bne.n	8006bf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d00d      	beq.n	8006bea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	e008      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <prvInsertBlockIntoFreeList+0xb0>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e003      	b.n	8006bfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d002      	beq.n	8006c0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	24003f54 	.word	0x24003f54
 8006c1c:	24003f5c 	.word	0x24003f5c

08006c20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f103 0208 	add.w	r2, r3, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f103 0208 	add.w	r2, r3, #8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f103 0208 	add.w	r2, r3, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b085      	sub	sp, #20
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	601a      	str	r2, [r3, #0]
}
 8006cb6:	bf00      	nop
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd8:	d103      	bne.n	8006ce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	60fb      	str	r3, [r7, #12]
 8006ce0:	e00c      	b.n	8006cfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e002      	b.n	8006cf0 <vListInsert+0x2e>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d2f6      	bcs.n	8006cea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6892      	ldr	r2, [r2, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6852      	ldr	r2, [r2, #4]
 8006d54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d103      	bne.n	8006d68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689a      	ldr	r2, [r3, #8]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	1e5a      	subs	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3b04      	subs	r3, #4
 8006d98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3b04      	subs	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f023 0201 	bic.w	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3b04      	subs	r3, #4
 8006db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006db8:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <pxPortInitialiseStack+0x64>)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b14      	subs	r3, #20
 8006dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3b04      	subs	r3, #4
 8006dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f06f 0202 	mvn.w	r2, #2
 8006dd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3b20      	subs	r3, #32
 8006ddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	08006df1 	.word	0x08006df1

08006df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <prvTaskExitError+0x54>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e02:	d00a      	beq.n	8006e1a <prvTaskExitError+0x2a>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <prvTaskExitError+0x28>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	60bb      	str	r3, [r7, #8]
}
 8006e2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e2e:	bf00      	nop
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0fc      	beq.n	8006e30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	24000018 	.word	0x24000018
	...

08006e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <pxCurrentTCBConst2>)
 8006e52:	6819      	ldr	r1, [r3, #0]
 8006e54:	6808      	ldr	r0, [r1, #0]
 8006e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5a:	f380 8809 	msr	PSP, r0
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f04f 0000 	mov.w	r0, #0
 8006e66:	f380 8811 	msr	BASEPRI, r0
 8006e6a:	4770      	bx	lr
 8006e6c:	f3af 8000 	nop.w

08006e70 <pxCurrentTCBConst2>:
 8006e70:	24003f7c 	.word	0x24003f7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e74:	bf00      	nop
 8006e76:	bf00      	nop

08006e78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e78:	4808      	ldr	r0, [pc, #32]	; (8006e9c <prvPortStartFirstTask+0x24>)
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	6800      	ldr	r0, [r0, #0]
 8006e7e:	f380 8808 	msr	MSP, r0
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8814 	msr	CONTROL, r0
 8006e8a:	b662      	cpsie	i
 8006e8c:	b661      	cpsie	f
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	df00      	svc	0
 8006e98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e9a:	bf00      	nop
 8006e9c:	e000ed08 	.word	0xe000ed08

08006ea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ea6:	4b46      	ldr	r3, [pc, #280]	; (8006fc0 <xPortStartScheduler+0x120>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a46      	ldr	r2, [pc, #280]	; (8006fc4 <xPortStartScheduler+0x124>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d10a      	bne.n	8006ec6 <xPortStartScheduler+0x26>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	613b      	str	r3, [r7, #16]
}
 8006ec2:	bf00      	nop
 8006ec4:	e7fe      	b.n	8006ec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ec6:	4b3e      	ldr	r3, [pc, #248]	; (8006fc0 <xPortStartScheduler+0x120>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a3f      	ldr	r2, [pc, #252]	; (8006fc8 <xPortStartScheduler+0x128>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10a      	bne.n	8006ee6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60fb      	str	r3, [r7, #12]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ee6:	4b39      	ldr	r3, [pc, #228]	; (8006fcc <xPortStartScheduler+0x12c>)
 8006ee8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	22ff      	movs	r2, #255	; 0xff
 8006ef6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4b31      	ldr	r3, [pc, #196]	; (8006fd0 <xPortStartScheduler+0x130>)
 8006f0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f0e:	4b31      	ldr	r3, [pc, #196]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f10:	2207      	movs	r2, #7
 8006f12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f14:	e009      	b.n	8006f2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f16:	4b2f      	ldr	r3, [pc, #188]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4a2d      	ldr	r2, [pc, #180]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	005b      	lsls	r3, r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d0ef      	beq.n	8006f16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f36:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f1c3 0307 	rsb	r3, r3, #7
 8006f3e:	2b04      	cmp	r3, #4
 8006f40:	d00a      	beq.n	8006f58 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60bb      	str	r3, [r7, #8]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f58:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	4a1d      	ldr	r2, [pc, #116]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f62:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f6a:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <xPortStartScheduler+0x134>)
 8006f6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <xPortStartScheduler+0x138>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <xPortStartScheduler+0x138>)
 8006f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f82:	4b15      	ldr	r3, [pc, #84]	; (8006fd8 <xPortStartScheduler+0x138>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a14      	ldr	r2, [pc, #80]	; (8006fd8 <xPortStartScheduler+0x138>)
 8006f88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f8e:	f000 f8dd 	bl	800714c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f92:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <xPortStartScheduler+0x13c>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f98:	f000 f8fc 	bl	8007194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f9c:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <xPortStartScheduler+0x140>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0f      	ldr	r2, [pc, #60]	; (8006fe0 <xPortStartScheduler+0x140>)
 8006fa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fa8:	f7ff ff66 	bl	8006e78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fac:	f000 fc86 	bl	80078bc <vTaskSwitchContext>
	prvTaskExitError();
 8006fb0:	f7ff ff1e 	bl	8006df0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	e000ed00 	.word	0xe000ed00
 8006fc4:	410fc271 	.word	0x410fc271
 8006fc8:	410fc270 	.word	0x410fc270
 8006fcc:	e000e400 	.word	0xe000e400
 8006fd0:	24003f74 	.word	0x24003f74
 8006fd4:	24003f78 	.word	0x24003f78
 8006fd8:	e000ed20 	.word	0xe000ed20
 8006fdc:	24000018 	.word	0x24000018
 8006fe0:	e000ef34 	.word	0xe000ef34

08006fe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	607b      	str	r3, [r7, #4]
}
 8006ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ffe:	4b0f      	ldr	r3, [pc, #60]	; (800703c <vPortEnterCritical+0x58>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a0d      	ldr	r2, [pc, #52]	; (800703c <vPortEnterCritical+0x58>)
 8007006:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007008:	4b0c      	ldr	r3, [pc, #48]	; (800703c <vPortEnterCritical+0x58>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10f      	bne.n	8007030 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <vPortEnterCritical+0x5c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <vPortEnterCritical+0x4c>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	603b      	str	r3, [r7, #0]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <vPortEnterCritical+0x4a>
	}
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	24000018 	.word	0x24000018
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800704a:	4b12      	ldr	r3, [pc, #72]	; (8007094 <vPortExitCritical+0x50>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <vPortExitCritical+0x24>
	__asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	607b      	str	r3, [r7, #4]
}
 8007064:	bf00      	nop
 8007066:	e7fe      	b.n	8007066 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007068:	4b0a      	ldr	r3, [pc, #40]	; (8007094 <vPortExitCritical+0x50>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3b01      	subs	r3, #1
 800706e:	4a09      	ldr	r2, [pc, #36]	; (8007094 <vPortExitCritical+0x50>)
 8007070:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <vPortExitCritical+0x50>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <vPortExitCritical+0x42>
 800707a:	2300      	movs	r3, #0
 800707c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007084:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	24000018 	.word	0x24000018
	...

080070a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070a0:	f3ef 8009 	mrs	r0, PSP
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	4b15      	ldr	r3, [pc, #84]	; (8007100 <pxCurrentTCBConst>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	f01e 0f10 	tst.w	lr, #16
 80070b0:	bf08      	it	eq
 80070b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	6010      	str	r0, [r2, #0]
 80070bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070c4:	f380 8811 	msr	BASEPRI, r0
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f000 fbf4 	bl	80078bc <vTaskSwitchContext>
 80070d4:	f04f 0000 	mov.w	r0, #0
 80070d8:	f380 8811 	msr	BASEPRI, r0
 80070dc:	bc09      	pop	{r0, r3}
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	6808      	ldr	r0, [r1, #0]
 80070e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e6:	f01e 0f10 	tst.w	lr, #16
 80070ea:	bf08      	it	eq
 80070ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070f0:	f380 8809 	msr	PSP, r0
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	f3af 8000 	nop.w

08007100 <pxCurrentTCBConst>:
 8007100:	24003f7c 	.word	0x24003f7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007122:	f000 fb13 	bl	800774c <xTaskIncrementTick>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800712c:	4b06      	ldr	r3, [pc, #24]	; (8007148 <SysTick_Handler+0x40>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f383 8811 	msr	BASEPRI, r3
}
 800713e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	e000ed04 	.word	0xe000ed04

0800714c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <vPortSetupTimerInterrupt+0x34>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <vPortSetupTimerInterrupt+0x38>)
 8007158:	2200      	movs	r2, #0
 800715a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800715c:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <vPortSetupTimerInterrupt+0x3c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <vPortSetupTimerInterrupt+0x40>)
 8007162:	fba2 2303 	umull	r2, r3, r2, r3
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <vPortSetupTimerInterrupt+0x44>)
 800716a:	3b01      	subs	r3, #1
 800716c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800716e:	4b04      	ldr	r3, [pc, #16]	; (8007180 <vPortSetupTimerInterrupt+0x34>)
 8007170:	2207      	movs	r2, #7
 8007172:	601a      	str	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e000e010 	.word	0xe000e010
 8007184:	e000e018 	.word	0xe000e018
 8007188:	24000000 	.word	0x24000000
 800718c:	10624dd3 	.word	0x10624dd3
 8007190:	e000e014 	.word	0xe000e014

08007194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007194:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071a4 <vPortEnableVFP+0x10>
 8007198:	6801      	ldr	r1, [r0, #0]
 800719a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800719e:	6001      	str	r1, [r0, #0]
 80071a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071a2:	bf00      	nop
 80071a4:	e000ed88 	.word	0xe000ed88

080071a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08e      	sub	sp, #56	; 0x38
 80071ac:	af04      	add	r7, sp, #16
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	623b      	str	r3, [r7, #32]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xTaskCreateStatic+0x46>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	61fb      	str	r3, [r7, #28]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071ee:	2354      	movs	r3, #84	; 0x54
 80071f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	2b54      	cmp	r3, #84	; 0x54
 80071f6:	d00a      	beq.n	800720e <xTaskCreateStatic+0x66>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	61bb      	str	r3, [r7, #24]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800720e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01e      	beq.n	8007254 <xTaskCreateStatic+0xac>
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01b      	beq.n	8007254 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007224:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	2202      	movs	r2, #2
 800722a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800722e:	2300      	movs	r3, #0
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f850 	bl	80072ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800724c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800724e:	f000 f8d5 	bl	80073fc <prvAddNewTaskToReadyList>
 8007252:	e001      	b.n	8007258 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007254:	2300      	movs	r3, #0
 8007256:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007258:	697b      	ldr	r3, [r7, #20]
	}
 800725a:	4618      	mov	r0, r3
 800725c:	3728      	adds	r7, #40	; 0x28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007262:	b580      	push	{r7, lr}
 8007264:	b08c      	sub	sp, #48	; 0x30
 8007266:	af04      	add	r7, sp, #16
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	603b      	str	r3, [r7, #0]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fae8 	bl	800684c <pvPortMalloc>
 800727c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00e      	beq.n	80072a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007284:	2054      	movs	r0, #84	; 0x54
 8007286:	f7ff fae1 	bl	800684c <pvPortMalloc>
 800728a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
 8007298:	e005      	b.n	80072a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f7ff fba2 	bl	80069e4 <vPortFree>
 80072a0:	e001      	b.n	80072a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d017      	beq.n	80072dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072b4:	88fa      	ldrh	r2, [r7, #6]
 80072b6:	2300      	movs	r3, #0
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	9302      	str	r3, [sp, #8]
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f80e 	bl	80072ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d0:	69f8      	ldr	r0, [r7, #28]
 80072d2:	f000 f893 	bl	80073fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072d6:	2301      	movs	r3, #1
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e002      	b.n	80072e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072e2:	69bb      	ldr	r3, [r7, #24]
	}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007304:	440b      	add	r3, r1
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	f023 0307 	bic.w	r3, r3, #7
 8007312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <prvInitialiseNewTask+0x48>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	617b      	str	r3, [r7, #20]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01f      	beq.n	800737a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	e012      	b.n	8007366 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	7819      	ldrb	r1, [r3, #0]
 8007348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	3334      	adds	r3, #52	; 0x34
 8007350:	460a      	mov	r2, r1
 8007352:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	3301      	adds	r3, #1
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	2b0f      	cmp	r3, #15
 800736a:	d9e9      	bls.n	8007340 <prvInitialiseNewTask+0x54>
 800736c:	e000      	b.n	8007370 <prvInitialiseNewTask+0x84>
			{
				break;
 800736e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007378:	e003      	b.n	8007382 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	2b06      	cmp	r3, #6
 8007386:	d901      	bls.n	800738c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007388:	2306      	movs	r3, #6
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007390:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007396:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	2200      	movs	r2, #0
 800739c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	3304      	adds	r3, #4
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fc5c 	bl	8006c60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	3318      	adds	r3, #24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fc57 	bl	8006c60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	f1c3 0207 	rsb	r2, r3, #7
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2200      	movs	r2, #0
 80073cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	68f9      	ldr	r1, [r7, #12]
 80073da:	69b8      	ldr	r0, [r7, #24]
 80073dc:	f7ff fcd4 	bl	8006d88 <pxPortInitialiseStack>
 80073e0:	4602      	mov	r2, r0
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f2:	bf00      	nop
 80073f4:	3720      	adds	r7, #32
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007404:	f7ff fdee 	bl	8006fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007408:	4b2a      	ldr	r3, [pc, #168]	; (80074b4 <prvAddNewTaskToReadyList+0xb8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3301      	adds	r3, #1
 800740e:	4a29      	ldr	r2, [pc, #164]	; (80074b4 <prvAddNewTaskToReadyList+0xb8>)
 8007410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007412:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <prvAddNewTaskToReadyList+0xbc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800741a:	4a27      	ldr	r2, [pc, #156]	; (80074b8 <prvAddNewTaskToReadyList+0xbc>)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007420:	4b24      	ldr	r3, [pc, #144]	; (80074b4 <prvAddNewTaskToReadyList+0xb8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d110      	bne.n	800744a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007428:	f000 fabc 	bl	80079a4 <prvInitialiseTaskLists>
 800742c:	e00d      	b.n	800744a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <prvAddNewTaskToReadyList+0xc0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d109      	bne.n	800744a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007436:	4b20      	ldr	r3, [pc, #128]	; (80074b8 <prvAddNewTaskToReadyList+0xbc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	429a      	cmp	r2, r3
 8007442:	d802      	bhi.n	800744a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007444:	4a1c      	ldr	r2, [pc, #112]	; (80074b8 <prvAddNewTaskToReadyList+0xbc>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800744a:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <prvAddNewTaskToReadyList+0xc4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3301      	adds	r3, #1
 8007450:	4a1b      	ldr	r2, [pc, #108]	; (80074c0 <prvAddNewTaskToReadyList+0xc4>)
 8007452:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	2201      	movs	r2, #1
 800745a:	409a      	lsls	r2, r3
 800745c:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <prvAddNewTaskToReadyList+0xc8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4313      	orrs	r3, r2
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <prvAddNewTaskToReadyList+0xc8>)
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <prvAddNewTaskToReadyList+0xcc>)
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	4619      	mov	r1, r3
 800747c:	4610      	mov	r0, r2
 800747e:	f7ff fbfc 	bl	8006c7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007482:	f7ff fddf 	bl	8007044 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007486:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <prvAddNewTaskToReadyList+0xc0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <prvAddNewTaskToReadyList+0xbc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	429a      	cmp	r2, r3
 800749a:	d207      	bcs.n	80074ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800749c:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <prvAddNewTaskToReadyList+0xd0>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	2400407c 	.word	0x2400407c
 80074b8:	24003f7c 	.word	0x24003f7c
 80074bc:	24004088 	.word	0x24004088
 80074c0:	24004098 	.word	0x24004098
 80074c4:	24004084 	.word	0x24004084
 80074c8:	24003f80 	.word	0x24003f80
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <vTaskDelay+0x60>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <vTaskDelay+0x30>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	60bb      	str	r3, [r7, #8]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007500:	f000 f87a 	bl	80075f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb0a 	bl	8007b20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800750c:	f000 f882 	bl	8007614 <xTaskResumeAll>
 8007510:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <vTaskDelay+0x64>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	240040a4 	.word	0x240040a4
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007546:	463a      	mov	r2, r7
 8007548:	1d39      	adds	r1, r7, #4
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4618      	mov	r0, r3
 8007550:	f7f9 f8dc 	bl	800070c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	9202      	str	r2, [sp, #8]
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	2300      	movs	r3, #0
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	460a      	mov	r2, r1
 8007566:	491e      	ldr	r1, [pc, #120]	; (80075e0 <vTaskStartScheduler+0xa8>)
 8007568:	481e      	ldr	r0, [pc, #120]	; (80075e4 <vTaskStartScheduler+0xac>)
 800756a:	f7ff fe1d 	bl	80071a8 <xTaskCreateStatic>
 800756e:	4603      	mov	r3, r0
 8007570:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <vTaskStartScheduler+0xb0>)
 8007572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007574:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <vTaskStartScheduler+0xb0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e001      	b.n	8007586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d116      	bne.n	80075ba <vTaskStartScheduler+0x82>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	613b      	str	r3, [r7, #16]
}
 800759e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075a0:	4b12      	ldr	r3, [pc, #72]	; (80075ec <vTaskStartScheduler+0xb4>)
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <vTaskStartScheduler+0xb8>)
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075ae:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <vTaskStartScheduler+0xbc>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075b4:	f7ff fc74 	bl	8006ea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075b8:	e00e      	b.n	80075d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c0:	d10a      	bne.n	80075d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60fb      	str	r3, [r7, #12]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <vTaskStartScheduler+0x9e>
}
 80075d8:	bf00      	nop
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	08007f5c 	.word	0x08007f5c
 80075e4:	08007975 	.word	0x08007975
 80075e8:	240040a0 	.word	0x240040a0
 80075ec:	2400409c 	.word	0x2400409c
 80075f0:	24004088 	.word	0x24004088
 80075f4:	24004080 	.word	0x24004080

080075f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <vTaskSuspendAll+0x18>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	4a03      	ldr	r2, [pc, #12]	; (8007610 <vTaskSuspendAll+0x18>)
 8007604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007606:	bf00      	nop
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	240040a4 	.word	0x240040a4

08007614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007622:	4b41      	ldr	r3, [pc, #260]	; (8007728 <xTaskResumeAll+0x114>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <xTaskResumeAll+0x2c>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	603b      	str	r3, [r7, #0]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007640:	f7ff fcd0 	bl	8006fe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007644:	4b38      	ldr	r3, [pc, #224]	; (8007728 <xTaskResumeAll+0x114>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3b01      	subs	r3, #1
 800764a:	4a37      	ldr	r2, [pc, #220]	; (8007728 <xTaskResumeAll+0x114>)
 800764c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800764e:	4b36      	ldr	r3, [pc, #216]	; (8007728 <xTaskResumeAll+0x114>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d161      	bne.n	800771a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007656:	4b35      	ldr	r3, [pc, #212]	; (800772c <xTaskResumeAll+0x118>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d05d      	beq.n	800771a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800765e:	e02e      	b.n	80076be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007660:	4b33      	ldr	r3, [pc, #204]	; (8007730 <xTaskResumeAll+0x11c>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3318      	adds	r3, #24
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fb61 	bl	8006d34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3304      	adds	r3, #4
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fb5c 	bl	8006d34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <xTaskResumeAll+0x120>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4313      	orrs	r3, r2
 800768a:	4a2a      	ldr	r2, [pc, #168]	; (8007734 <xTaskResumeAll+0x120>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4a27      	ldr	r2, [pc, #156]	; (8007738 <xTaskResumeAll+0x124>)
 800769c:	441a      	add	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7ff fae8 	bl	8006c7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	4b23      	ldr	r3, [pc, #140]	; (800773c <xTaskResumeAll+0x128>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d302      	bcc.n	80076be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80076b8:	4b21      	ldr	r3, [pc, #132]	; (8007740 <xTaskResumeAll+0x12c>)
 80076ba:	2201      	movs	r2, #1
 80076bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076be:	4b1c      	ldr	r3, [pc, #112]	; (8007730 <xTaskResumeAll+0x11c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1cc      	bne.n	8007660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076cc:	f000 fa08 	bl	8007ae0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076d0:	4b1c      	ldr	r3, [pc, #112]	; (8007744 <xTaskResumeAll+0x130>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d010      	beq.n	80076fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076dc:	f000 f836 	bl	800774c <xTaskIncrementTick>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d002      	beq.n	80076ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076e6:	4b16      	ldr	r3, [pc, #88]	; (8007740 <xTaskResumeAll+0x12c>)
 80076e8:	2201      	movs	r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1f1      	bne.n	80076dc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80076f8:	4b12      	ldr	r3, [pc, #72]	; (8007744 <xTaskResumeAll+0x130>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076fe:	4b10      	ldr	r3, [pc, #64]	; (8007740 <xTaskResumeAll+0x12c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007706:	2301      	movs	r3, #1
 8007708:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800770a:	4b0f      	ldr	r3, [pc, #60]	; (8007748 <xTaskResumeAll+0x134>)
 800770c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800771a:	f7ff fc93 	bl	8007044 <vPortExitCritical>

	return xAlreadyYielded;
 800771e:	68bb      	ldr	r3, [r7, #8]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	240040a4 	.word	0x240040a4
 800772c:	2400407c 	.word	0x2400407c
 8007730:	2400403c 	.word	0x2400403c
 8007734:	24004084 	.word	0x24004084
 8007738:	24003f80 	.word	0x24003f80
 800773c:	24003f7c 	.word	0x24003f7c
 8007740:	24004090 	.word	0x24004090
 8007744:	2400408c 	.word	0x2400408c
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007756:	4b4e      	ldr	r3, [pc, #312]	; (8007890 <xTaskIncrementTick+0x144>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 808e 	bne.w	800787c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007760:	4b4c      	ldr	r3, [pc, #304]	; (8007894 <xTaskIncrementTick+0x148>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007768:	4a4a      	ldr	r2, [pc, #296]	; (8007894 <xTaskIncrementTick+0x148>)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d120      	bne.n	80077b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007774:	4b48      	ldr	r3, [pc, #288]	; (8007898 <xTaskIncrementTick+0x14c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <xTaskIncrementTick+0x48>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	603b      	str	r3, [r7, #0]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <xTaskIncrementTick+0x46>
 8007794:	4b40      	ldr	r3, [pc, #256]	; (8007898 <xTaskIncrementTick+0x14c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	4b40      	ldr	r3, [pc, #256]	; (800789c <xTaskIncrementTick+0x150>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a3e      	ldr	r2, [pc, #248]	; (8007898 <xTaskIncrementTick+0x14c>)
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	4a3e      	ldr	r2, [pc, #248]	; (800789c <xTaskIncrementTick+0x150>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	4b3d      	ldr	r3, [pc, #244]	; (80078a0 <xTaskIncrementTick+0x154>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3301      	adds	r3, #1
 80077ae:	4a3c      	ldr	r2, [pc, #240]	; (80078a0 <xTaskIncrementTick+0x154>)
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	f000 f995 	bl	8007ae0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077b6:	4b3b      	ldr	r3, [pc, #236]	; (80078a4 <xTaskIncrementTick+0x158>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d348      	bcc.n	8007852 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077c0:	4b35      	ldr	r3, [pc, #212]	; (8007898 <xTaskIncrementTick+0x14c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ca:	4b36      	ldr	r3, [pc, #216]	; (80078a4 <xTaskIncrementTick+0x158>)
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d0:	601a      	str	r2, [r3, #0]
					break;
 80077d2:	e03e      	b.n	8007852 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d4:	4b30      	ldr	r3, [pc, #192]	; (8007898 <xTaskIncrementTick+0x14c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d203      	bcs.n	80077f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077ec:	4a2d      	ldr	r2, [pc, #180]	; (80078a4 <xTaskIncrementTick+0x158>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077f2:	e02e      	b.n	8007852 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fa9b 	bl	8006d34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	2b00      	cmp	r3, #0
 8007804:	d004      	beq.n	8007810 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	3318      	adds	r3, #24
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fa92 	bl	8006d34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	2201      	movs	r2, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <xTaskIncrementTick+0x15c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4313      	orrs	r3, r2
 800781e:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <xTaskIncrementTick+0x15c>)
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4a1f      	ldr	r2, [pc, #124]	; (80078ac <xTaskIncrementTick+0x160>)
 8007830:	441a      	add	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7ff fa1e 	bl	8006c7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007842:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <xTaskIncrementTick+0x164>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	429a      	cmp	r2, r3
 800784a:	d3b9      	bcc.n	80077c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007850:	e7b6      	b.n	80077c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007852:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <xTaskIncrementTick+0x164>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	4914      	ldr	r1, [pc, #80]	; (80078ac <xTaskIncrementTick+0x160>)
 800785a:	4613      	mov	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4413      	add	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	440b      	add	r3, r1
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d901      	bls.n	800786e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800786a:	2301      	movs	r3, #1
 800786c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800786e:	4b11      	ldr	r3, [pc, #68]	; (80078b4 <xTaskIncrementTick+0x168>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d007      	beq.n	8007886 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e004      	b.n	8007886 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800787c:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <xTaskIncrementTick+0x16c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	4a0d      	ldr	r2, [pc, #52]	; (80078b8 <xTaskIncrementTick+0x16c>)
 8007884:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007886:	697b      	ldr	r3, [r7, #20]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	240040a4 	.word	0x240040a4
 8007894:	24004080 	.word	0x24004080
 8007898:	24004034 	.word	0x24004034
 800789c:	24004038 	.word	0x24004038
 80078a0:	24004094 	.word	0x24004094
 80078a4:	2400409c 	.word	0x2400409c
 80078a8:	24004084 	.word	0x24004084
 80078ac:	24003f80 	.word	0x24003f80
 80078b0:	24003f7c 	.word	0x24003f7c
 80078b4:	24004090 	.word	0x24004090
 80078b8:	2400408c 	.word	0x2400408c

080078bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078c2:	4b27      	ldr	r3, [pc, #156]	; (8007960 <vTaskSwitchContext+0xa4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078ca:	4b26      	ldr	r3, [pc, #152]	; (8007964 <vTaskSwitchContext+0xa8>)
 80078cc:	2201      	movs	r2, #1
 80078ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078d0:	e03f      	b.n	8007952 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80078d2:	4b24      	ldr	r3, [pc, #144]	; (8007964 <vTaskSwitchContext+0xa8>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d8:	4b23      	ldr	r3, [pc, #140]	; (8007968 <vTaskSwitchContext+0xac>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	fab3 f383 	clz	r3, r3
 80078e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	f1c3 031f 	rsb	r3, r3, #31
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	491f      	ldr	r1, [pc, #124]	; (800796c <vTaskSwitchContext+0xb0>)
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	440b      	add	r3, r1
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	607b      	str	r3, [r7, #4]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vTaskSwitchContext+0x5a>
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4a12      	ldr	r2, [pc, #72]	; (800796c <vTaskSwitchContext+0xb0>)
 8007924:	4413      	add	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	3308      	adds	r3, #8
 800793a:	429a      	cmp	r2, r3
 800793c:	d104      	bne.n	8007948 <vTaskSwitchContext+0x8c>
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	4a08      	ldr	r2, [pc, #32]	; (8007970 <vTaskSwitchContext+0xb4>)
 8007950:	6013      	str	r3, [r2, #0]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	240040a4 	.word	0x240040a4
 8007964:	24004090 	.word	0x24004090
 8007968:	24004084 	.word	0x24004084
 800796c:	24003f80 	.word	0x24003f80
 8007970:	24003f7c 	.word	0x24003f7c

08007974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800797c:	f000 f852 	bl	8007a24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007980:	4b06      	ldr	r3, [pc, #24]	; (800799c <prvIdleTask+0x28>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d9f9      	bls.n	800797c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <prvIdleTask+0x2c>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007998:	e7f0      	b.n	800797c <prvIdleTask+0x8>
 800799a:	bf00      	nop
 800799c:	24003f80 	.word	0x24003f80
 80079a0:	e000ed04 	.word	0xe000ed04

080079a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079aa:	2300      	movs	r3, #0
 80079ac:	607b      	str	r3, [r7, #4]
 80079ae:	e00c      	b.n	80079ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	4613      	mov	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4a12      	ldr	r2, [pc, #72]	; (8007a04 <prvInitialiseTaskLists+0x60>)
 80079bc:	4413      	add	r3, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff f92e 	bl	8006c20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3301      	adds	r3, #1
 80079c8:	607b      	str	r3, [r7, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b06      	cmp	r3, #6
 80079ce:	d9ef      	bls.n	80079b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80079d0:	480d      	ldr	r0, [pc, #52]	; (8007a08 <prvInitialiseTaskLists+0x64>)
 80079d2:	f7ff f925 	bl	8006c20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80079d6:	480d      	ldr	r0, [pc, #52]	; (8007a0c <prvInitialiseTaskLists+0x68>)
 80079d8:	f7ff f922 	bl	8006c20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80079dc:	480c      	ldr	r0, [pc, #48]	; (8007a10 <prvInitialiseTaskLists+0x6c>)
 80079de:	f7ff f91f 	bl	8006c20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80079e2:	480c      	ldr	r0, [pc, #48]	; (8007a14 <prvInitialiseTaskLists+0x70>)
 80079e4:	f7ff f91c 	bl	8006c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80079e8:	480b      	ldr	r0, [pc, #44]	; (8007a18 <prvInitialiseTaskLists+0x74>)
 80079ea:	f7ff f919 	bl	8006c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80079ee:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <prvInitialiseTaskLists+0x78>)
 80079f0:	4a05      	ldr	r2, [pc, #20]	; (8007a08 <prvInitialiseTaskLists+0x64>)
 80079f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80079f4:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <prvInitialiseTaskLists+0x7c>)
 80079f6:	4a05      	ldr	r2, [pc, #20]	; (8007a0c <prvInitialiseTaskLists+0x68>)
 80079f8:	601a      	str	r2, [r3, #0]
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	24003f80 	.word	0x24003f80
 8007a08:	2400400c 	.word	0x2400400c
 8007a0c:	24004020 	.word	0x24004020
 8007a10:	2400403c 	.word	0x2400403c
 8007a14:	24004050 	.word	0x24004050
 8007a18:	24004068 	.word	0x24004068
 8007a1c:	24004034 	.word	0x24004034
 8007a20:	24004038 	.word	0x24004038

08007a24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a2a:	e019      	b.n	8007a60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a2c:	f7ff fada 	bl	8006fe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a30:	4b10      	ldr	r3, [pc, #64]	; (8007a74 <prvCheckTasksWaitingTermination+0x50>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff f979 	bl	8006d34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a42:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <prvCheckTasksWaitingTermination+0x54>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4a0b      	ldr	r2, [pc, #44]	; (8007a78 <prvCheckTasksWaitingTermination+0x54>)
 8007a4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <prvCheckTasksWaitingTermination+0x58>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	4a0a      	ldr	r2, [pc, #40]	; (8007a7c <prvCheckTasksWaitingTermination+0x58>)
 8007a54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007a56:	f7ff faf5 	bl	8007044 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f810 	bl	8007a80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <prvCheckTasksWaitingTermination+0x58>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e1      	bne.n	8007a2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	24004050 	.word	0x24004050
 8007a78:	2400407c 	.word	0x2400407c
 8007a7c:	24004064 	.word	0x24004064

08007a80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d108      	bne.n	8007aa4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe ffa4 	bl	80069e4 <vPortFree>
				vPortFree( pxTCB );
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe ffa1 	bl	80069e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aa2:	e018      	b.n	8007ad6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d103      	bne.n	8007ab6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fe ff98 	bl	80069e4 <vPortFree>
	}
 8007ab4:	e00f      	b.n	8007ad6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d00a      	beq.n	8007ad6 <prvDeleteTCB+0x56>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <prvDeleteTCB+0x54>
	}
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvResetNextTaskUnblockTime+0x38>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d104      	bne.n	8007afa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007af0:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <prvResetNextTaskUnblockTime+0x3c>)
 8007af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007af6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007af8:	e008      	b.n	8007b0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <prvResetNextTaskUnblockTime+0x38>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	4a04      	ldr	r2, [pc, #16]	; (8007b1c <prvResetNextTaskUnblockTime+0x3c>)
 8007b0a:	6013      	str	r3, [r2, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	24004034 	.word	0x24004034
 8007b1c:	2400409c 	.word	0x2400409c

08007b20 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b2a:	4b29      	ldr	r3, [pc, #164]	; (8007bd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f8fc 	bl	8006d34 <uxListRemove>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10b      	bne.n	8007b5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b42:	4b24      	ldr	r3, [pc, #144]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	2201      	movs	r2, #1
 8007b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4e:	43da      	mvns	r2, r3
 8007b50:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4013      	ands	r3, r2
 8007b56:	4a20      	ldr	r2, [pc, #128]	; (8007bd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007b58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b60:	d10a      	bne.n	8007b78 <prvAddCurrentTaskToDelayedList+0x58>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b68:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	481a      	ldr	r0, [pc, #104]	; (8007bdc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007b72:	f7ff f882 	bl	8006c7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b76:	e026      	b.n	8007bc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b80:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d209      	bcs.n	8007ba4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b90:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	f7ff f890 	bl	8006cc2 <vListInsert>
}
 8007ba2:	e010      	b.n	8007bc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7ff f886 	bl	8006cc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d202      	bcs.n	8007bc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007bc0:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6013      	str	r3, [r2, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	24004080 	.word	0x24004080
 8007bd4:	24003f7c 	.word	0x24003f7c
 8007bd8:	24004084 	.word	0x24004084
 8007bdc:	24004068 	.word	0x24004068
 8007be0:	24004038 	.word	0x24004038
 8007be4:	24004034 	.word	0x24004034
 8007be8:	2400409c 	.word	0x2400409c

08007bec <ringbuff_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
ringbuff_init(RINGBUFF_VOLATILE ringbuff_t* buff, void* buffdata, size_t size) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <ringbuff_init+0x1e>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <ringbuff_init+0x1e>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <ringbuff_init+0x22>
        return 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	e011      	b.n	8007c32 <ringbuff_init+0x46>
    }

    BUF_MEMSET((void *)buff, 0x00, sizeof(*buff));
 8007c0e:	221c      	movs	r2, #28
 8007c10:	2100      	movs	r1, #0
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f962 	bl	8007edc <memset>

    buff->size = size;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]
    buff->buff = buffdata;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	605a      	str	r2, [r3, #4]

#if RINGBUFF_USE_MAGIC
    buff->magic1 = 0xDEADBEEF;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	4a05      	ldr	r2, [pc, #20]	; (8007c3c <ringbuff_init+0x50>)
 8007c28:	601a      	str	r2, [r3, #0]
    buff->magic2 = ~0xDEADBEEF;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4a04      	ldr	r2, [pc, #16]	; (8007c40 <ringbuff_init+0x54>)
 8007c2e:	619a      	str	r2, [r3, #24]
#endif /* RINGBUFF_USE_MAGIC */

    return 1;
 8007c30:	2301      	movs	r3, #1
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	deadbeef 	.word	0xdeadbeef
 8007c40:	21524110 	.word	0x21524110

08007c44 <ringbuff_is_ready>:
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
uint8_t
ringbuff_is_ready(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d013      	beq.n	8007c7a <ringbuff_is_ready+0x36>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a0d      	ldr	r2, [pc, #52]	; (8007c8c <ringbuff_is_ready+0x48>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d10e      	bne.n	8007c7a <ringbuff_is_ready+0x36>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	4a0b      	ldr	r2, [pc, #44]	; (8007c90 <ringbuff_is_ready+0x4c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d109      	bne.n	8007c7a <ringbuff_is_ready+0x36>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <ringbuff_is_ready+0x36>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <ringbuff_is_ready+0x36>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <ringbuff_is_ready+0x38>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	deadbeef 	.word	0xdeadbeef
 8007c90:	21524110 	.word	0x21524110

08007c94 <ringbuff_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
ringbuff_get_full(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
    size_t w, r, size;

    if (!BUF_IS_VALID(buff)) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d011      	beq.n	8007cc6 <ringbuff_get_full+0x32>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a1b      	ldr	r2, [pc, #108]	; (8007d14 <ringbuff_get_full+0x80>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d10c      	bne.n	8007cc6 <ringbuff_get_full+0x32>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	4a19      	ldr	r2, [pc, #100]	; (8007d18 <ringbuff_get_full+0x84>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d107      	bne.n	8007cc6 <ringbuff_get_full+0x32>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <ringbuff_get_full+0x32>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <ringbuff_get_full+0x36>
        return 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e01d      	b.n	8007d06 <ringbuff_get_full+0x72>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d102      	bne.n	8007ce4 <ringbuff_get_full+0x50>
        size = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	e00f      	b.n	8007d04 <ringbuff_get_full+0x70>
    } else if (w > r) {
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d904      	bls.n	8007cf6 <ringbuff_get_full+0x62>
        size = w - r;
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	e006      	b.n	8007d04 <ringbuff_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	6939      	ldr	r1, [r7, #16]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1acb      	subs	r3, r1, r3
 8007d00:	4413      	add	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
    }
    return size;
 8007d04:	697b      	ldr	r3, [r7, #20]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	deadbeef 	.word	0xdeadbeef
 8007d18:	21524110 	.word	0x21524110

08007d1c <ringbuff_get_linear_block_read_address>:
 * \brief           Get linear address for buffer for fast read
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer start address
 */
void *
ringbuff_get_linear_block_read_address(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
    if (!BUF_IS_VALID(buff)) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d011      	beq.n	8007d4e <ringbuff_get_linear_block_read_address+0x32>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <ringbuff_get_linear_block_read_address+0x4c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10c      	bne.n	8007d4e <ringbuff_get_linear_block_read_address+0x32>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	4a0c      	ldr	r2, [pc, #48]	; (8007d6c <ringbuff_get_linear_block_read_address+0x50>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d107      	bne.n	8007d4e <ringbuff_get_linear_block_read_address+0x32>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <ringbuff_get_linear_block_read_address+0x32>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <ringbuff_get_linear_block_read_address+0x36>
        return NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e004      	b.n	8007d5c <ringbuff_get_linear_block_read_address+0x40>
    }
    return &buff->buff[buff->r];
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	4413      	add	r3, r2
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	deadbeef 	.word	0xdeadbeef
 8007d6c:	21524110 	.word	0x21524110

08007d70 <ringbuff_get_linear_block_read_length>:
 * \brief           Get length of linear block address before it overflows for read operation
 * \param[in]       buff: Buffer handle
 * \return          Linear buffer size in units of bytes for read operation
 */
size_t
ringbuff_get_linear_block_read_length(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
    size_t w, r, len;

    if (!BUF_IS_VALID(buff)) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d011      	beq.n	8007da2 <ringbuff_get_linear_block_read_length+0x32>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a1a      	ldr	r2, [pc, #104]	; (8007dec <ringbuff_get_linear_block_read_length+0x7c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d10c      	bne.n	8007da2 <ringbuff_get_linear_block_read_length+0x32>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	4a18      	ldr	r2, [pc, #96]	; (8007df0 <ringbuff_get_linear_block_read_length+0x80>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d107      	bne.n	8007da2 <ringbuff_get_linear_block_read_length+0x32>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <ringbuff_get_linear_block_read_length+0x32>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <ringbuff_get_linear_block_read_length+0x36>
        return 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e01b      	b.n	8007dde <ringbuff_get_linear_block_read_length+0x6e>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	613b      	str	r3, [r7, #16]
    r = buff->r;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	60fb      	str	r3, [r7, #12]
    if (w > r) {
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d904      	bls.n	8007dc4 <ringbuff_get_linear_block_read_length+0x54>
        len = w - r;
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	e00b      	b.n	8007ddc <ringbuff_get_linear_block_read_length+0x6c>
    } else if (r > w) {
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d905      	bls.n	8007dd8 <ringbuff_get_linear_block_read_length+0x68>
        len = buff->size - r;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	e001      	b.n	8007ddc <ringbuff_get_linear_block_read_length+0x6c>
    } else {
        len = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
    }
    return len;
 8007ddc:	697b      	ldr	r3, [r7, #20]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	deadbeef 	.word	0xdeadbeef
 8007df0:	21524110 	.word	0x21524110

08007df4 <ringbuff_skip>:
 * \param[in]       buff: Buffer handle
 * \param[in]       len: Number of bytes to skip and mark as read
 * \return          Number of bytes skipped
 */
size_t
ringbuff_skip(RINGBUFF_VOLATILE ringbuff_t* buff, size_t len) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
    size_t full;

    if (!BUF_IS_VALID(buff) || len == 0) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d014      	beq.n	8007e2e <ringbuff_skip+0x3a>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a20      	ldr	r2, [pc, #128]	; (8007e8c <ringbuff_skip+0x98>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d10f      	bne.n	8007e2e <ringbuff_skip+0x3a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <ringbuff_skip+0x9c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d10a      	bne.n	8007e2e <ringbuff_skip+0x3a>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d006      	beq.n	8007e2e <ringbuff_skip+0x3a>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <ringbuff_skip+0x3a>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <ringbuff_skip+0x3e>
        return 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e027      	b.n	8007e82 <ringbuff_skip+0x8e>
    }

    full = ringbuff_get_full(buff);             /* Get buffer used length */
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff ff2e 	bl	8007c94 <ringbuff_get_full>
 8007e38:	60f8      	str	r0, [r7, #12]
    len = BUF_MIN(len, full);                   /* Calculate max skip */
 8007e3a:	683a      	ldr	r2, [r7, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bf28      	it	cs
 8007e42:	4613      	movcs	r3, r2
 8007e44:	603b      	str	r3, [r7, #0]
    buff->r += len;                             /* Advance read pointer */
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	441a      	add	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
    if (buff->r >= buff->size) {                /* Subtract possible overflow */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d306      	bcc.n	8007e6c <ringbuff_skip+0x78>
        buff->r -= buff->size;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	68d2      	ldr	r2, [r2, #12]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60da      	str	r2, [r3, #12]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_READ, len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <ringbuff_skip+0x8c>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
    return len;
 8007e80:	683b      	ldr	r3, [r7, #0]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	deadbeef 	.word	0xdeadbeef
 8007e90:	21524110 	.word	0x21524110

08007e94 <__libc_init_array>:
 8007e94:	b570      	push	{r4, r5, r6, lr}
 8007e96:	4d0d      	ldr	r5, [pc, #52]	; (8007ecc <__libc_init_array+0x38>)
 8007e98:	4c0d      	ldr	r4, [pc, #52]	; (8007ed0 <__libc_init_array+0x3c>)
 8007e9a:	1b64      	subs	r4, r4, r5
 8007e9c:	10a4      	asrs	r4, r4, #2
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	42a6      	cmp	r6, r4
 8007ea2:	d109      	bne.n	8007eb8 <__libc_init_array+0x24>
 8007ea4:	4d0b      	ldr	r5, [pc, #44]	; (8007ed4 <__libc_init_array+0x40>)
 8007ea6:	4c0c      	ldr	r4, [pc, #48]	; (8007ed8 <__libc_init_array+0x44>)
 8007ea8:	f000 f820 	bl	8007eec <_init>
 8007eac:	1b64      	subs	r4, r4, r5
 8007eae:	10a4      	asrs	r4, r4, #2
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	42a6      	cmp	r6, r4
 8007eb4:	d105      	bne.n	8007ec2 <__libc_init_array+0x2e>
 8007eb6:	bd70      	pop	{r4, r5, r6, pc}
 8007eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebc:	4798      	blx	r3
 8007ebe:	3601      	adds	r6, #1
 8007ec0:	e7ee      	b.n	8007ea0 <__libc_init_array+0xc>
 8007ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec6:	4798      	blx	r3
 8007ec8:	3601      	adds	r6, #1
 8007eca:	e7f2      	b.n	8007eb2 <__libc_init_array+0x1e>
 8007ecc:	08007fa4 	.word	0x08007fa4
 8007ed0:	08007fa4 	.word	0x08007fa4
 8007ed4:	08007fa4 	.word	0x08007fa4
 8007ed8:	08007fa8 	.word	0x08007fa8

08007edc <memset>:
 8007edc:	4402      	add	r2, r0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d100      	bne.n	8007ee6 <memset+0xa>
 8007ee4:	4770      	bx	lr
 8007ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eea:	e7f9      	b.n	8007ee0 <memset+0x4>

08007eec <_init>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr

08007ef8 <_fini>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	bf00      	nop
 8007efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efe:	bc08      	pop	{r3}
 8007f00:	469e      	mov	lr, r3
 8007f02:	4770      	bx	lr
