
PruebaLED2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000789c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08007bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  08007c10  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  08007c70  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000457c  240000d4  08007cd0  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24004650  08007cd0  00024650  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fbdb  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004c15  00000000  00000000  0004fcdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a60  00000000  00000000  000548f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000018e8  00000000  00000000  00056358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d064  00000000  00000000  00057c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e40e  00000000  00000000  00094ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00192bab  00000000  00000000  000b30b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00245c5d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007060  00000000  00000000  00245cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007b24 	.word	0x08007b24

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	08007b24 	.word	0x08007b24

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <SystemInit+0x104>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a3e      	ldr	r2, [pc, #248]	; (80006dc <SystemInit+0x104>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemInit+0x104>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemInit+0x104>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0x108>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	2b06      	cmp	r3, #6
 8000602:	d807      	bhi.n	8000614 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemInit+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f023 030f 	bic.w	r3, r3, #15
 800060c:	4a34      	ldr	r2, [pc, #208]	; (80006e0 <SystemInit+0x108>)
 800060e:	f043 0307 	orr.w	r3, r3, #7
 8000612:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000614:	4b33      	ldr	r3, [pc, #204]	; (80006e4 <SystemInit+0x10c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x10c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <SystemInit+0x10c>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemInit+0x10c>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	492e      	ldr	r1, [pc, #184]	; (80006e4 <SystemInit+0x10c>)
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x110>)
 800062e:	4013      	ands	r3, r2
 8000630:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemInit+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	2b00      	cmp	r3, #0
 800063c:	d007      	beq.n	800064e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemInit+0x108>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f023 030f 	bic.w	r3, r3, #15
 8000646:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemInit+0x108>)
 8000648:	f043 0307 	orr.w	r3, r3, #7
 800064c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemInit+0x10c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000654:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <SystemInit+0x10c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemInit+0x10c>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <SystemInit+0x10c>)
 8000662:	4a22      	ldr	r2, [pc, #136]	; (80006ec <SystemInit+0x114>)
 8000664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemInit+0x10c>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemInit+0x118>)
 800066a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <SystemInit+0x10c>)
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <SystemInit+0x11c>)
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <SystemInit+0x10c>)
 8000674:	2200      	movs	r2, #0
 8000676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <SystemInit+0x10c>)
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <SystemInit+0x11c>)
 800067c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <SystemInit+0x10c>)
 8000680:	2200      	movs	r2, #0
 8000682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <SystemInit+0x10c>)
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <SystemInit+0x11c>)
 8000688:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <SystemInit+0x10c>)
 800068c:	2200      	movs	r2, #0
 800068e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <SystemInit+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <SystemInit+0x10c>)
 8000696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <SystemInit+0x10c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <SystemInit+0x120>)
 80006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <SystemInit+0x120>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x124>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <SystemInit+0x128>)
 80006b4:	4013      	ands	r3, r2
 80006b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ba:	d202      	bcs.n	80006c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x12c>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x130>)
 80006c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <SystemInit+0x104>)
 80006cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00
 80006e0:	52002000 	.word	0x52002000
 80006e4:	58024400 	.word	0x58024400
 80006e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80006ec:	02020200 	.word	0x02020200
 80006f0:	01ff0000 	.word	0x01ff0000
 80006f4:	01010280 	.word	0x01010280
 80006f8:	580000c0 	.word	0x580000c0
 80006fc:	5c001000 	.word	0x5c001000
 8000700:	ffff0000 	.word	0xffff0000
 8000704:	51008108 	.word	0x51008108
 8000708:	52004000 	.word	0x52004000

0800070c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <vApplicationGetIdleTaskMemory+0x2c>)
 800071c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <vApplicationGetIdleTaskMemory+0x30>)
 8000722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	240000f0 	.word	0x240000f0
 800073c:	24000144 	.word	0x24000144

08000740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b098      	sub	sp, #96	; 0x60
 8000744:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074a:	65fb      	str	r3, [r7, #92]	; 0x5c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800074c:	bf00      	nop
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <main+0x114>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d004      	beq.n	8000764 <main+0x24>
 800075a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000760:	2b00      	cmp	r3, #0
 8000762:	dcf4      	bgt.n	800074e <main+0xe>
  if ( timeout < 0 )
 8000764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000766:	2b00      	cmp	r3, #0
 8000768:	da01      	bge.n	800076e <main+0x2e>
  {
  Error_Handler();
 800076a:	f000 fa89 	bl	8000c80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fd13 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f87d 	bl	8000870 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <main+0x114>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	4a35      	ldr	r2, [pc, #212]	; (8000854 <main+0x114>)
 800077e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <main+0x114>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000794:	2000      	movs	r0, #0
 8000796:	f001 fc79 	bl	800208c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f001 fc8f 	bl	80020c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007a6:	65fb      	str	r3, [r7, #92]	; 0x5c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007a8:	bf00      	nop
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <main+0x114>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d104      	bne.n	80007c0 <main+0x80>
 80007b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0x6a>
if ( timeout < 0 )
 80007c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x8a>
{
Error_Handler();
 80007c6:	f000 fa5b 	bl	8000c80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f99f 	bl	8000b0c <MX_GPIO_Init>
  MX_ETH_Init();
 80007ce:	f000 f8d3 	bl	8000978 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007d2:	f000 f91d 	bl	8000a10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d6:	f000 f967 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <main+0x118>)
 80007dc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80007e0:	461d      	mov	r5, r3
 80007e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f005 ff38 	bl	800666a <osThreadCreate>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4a17      	ldr	r2, [pc, #92]	; (800085c <main+0x11c>)
 80007fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED1on */
  osThreadDef(LED1on, LED1on_Init, osPriorityNormal, 0, 128);
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <main+0x120>)
 8000802:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED1onHandle = osThreadCreate(osThread(LED1on), NULL);
 8000814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f005 ff25 	bl	800666a <osThreadCreate>
 8000820:	4603      	mov	r3, r0
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <main+0x124>)
 8000824:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED2on */
  osThreadDef(LED2on, LED2on_Init, osPriorityNormal, 0, 128);
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <main+0x128>)
 8000828:	f107 0408 	add.w	r4, r7, #8
 800082c:	461d      	mov	r5, r3
 800082e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED2onHandle = osThreadCreate(osThread(LED2on), NULL);
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f005 ff12 	bl	800666a <osThreadCreate>
 8000846:	4603      	mov	r3, r0
 8000848:	4a08      	ldr	r2, [pc, #32]	; (800086c <main+0x12c>)
 800084a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800084c:	f005 ff06 	bl	800665c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000850:	e7fe      	b.n	8000850 <main+0x110>
 8000852:	bf00      	nop
 8000854:	58024400 	.word	0x58024400
 8000858:	08007b58 	.word	0x08007b58
 800085c:	240040a0 	.word	0x240040a0
 8000860:	08007b74 	.word	0x08007b74
 8000864:	24004540 	.word	0x24004540
 8000868:	08007b90 	.word	0x08007b90
 800086c:	240040a4 	.word	0x240040a4

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	224c      	movs	r2, #76	; 0x4c
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f007 f948 	bl	8007b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2220      	movs	r2, #32
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f007 f942 	bl	8007b14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000890:	2004      	movs	r0, #4
 8000892:	f001 fd71 	bl	8002378 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <SystemClock_Config+0xfc>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a33      	ldr	r2, [pc, #204]	; (800096c <SystemClock_Config+0xfc>)
 80008a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <SystemClock_Config+0xfc>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <SystemClock_Config+0x100>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	4a2e      	ldr	r2, [pc, #184]	; (8000970 <SystemClock_Config+0x100>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <SystemClock_Config+0x100>)
 80008be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c8:	bf00      	nop
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <SystemClock_Config+0xfc>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d6:	d1f8      	bne.n	80008ca <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SystemClock_Config+0x104>)
 80008da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008dc:	f023 0303 	bic.w	r3, r3, #3
 80008e0:	4a24      	ldr	r2, [pc, #144]	; (8000974 <SystemClock_Config+0x104>)
 80008e2:	f043 0302 	orr.w	r3, r3, #2
 80008e6:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008fe:	2378      	movs	r3, #120	; 0x78
 8000900:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800090e:	230c      	movs	r3, #12
 8000910:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000912:	2300      	movs	r3, #0
 8000914:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fd94 	bl	800244c <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800092a:	f000 f9a9 	bl	8000c80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	233f      	movs	r3, #63	; 0x3f
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800093a:	2308      	movs	r3, #8
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2104      	movs	r1, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f989 	bl	8002c6c <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000960:	f000 f98e 	bl	8000c80 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3770      	adds	r7, #112	; 0x70
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024800 	.word	0x58024800
 8000970:	58000400 	.word	0x58000400
 8000974:	58024400 	.word	0x58024400

08000978 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_ETH_Init+0x80>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <MX_ETH_Init+0x84>)
 8000980:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_ETH_Init+0x88>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_ETH_Init+0x88>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_ETH_Init+0x88>)
 8000990:	22e1      	movs	r2, #225	; 0xe1
 8000992:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_ETH_Init+0x88>)
 8000996:	2200      	movs	r2, #0
 8000998:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_ETH_Init+0x88>)
 800099c:	2200      	movs	r2, #0
 800099e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_ETH_Init+0x88>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_ETH_Init+0x80>)
 80009a8:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_ETH_Init+0x88>)
 80009aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_ETH_Init+0x80>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_ETH_Init+0x80>)
 80009b4:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <MX_ETH_Init+0x8c>)
 80009b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_ETH_Init+0x80>)
 80009ba:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <MX_ETH_Init+0x90>)
 80009bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_ETH_Init+0x80>)
 80009c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009c6:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_ETH_Init+0x80>)
 80009c8:	f000 fd66 	bl	8001498 <HAL_ETH_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009d2:	f000 f955 	bl	8000c80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009d6:	2234      	movs	r2, #52	; 0x34
 80009d8:	2100      	movs	r1, #0
 80009da:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_ETH_Init+0x94>)
 80009dc:	f007 f89a 	bl	8007b14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <MX_ETH_Init+0x94>)
 80009e2:	2221      	movs	r2, #33	; 0x21
 80009e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_ETH_Init+0x94>)
 80009e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <MX_ETH_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24004544 	.word	0x24004544
 80009fc:	40028000 	.word	0x40028000
 8000a00:	24000344 	.word	0x24000344
 8000a04:	24000074 	.word	0x24000074
 8000a08:	24000014 	.word	0x24000014
 8000a0c:	240045cc 	.word	0x240045cc

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a16:	4a23      	ldr	r2, [pc, #140]	; (8000aa4 <MX_USART3_UART_Init+0x94>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a58:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a5a:	f004 fb09 	bl	8005070 <HAL_UART_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f90c 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a6c:	f005 fa56 	bl	8005f1c <HAL_UARTEx_SetTxFifoThreshold>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f000 f903 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a7e:	f005 fa8b 	bl	8005f98 <HAL_UARTEx_SetRxFifoThreshold>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a88:	f000 f8fa 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a8c:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	f005 fa0c 	bl	8005eaa <HAL_UARTEx_DisableFifoMode>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f8f2 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	240040a8 	.word	0x240040a8
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aae:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab4:	2209      	movs	r2, #9
 8000ab6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000af0:	f001 fafa 	bl	80020e8 <HAL_PCD_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000afa:	f000 f8c1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	24004138 	.word	0x24004138
 8000b08:	40080000 	.word	0x40080000

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b38      	ldr	r3, [pc, #224]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b32:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b40:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	4a2f      	ldr	r2, [pc, #188]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b50:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000ba2:	f043 0308 	orr.w	r3, r3, #8
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	f003 0308 	and.w	r3, r3, #8
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_GPIO_Init+0xf8>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	21c0      	movs	r1, #192	; 0xc0
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <MX_GPIO_Init+0xfc>)
 8000bdc:	f001 fa22 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000be0:	23c0      	movs	r3, #192	; 0xc0
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_GPIO_Init+0xfc>)
 8000bf8:	f001 f864 	bl	8001cc4 <HAL_GPIO_Init>

}
 8000bfc:	bf00      	nop
 8000bfe:	3730      	adds	r7, #48	; 0x30
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58020400 	.word	0x58020400

08000c0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f005 fd74 	bl	8006702 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartDefaultTask+0x8>

08000c1c <LED1on_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED1on_Init */
void LED1on_Init(void const * argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED1on_Init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	4804      	ldr	r0, [pc, #16]	; (8000c38 <LED1on_Init+0x1c>)
 8000c28:	f001 fa15 	bl	8002056 <HAL_GPIO_TogglePin>
	  osDelay(2000);
 8000c2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c30:	f005 fd67 	bl	8006702 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c34:	e7f6      	b.n	8000c24 <LED1on_Init+0x8>
 8000c36:	bf00      	nop
 8000c38:	58020400 	.word	0x58020400

08000c3c <LED2on_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LED2on_Init */
void LED2on_Init(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LED2on_Init */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000c44:	2140      	movs	r1, #64	; 0x40
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <LED2on_Init+0x1c>)
 8000c48:	f001 fa05 	bl	8002056 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000c4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c50:	f005 fd57 	bl	8006702 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000c54:	e7f6      	b.n	8000c44 <LED2on_Init+0x8>
 8000c56:	bf00      	nop
 8000c58:	58020400 	.word	0x58020400

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f000 facf 	bl	8001210 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010000 	.word	0x40010000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_MspInit+0x38>)
 8000c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_MspInit+0x38>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_MspInit+0x38>)
 8000ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f06f 0001 	mvn.w	r0, #1
 8000cb8:	f000 fbc6 	bl	8001448 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	58024400 	.word	0x58024400

08000cc8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a59      	ldr	r2, [pc, #356]	; (8000e4c <HAL_ETH_MspInit+0x184>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	f040 80ab 	bne.w	8000e42 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cec:	4b58      	ldr	r3, [pc, #352]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf2:	4a57      	ldr	r2, [pc, #348]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfc:	4b54      	ldr	r3, [pc, #336]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d06:	623b      	str	r3, [r7, #32]
 8000d08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d0a:	4b51      	ldr	r3, [pc, #324]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d10:	4a4f      	ldr	r2, [pc, #316]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d28:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2e:	4a48      	ldr	r2, [pc, #288]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a39      	ldr	r2, [pc, #228]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000da0:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dbe:	2332      	movs	r3, #50	; 0x32
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dce:	230b      	movs	r3, #11
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	481e      	ldr	r0, [pc, #120]	; (8000e54 <HAL_ETH_MspInit+0x18c>)
 8000dda:	f000 ff73 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dde:	2386      	movs	r3, #134	; 0x86
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dee:	230b      	movs	r3, #11
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <HAL_ETH_MspInit+0x190>)
 8000dfa:	f000 ff63 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e10:	230b      	movs	r3, #11
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4810      	ldr	r0, [pc, #64]	; (8000e5c <HAL_ETH_MspInit+0x194>)
 8000e1c:	f000 ff52 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e32:	230b      	movs	r3, #11
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <HAL_ETH_MspInit+0x198>)
 8000e3e:	f000 ff41 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3738      	adds	r7, #56	; 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40028000 	.word	0x40028000
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020800 	.word	0x58020800
 8000e58:	58020000 	.word	0x58020000
 8000e5c:	58020400 	.word	0x58020400
 8000e60:	58021800 	.word	0x58021800

08000e64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0b8      	sub	sp, #224	; 0xe0
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	22bc      	movs	r2, #188	; 0xbc
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 fe45 	bl	8007b14 <memset>
  if(huart->Instance==USART3)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <HAL_UART_MspInit+0xc0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d142      	bne.n	8000f1a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fab0 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eae:	f7ff fee7 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <HAL_UART_MspInit+0xc4>)
 8000eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_UART_MspInit+0xc4>)
 8000eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_UART_MspInit+0xc4>)
 8000ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0xc4>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_UART_MspInit+0xc4>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_UART_MspInit+0xc4>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_UART_MspInit+0xc8>)
 8000f16:	f000 fed5 	bl	8001cc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	37e0      	adds	r7, #224	; 0xe0
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004800 	.word	0x40004800
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020c00 	.word	0x58020c00

08000f30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0b8      	sub	sp, #224	; 0xe0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	22bc      	movs	r2, #188	; 0xbc
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 fddf 	bl	8007b14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a36      	ldr	r2, [pc, #216]	; (8001034 <HAL_PCD_MspInit+0x104>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d165      	bne.n	800102c <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000f6a:	2318      	movs	r3, #24
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000f72:	2304      	movs	r3, #4
 8000f74:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fa39 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000f9c:	f7ff fe70 	bl	8000c80 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fa0:	f001 fa44 	bl	800242c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_PCD_MspInit+0x108>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <HAL_PCD_MspInit+0x108>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_PCD_MspInit+0x108>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fc2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fdc:	230a      	movs	r3, #10
 8000fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <HAL_PCD_MspInit+0x10c>)
 8000fea:	f000 fe6b 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <HAL_PCD_MspInit+0x10c>)
 800100a:	f000 fe5b 	bl	8001cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_PCD_MspInit+0x108>)
 8001010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_PCD_MspInit+0x108>)
 8001016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800101a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_PCD_MspInit+0x108>)
 8001020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	37e0      	adds	r7, #224	; 0xe0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40080000 	.word	0x40080000
 8001038:	58024400 	.word	0x58024400
 800103c:	58020000 	.word	0x58020000

08001040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b0f      	cmp	r3, #15
 800104c:	d844      	bhi.n	80010d8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800104e:	2200      	movs	r2, #0
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	2019      	movs	r0, #25
 8001054:	f000 f9f8 	bl	8001448 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001058:	2019      	movs	r0, #25
 800105a:	f000 fa0f 	bl	800147c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800105e:	4a24      	ldr	r2, [pc, #144]	; (80010f0 <HAL_InitTick+0xb0>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_InitTick+0xb4>)
 8001066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800106a:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_InitTick+0xb4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_InitTick+0xb4>)
 8001076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001082:	f107 020c 	add.w	r2, r7, #12
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4611      	mov	r1, r2
 800108c:	4618      	mov	r0, r3
 800108e:	f002 f979 	bl	8003384 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001092:	f002 f961 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <HAL_InitTick+0xb8>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3b01      	subs	r3, #1
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_InitTick+0xbc>)
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_InitTick+0xc0>)
 80010ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0xbc>)
 80010b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010b8:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_InitTick+0xbc>)
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_InitTick+0xbc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_InitTick+0xbc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <HAL_InitTick+0xbc>)
 80010cc:	f003 fcfe 	bl	8004acc <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <HAL_InitTick+0xa6>
 80010d6:	e001      	b.n	80010dc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e005      	b.n	80010e8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <HAL_InitTick+0xbc>)
 80010de:	f003 fd57 	bl	8004b90 <HAL_TIM_Base_Start_IT>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3738      	adds	r7, #56	; 0x38
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24000008 	.word	0x24000008
 80010f4:	58024400 	.word	0x58024400
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	24004600 	.word	0x24004600
 8001100:	40010000 	.word	0x40010000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <TIM1_UP_IRQHandler+0x10>)
 8001136:	f003 fd9b 	bl	8004c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24004600 	.word	0x24004600

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff fa46 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	; (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f006 fcab 	bl	8007acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fae3 	bl	8000740 <main>
  bx  lr
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001180:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001184:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001188:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 800118c:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001190:	24004650 	.word	0x24004650

08001194 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC3_IRQHandler>
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f947 	bl	8001432 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011a4:	f001 ff18 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_Init+0x68>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	4913      	ldr	r1, [pc, #76]	; (8001204 <HAL_Init+0x6c>)
 80011b6:	5ccb      	ldrb	r3, [r1, r3]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_Init+0x68>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_Init+0x6c>)
 80011cc:	5cd3      	ldrb	r3, [r2, r3]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	fa22 f303 	lsr.w	r3, r2, r3
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_Init+0x70>)
 80011da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_Init+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e2:	200f      	movs	r0, #15
 80011e4:	f7ff ff2c 	bl	8001040 <HAL_InitTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e002      	b.n	80011f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011f2:	f7ff fd4b 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400
 8001204:	08007bb4 	.word	0x08007bb4
 8001208:	24000004 	.word	0x24000004
 800120c:	24000000 	.word	0x24000000

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	2400000c 	.word	0x2400000c
 8001234:	2400464c 	.word	0x2400464c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400464c 	.word	0x2400464c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2400000c 	.word	0x2400000c

08001298 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetREVID+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	5c001000 	.word	0x5c001000

080012b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	58000400 	.word	0x58000400

080012d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <__NVIC_SetPriorityGrouping+0x40>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 8001302:	4313      	orrs	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x40>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	05fa0000 	.word	0x05fa0000

08001320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <__NVIC_EnableIRQ+0x38>)
 8001356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff4c 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff63 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb3 	bl	80013cc <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff82 	bl	8001378 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff56 	bl	800133c <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0c6      	b.n	8001638 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fc08 	bl	8000cc8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2223      	movs	r2, #35	; 0x23
 80014bc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b60      	ldr	r3, [pc, #384]	; (8001640 <HAL_ETH_Init+0x1a8>)
 80014c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c4:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_ETH_Init+0x1a8>)
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_ETH_Init+0x1a8>)
 80014d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7a1b      	ldrb	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff fee3 	bl	80012b0 <HAL_SYSCFG_ETHInterfaceSelect>
 80014ea:	e003      	b.n	80014f4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80014f0:	f7ff fede 	bl	80012b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800150c:	f7ff fe94 	bl	8001238 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001512:	e00f      	b.n	8001534 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001514:	f7ff fe90 	bl	8001238 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001522:	d907      	bls.n	8001534 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2204      	movs	r2, #4
 8001528:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	22e0      	movs	r2, #224	; 0xe0
 800152e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e081      	b.n	8001638 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1e6      	bne.n	8001514 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fac0 	bl	8001acc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800154c:	f001 febe 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8001550:	4603      	mov	r3, r0
 8001552:	4a3c      	ldr	r2, [pc, #240]	; (8001644 <HAL_ETH_Init+0x1ac>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9a      	lsrs	r2, r3, #18
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3a01      	subs	r2, #1
 8001560:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fa13 	bl	8001990 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001580:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001584:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	22e0      	movs	r2, #224	; 0xe0
 800159c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e04a      	b.n	8001638 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	f241 1308 	movw	r3, #4360	; 0x1108
 80015aa:	4413      	add	r3, r2
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_ETH_Init+0x1b0>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6952      	ldr	r2, [r2, #20]
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	6809      	ldr	r1, [r1, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	f241 1308 	movw	r3, #4360	; 0x1108
 80015c2:	440b      	add	r3, r1
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fad8 	bl	8001b7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fb1c 	bl	8001c0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	3305      	adds	r3, #5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	021a      	lsls	r2, r3, #8
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	3303      	adds	r3, #3
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	061a      	lsls	r2, r3, #24
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	3302      	adds	r3, #2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	3301      	adds	r3, #1
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001610:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800161e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001620:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2210      	movs	r2, #16
 800162e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2210      	movs	r2, #16
 8001634:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58024400 	.word	0x58024400
 8001644:	431bde83 	.word	0x431bde83
 8001648:	ffff8001 	.word	0xffff8001

0800164c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800165e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001666:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	7b1b      	ldrb	r3, [r3, #12]
 800166c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800166e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	7b5b      	ldrb	r3, [r3, #13]
 8001674:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001676:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	7b9b      	ldrb	r3, [r3, #14]
 800167c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800167e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	7bdb      	ldrb	r3, [r3, #15]
 8001684:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001686:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	7c12      	ldrb	r2, [r2, #16]
 800168c:	2a00      	cmp	r2, #0
 800168e:	d102      	bne.n	8001696 <ETH_SetMACConfig+0x4a>
 8001690:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001694:	e000      	b.n	8001698 <ETH_SetMACConfig+0x4c>
 8001696:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001698:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	7c52      	ldrb	r2, [r2, #17]
 800169e:	2a00      	cmp	r2, #0
 80016a0:	d102      	bne.n	80016a8 <ETH_SetMACConfig+0x5c>
 80016a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016a6:	e000      	b.n	80016aa <ETH_SetMACConfig+0x5e>
 80016a8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016aa:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	7c9b      	ldrb	r3, [r3, #18]
 80016b0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016b2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80016b8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80016be:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	7f1b      	ldrb	r3, [r3, #28]
 80016c4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80016c6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	7f5b      	ldrb	r3, [r3, #29]
 80016cc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80016ce:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	7f92      	ldrb	r2, [r2, #30]
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	d102      	bne.n	80016de <ETH_SetMACConfig+0x92>
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	e000      	b.n	80016e0 <ETH_SetMACConfig+0x94>
 80016de:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80016e0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	7fdb      	ldrb	r3, [r3, #31]
 80016e6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80016e8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	d102      	bne.n	80016fa <ETH_SetMACConfig+0xae>
 80016f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f8:	e000      	b.n	80016fc <ETH_SetMACConfig+0xb0>
 80016fa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80016fc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001702:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800170a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800170c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b56      	ldr	r3, [pc, #344]	; (8001878 <ETH_SetMACConfig+0x22c>)
 800171e:	4013      	ands	r3, r2
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	68f9      	ldr	r1, [r7, #12]
 8001726:	430b      	orrs	r3, r1
 8001728:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001736:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001738:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001740:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001742:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800174a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800174c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001754:	2a00      	cmp	r2, #0
 8001756:	d102      	bne.n	800175e <ETH_SetMACConfig+0x112>
 8001758:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800175c:	e000      	b.n	8001760 <ETH_SetMACConfig+0x114>
 800175e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001760:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4b42      	ldr	r3, [pc, #264]	; (800187c <ETH_SetMACConfig+0x230>)
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	68f9      	ldr	r1, [r7, #12]
 800177a:	430b      	orrs	r3, r1
 800177c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001784:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <ETH_SetMACConfig+0x234>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	430b      	orrs	r3, r1
 80017a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017ae:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d101      	bne.n	80017be <ETH_SetMACConfig+0x172>
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	e000      	b.n	80017c0 <ETH_SetMACConfig+0x174>
 80017be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017c0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017d2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	430b      	orrs	r3, r1
 80017e0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80017e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	f023 0103 	bic.w	r1, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	430a      	orrs	r2, r1
 800180a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001816:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001832:	2a00      	cmp	r2, #0
 8001834:	d101      	bne.n	800183a <ETH_SetMACConfig+0x1ee>
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	e000      	b.n	800183c <ETH_SetMACConfig+0x1f0>
 800183a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800183c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001844:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001846:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800184e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001850:	4313      	orrs	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800185c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	430a      	orrs	r2, r1
 8001868:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	00048083 	.word	0x00048083
 800187c:	c0f88000 	.word	0xc0f88000
 8001880:	fffffef0 	.word	0xfffffef0

08001884 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b38      	ldr	r3, [pc, #224]	; (800197c <ETH_SetDMAConfig+0xf8>)
 800189a:	4013      	ands	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	6809      	ldr	r1, [r1, #0]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80018aa:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	791b      	ldrb	r3, [r3, #4]
 80018b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018b6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7b1b      	ldrb	r3, [r3, #12]
 80018bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	f241 0304 	movw	r3, #4100	; 0x1004
 80018ca:	4413      	add	r3, r2
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <ETH_SetDMAConfig+0xfc>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6811      	ldr	r1, [r2, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	431a      	orrs	r2, r3
 80018da:	f241 0304 	movw	r3, #4100	; 0x1004
 80018de:	440b      	add	r3, r1
 80018e0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7b5b      	ldrb	r3, [r3, #13]
 80018e6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <ETH_SetDMAConfig+0x100>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6811      	ldr	r1, [r2, #0]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	431a      	orrs	r2, r3
 8001906:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800190a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	7d1b      	ldrb	r3, [r3, #20]
 8001914:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001916:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7f5b      	ldrb	r3, [r3, #29]
 800191c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	f241 1304 	movw	r3, #4356	; 0x1104
 800192a:	4413      	add	r3, r2
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <ETH_SetDMAConfig+0x104>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6811      	ldr	r1, [r2, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	431a      	orrs	r2, r3
 800193a:	f241 1304 	movw	r3, #4356	; 0x1104
 800193e:	440b      	add	r3, r1
 8001940:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	7f1b      	ldrb	r3, [r3, #28]
 8001946:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800194c:	4313      	orrs	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f241 1308 	movw	r3, #4360	; 0x1108
 8001958:	4413      	add	r3, r2
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <ETH_SetDMAConfig+0x108>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6811      	ldr	r1, [r2, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	431a      	orrs	r2, r3
 8001968:	f241 1308 	movw	r3, #4360	; 0x1108
 800196c:	440b      	add	r3, r1
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	ffff87fd 	.word	0xffff87fd
 8001980:	ffff2ffe 	.word	0xffff2ffe
 8001984:	fffec000 	.word	0xfffec000
 8001988:	ffc0efef 	.word	0xffc0efef
 800198c:	7fc0ffff 	.word	0x7fc0ffff

08001990 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0a4      	sub	sp, #144	; 0x90
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800199e:	2300      	movs	r3, #0
 80019a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80019d8:	2300      	movs	r3, #0
 80019da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80019e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80019ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a12:	2300      	movs	r3, #0
 8001a14:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a3a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fde6 	bl	800164c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a84:	2301      	movs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001aa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001aa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001ab0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ab6:	f107 0308 	add.w	r3, r7, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fee1 	bl	8001884 <ETH_SetDMAConfig>
}
 8001ac2:	bf00      	nop
 8001ac4:	3790      	adds	r7, #144	; 0x90
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ae6:	f001 fbf1 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8001aea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d908      	bls.n	8001b06 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d804      	bhi.n	8001b06 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e027      	b.n	8001b56 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d908      	bls.n	8001b20 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d204      	bcs.n	8001b20 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	e01a      	b.n	8001b56 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d303      	bcc.n	8001b30 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d911      	bls.n	8001b54 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d908      	bls.n	8001b4a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d804      	bhi.n	8001b4a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e005      	b.n	8001b56 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	e000      	b.n	8001b56 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001b54:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	01312cff 	.word	0x01312cff
 8001b6c:	02160ebf 	.word	0x02160ebf
 8001b70:	03938700 	.word	0x03938700
 8001b74:	05f5e0ff 	.word	0x05f5e0ff
 8001b78:	08f0d17f 	.word	0x08f0d17f

08001b7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e01d      	b.n	8001bc6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68d9      	ldr	r1, [r3, #12]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	3206      	adds	r2, #6
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d9de      	bls.n	8001b8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	f241 132c 	movw	r3, #4396	; 0x112c
 8001bda:	4413      	add	r3, r2
 8001bdc:	2203      	movs	r2, #3
 8001bde:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68d9      	ldr	r1, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f241 1314 	movw	r3, #4372	; 0x1114
 8001bec:	4413      	add	r3, r2
 8001bee:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e024      	b.n	8001c62 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6919      	ldr	r1, [r3, #16]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	3310      	adds	r3, #16
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d9d7      	bls.n	8001c18 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	f241 1330 	movw	r3, #4400	; 0x1130
 8001c8e:	4413      	add	r3, r2
 8001c90:	2203      	movs	r2, #3
 8001c92:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6919      	ldr	r1, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f241 131c 	movw	r3, #4380	; 0x111c
 8001ca0:	4413      	add	r3, r2
 8001ca2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f241 1328 	movw	r3, #4392	; 0x1128
 8001cb4:	4413      	add	r3, r2
 8001cb6:	6019      	str	r1, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cd2:	4b89      	ldr	r3, [pc, #548]	; (8001ef8 <HAL_GPIO_Init+0x234>)
 8001cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cd6:	e194      	b.n	8002002 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	2101      	movs	r1, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 8186 	beq.w	8001ffc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d00b      	beq.n	8001d10 <HAL_GPIO_Init+0x4c>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d007      	beq.n	8001d10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d04:	2b11      	cmp	r3, #17
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d130      	bne.n	8001d72 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d46:	2201      	movs	r2, #1
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f003 0201 	and.w	r2, r3, #1
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0xee>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d123      	bne.n	8001dfa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	220f      	movs	r2, #15
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0203 	and.w	r2, r3, #3
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 80e0 	beq.w	8001ffc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3c:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x238>)
 8001e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e42:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <HAL_GPIO_Init+0x238>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_GPIO_Init+0x238>)
 8001e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <HAL_GPIO_Init+0x23c>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_GPIO_Init+0x240>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d052      	beq.n	8001f2c <HAL_GPIO_Init+0x268>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_GPIO_Init+0x244>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d031      	beq.n	8001ef2 <HAL_GPIO_Init+0x22e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	; (8001f0c <HAL_GPIO_Init+0x248>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02b      	beq.n	8001eee <HAL_GPIO_Init+0x22a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x24c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d025      	beq.n	8001eea <HAL_GPIO_Init+0x226>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_GPIO_Init+0x250>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_GPIO_Init+0x222>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1b      	ldr	r2, [pc, #108]	; (8001f18 <HAL_GPIO_Init+0x254>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_GPIO_Init+0x21e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1a      	ldr	r2, [pc, #104]	; (8001f1c <HAL_GPIO_Init+0x258>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d013      	beq.n	8001ede <HAL_GPIO_Init+0x21a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_GPIO_Init+0x25c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <HAL_GPIO_Init+0x216>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	; (8001f24 <HAL_GPIO_Init+0x260>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x212>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a17      	ldr	r2, [pc, #92]	; (8001f28 <HAL_GPIO_Init+0x264>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GPIO_Init+0x20e>
 8001ece:	2309      	movs	r3, #9
 8001ed0:	e02d      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	e02b      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e029      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001eda:	2307      	movs	r3, #7
 8001edc:	e027      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e025      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	e023      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	e021      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001eea:	2303      	movs	r3, #3
 8001eec:	e01f      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e01d      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e01b      	b.n	8001f2e <HAL_GPIO_Init+0x26a>
 8001ef6:	bf00      	nop
 8001ef8:	58000080 	.word	0x58000080
 8001efc:	58024400 	.word	0x58024400
 8001f00:	58000400 	.word	0x58000400
 8001f04:	58020000 	.word	0x58020000
 8001f08:	58020400 	.word	0x58020400
 8001f0c:	58020800 	.word	0x58020800
 8001f10:	58020c00 	.word	0x58020c00
 8001f14:	58021000 	.word	0x58021000
 8001f18:	58021400 	.word	0x58021400
 8001f1c:	58021800 	.word	0x58021800
 8001f20:	58021c00 	.word	0x58021c00
 8001f24:	58022000 	.word	0x58022000
 8001f28:	58022400 	.word	0x58022400
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	f002 0203 	and.w	r2, r2, #3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4093      	lsls	r3, r2
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f3e:	4938      	ldr	r1, [pc, #224]	; (8002020 <HAL_GPIO_Init+0x35c>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3301      	adds	r3, #1
 8002000:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f ae63 	bne.w	8001cd8 <HAL_GPIO_Init+0x14>
  }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	3724      	adds	r7, #36	; 0x24
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	58000400 	.word	0x58000400

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002056:	b480      	push	{r7}
 8002058:	b085      	sub	sp, #20
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002068:	887a      	ldrh	r2, [r7, #2]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4013      	ands	r3, r2
 800206e:	041a      	lsls	r2, r3, #16
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	43d9      	mvns	r1, r3
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	400b      	ands	r3, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002094:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_HSEM_FastTake+0x2c>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3320      	adds	r3, #32
 800209a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <HAL_HSEM_FastTake+0x30>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	58026400 	.word	0x58026400
 80020bc:	80000300 	.word	0x80000300

080020c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80020ca:	4906      	ldr	r1, [pc, #24]	; (80020e4 <HAL_HSEM_Release+0x24>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	58026400 	.word	0x58026400

080020e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ea:	b08f      	sub	sp, #60	; 0x3c
 80020ec:	af0a      	add	r7, sp, #40	; 0x28
 80020ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e116      	b.n	8002328 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d106      	bne.n	800211a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe ff0b 	bl	8000f30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f004 f827 	bl	800618c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	687e      	ldr	r6, [r7, #4]
 8002146:	466d      	mov	r5, sp
 8002148:	f106 0410 	add.w	r4, r6, #16
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002154:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002158:	e885 0003 	stmia.w	r5, {r0, r1}
 800215c:	1d33      	adds	r3, r6, #4
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f003 ffa5 	bl	80060b0 <USB_CoreInit>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0d7      	b.n	8002328 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f004 f815 	bl	80061ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e04a      	b.n	8002220 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	333d      	adds	r3, #61	; 0x3d
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	333c      	adds	r3, #60	; 0x3c
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	b298      	uxth	r0, r3
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3342      	adds	r3, #66	; 0x42
 80021c6:	4602      	mov	r2, r0
 80021c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	333f      	adds	r3, #63	; 0x3f
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3344      	adds	r3, #68	; 0x44
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3348      	adds	r3, #72	; 0x48
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3350      	adds	r3, #80	; 0x50
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3301      	adds	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	7bfa      	ldrb	r2, [r7, #15]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3af      	bcc.n	800218a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
 800222e:	e044      	b.n	80022ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002258:	7bfa      	ldrb	r2, [r7, #15]
 800225a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	3301      	adds	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d3b5      	bcc.n	8002230 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	687e      	ldr	r6, [r7, #4]
 80022cc:	466d      	mov	r5, sp
 80022ce:	f106 0410 	add.w	r4, r6, #16
 80022d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022de:	e885 0003 	stmia.w	r5, {r0, r1}
 80022e2:	1d33      	adds	r3, r6, #4
 80022e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022e6:	6838      	ldr	r0, [r7, #0]
 80022e8:	f003 ff8c 	bl	8006204 <USB_DevInit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2202      	movs	r2, #2
 80022f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e014      	b.n	8002328 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b01      	cmp	r3, #1
 8002314:	d102      	bne.n	800231c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f80a 	bl	8002330 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f004 f92e 	bl	8006582 <USB_DevDisconnect>

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002330 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_PCDEx_ActivateLPM+0x44>)
 8002360:	4313      	orrs	r3, r2
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	10000003 	.word	0x10000003

08002378 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <HAL_PWREx_ConfigSupply+0xb0>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	2b06      	cmp	r3, #6
 800238a:	d00a      	beq.n	80023a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_PWREx_ConfigSupply+0xb0>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d001      	beq.n	800239e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e040      	b.n	8002420 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	e03e      	b.n	8002420 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023a2:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_PWREx_ConfigSupply+0xb0>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80023aa:	491f      	ldr	r1, [pc, #124]	; (8002428 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023b2:	f7fe ff41 	bl	8001238 <HAL_GetTick>
 80023b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023b8:	e009      	b.n	80023ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023ba:	f7fe ff3d 	bl	8001238 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c8:	d901      	bls.n	80023ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e028      	b.n	8002420 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_PWREx_ConfigSupply+0xb0>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023da:	d1ee      	bne.n	80023ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b1e      	cmp	r3, #30
 80023e0:	d008      	beq.n	80023f4 <HAL_PWREx_ConfigSupply+0x7c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b2e      	cmp	r3, #46	; 0x2e
 80023e6:	d005      	beq.n	80023f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b1d      	cmp	r3, #29
 80023ec:	d002      	beq.n	80023f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b2d      	cmp	r3, #45	; 0x2d
 80023f2:	d114      	bne.n	800241e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80023f4:	f7fe ff20 	bl	8001238 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023fa:	e009      	b.n	8002410 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023fc:	f7fe ff1c 	bl	8001238 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800240a:	d901      	bls.n	8002410 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e007      	b.n	8002420 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <HAL_PWREx_ConfigSupply+0xb0>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d1ee      	bne.n	80023fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	58024800 	.word	0x58024800

0800242c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243a:	60d3      	str	r3, [r2, #12]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	58024800 	.word	0x58024800

0800244c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e3ff      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8087 	beq.w	800257a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800246c:	4b99      	ldr	r3, [pc, #612]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002476:	4b97      	ldr	r3, [pc, #604]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	2b10      	cmp	r3, #16
 8002480:	d007      	beq.n	8002492 <HAL_RCC_OscConfig+0x46>
 8002482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002484:	2b18      	cmp	r3, #24
 8002486:	d110      	bne.n	80024aa <HAL_RCC_OscConfig+0x5e>
 8002488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d10b      	bne.n	80024aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002492:	4b90      	ldr	r3, [pc, #576]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d06c      	beq.n	8002578 <HAL_RCC_OscConfig+0x12c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d168      	bne.n	8002578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e3d9      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b2:	d106      	bne.n	80024c2 <HAL_RCC_OscConfig+0x76>
 80024b4:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a86      	ldr	r2, [pc, #536]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	e02e      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0x98>
 80024ca:	4b82      	ldr	r3, [pc, #520]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a81      	ldr	r2, [pc, #516]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e01d      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCC_OscConfig+0xbc>
 80024ee:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a78      	ldr	r2, [pc, #480]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a75      	ldr	r2, [pc, #468]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e00b      	b.n	8002520 <HAL_RCC_OscConfig+0xd4>
 8002508:	4b72      	ldr	r3, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a71      	ldr	r2, [pc, #452]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7fe fe86 	bl	8001238 <HAL_GetTick>
 800252c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002530:	f7fe fe82 	bl	8001238 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b64      	cmp	r3, #100	; 0x64
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e38d      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002542:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0xe4>
 800254e:	e014      	b.n	800257a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fe72 	bl	8001238 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002558:	f7fe fe6e 	bl	8001238 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b64      	cmp	r3, #100	; 0x64
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e379      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256a:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x10c>
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80ae 	beq.w	80026e4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002590:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002592:	4b50      	ldr	r3, [pc, #320]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_RCC_OscConfig+0x162>
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	2b18      	cmp	r3, #24
 80025a2:	d13a      	bne.n	800261a <HAL_RCC_OscConfig+0x1ce>
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d135      	bne.n	800261a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ae:	4b49      	ldr	r3, [pc, #292]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x17a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e34b      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	f7fe fe67 	bl	8001298 <HAL_GetREVID>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d817      	bhi.n	8002604 <HAL_RCC_OscConfig+0x1b8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d108      	bne.n	80025ee <HAL_RCC_OscConfig+0x1a2>
 80025dc:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025e4:	4a3b      	ldr	r2, [pc, #236]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80025e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ec:	e07a      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b39      	ldr	r3, [pc, #228]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	031b      	lsls	r3, r3, #12
 80025fc:	4935      	ldr	r1, [pc, #212]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002602:	e06f      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	4930      	ldr	r1, [pc, #192]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	e064      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d045      	beq.n	80026ae <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002622:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0219 	bic.w	r2, r3, #25
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4929      	ldr	r1, [pc, #164]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fe00 	bl	8001238 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe fdfc 	bl	8001238 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e307      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	f7fe fe1d 	bl	8001298 <HAL_GetREVID>
 800265e:	4603      	mov	r3, r0
 8002660:	f241 0203 	movw	r2, #4099	; 0x1003
 8002664:	4293      	cmp	r3, r2
 8002666:	d817      	bhi.n	8002698 <HAL_RCC_OscConfig+0x24c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d108      	bne.n	8002682 <HAL_RCC_OscConfig+0x236>
 8002670:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800267a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267e:	6053      	str	r3, [r2, #4]
 8002680:	e030      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	4910      	ldr	r1, [pc, #64]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
 8002696:	e025      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	490b      	ldr	r1, [pc, #44]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
 80026ac:	e01a      	b.n	80026e4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_RCC_OscConfig+0x288>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fdbd 	bl	8001238 <HAL_GetTick>
 80026be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c2:	f7fe fdb9 	bl	8001238 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d903      	bls.n	80026d8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e2c4      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
 80026d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026d8:	4ba4      	ldr	r3, [pc, #656]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ee      	bne.n	80026c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a9 	beq.w	8002844 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f2:	4b9e      	ldr	r3, [pc, #632]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026fc:	4b9b      	ldr	r3, [pc, #620]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d007      	beq.n	8002718 <HAL_RCC_OscConfig+0x2cc>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b18      	cmp	r3, #24
 800270c:	d13a      	bne.n	8002784 <HAL_RCC_OscConfig+0x338>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b01      	cmp	r3, #1
 8002716:	d135      	bne.n	8002784 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002718:	4b94      	ldr	r3, [pc, #592]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_OscConfig+0x2e4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e296      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002730:	f7fe fdb2 	bl	8001298 <HAL_GetREVID>
 8002734:	4603      	mov	r3, r0
 8002736:	f241 0203 	movw	r2, #4099	; 0x1003
 800273a:	4293      	cmp	r3, r2
 800273c:	d817      	bhi.n	800276e <HAL_RCC_OscConfig+0x322>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	2b20      	cmp	r3, #32
 8002744:	d108      	bne.n	8002758 <HAL_RCC_OscConfig+0x30c>
 8002746:	4b89      	ldr	r3, [pc, #548]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800274e:	4a87      	ldr	r2, [pc, #540]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002750:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002754:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002756:	e075      	b.n	8002844 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002758:	4b84      	ldr	r3, [pc, #528]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	069b      	lsls	r3, r3, #26
 8002766:	4981      	ldr	r1, [pc, #516]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800276c:	e06a      	b.n	8002844 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	497b      	ldr	r1, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800277e:	4313      	orrs	r3, r2
 8002780:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002782:	e05f      	b.n	8002844 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d042      	beq.n	8002812 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800278c:	4b77      	ldr	r3, [pc, #476]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a76      	ldr	r2, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fd4e 	bl	8001238 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027a0:	f7fe fd4a 	bl	8001238 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e255      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027be:	f7fe fd6b 	bl	8001298 <HAL_GetREVID>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d817      	bhi.n	80027fc <HAL_RCC_OscConfig+0x3b0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	2b20      	cmp	r3, #32
 80027d2:	d108      	bne.n	80027e6 <HAL_RCC_OscConfig+0x39a>
 80027d4:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027dc:	4a63      	ldr	r2, [pc, #396]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80027de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e2:	6053      	str	r3, [r2, #4]
 80027e4:	e02e      	b.n	8002844 <HAL_RCC_OscConfig+0x3f8>
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	069b      	lsls	r3, r3, #26
 80027f4:	495d      	ldr	r1, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
 80027fa:	e023      	b.n	8002844 <HAL_RCC_OscConfig+0x3f8>
 80027fc:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	4958      	ldr	r1, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
 8002810:	e018      	b.n	8002844 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002812:	4b56      	ldr	r3, [pc, #344]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a55      	ldr	r2, [pc, #340]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fd0b 	bl	8001238 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002826:	f7fe fd07 	bl	8001238 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e212      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002838:	4b4c      	ldr	r3, [pc, #304]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d036      	beq.n	80028be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d019      	beq.n	800288c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002858:	4b44      	ldr	r3, [pc, #272]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	4a43      	ldr	r2, [pc, #268]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7fe fce8 	bl	8001238 <HAL_GetTick>
 8002868:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe fce4 	bl	8001238 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1ef      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x420>
 800288a:	e018      	b.n	80028be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002890:	4a36      	ldr	r2, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002898:	f7fe fcce 	bl	8001238 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe fcca 	bl	8001238 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1d5      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028b2:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0320 	and.w	r3, r3, #32
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d036      	beq.n	8002938 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d019      	beq.n	8002906 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a25      	ldr	r2, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80028d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028de:	f7fe fcab 	bl	8001238 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028e6:	f7fe fca7 	bl	8001238 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1b2      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028f8:	4b1c      	ldr	r3, [pc, #112]	; (800296c <HAL_RCC_OscConfig+0x520>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x49a>
 8002904:	e018      	b.n	8002938 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002906:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_OscConfig+0x520>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a18      	ldr	r2, [pc, #96]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800290c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002910:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002912:	f7fe fc91 	bl	8001238 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800291a:	f7fe fc8d 	bl	8001238 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e198      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_RCC_OscConfig+0x520>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8085 	beq.w	8002a50 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_RCC_OscConfig+0x524>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_OscConfig+0x524>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002952:	f7fe fc71 	bl	8001238 <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002958:	e00c      	b.n	8002974 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe fc6d 	bl	8001238 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d905      	bls.n	8002974 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e178      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
 800296c:	58024400 	.word	0x58024400
 8002970:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002974:	4b96      	ldr	r3, [pc, #600]	; (8002bd0 <HAL_RCC_OscConfig+0x784>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ec      	beq.n	800295a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x54a>
 8002988:	4b92      	ldr	r3, [pc, #584]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a91      	ldr	r2, [pc, #580]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	e02d      	b.n	80029f2 <HAL_RCC_OscConfig+0x5a6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x56c>
 800299e:	4b8d      	ldr	r3, [pc, #564]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a8c      	ldr	r2, [pc, #560]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a89      	ldr	r2, [pc, #548]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	e01c      	b.n	80029f2 <HAL_RCC_OscConfig+0x5a6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d10c      	bne.n	80029da <HAL_RCC_OscConfig+0x58e>
 80029c0:	4b84      	ldr	r3, [pc, #528]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a83      	ldr	r2, [pc, #524]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029c6:	f043 0304 	orr.w	r3, r3, #4
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a80      	ldr	r2, [pc, #512]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
 80029d8:	e00b      	b.n	80029f2 <HAL_RCC_OscConfig+0x5a6>
 80029da:	4b7e      	ldr	r3, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a7d      	ldr	r2, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	4a7a      	ldr	r2, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fa:	f7fe fc1d 	bl	8001238 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fc19 	bl	8001238 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e122      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a18:	4b6e      	ldr	r3, [pc, #440]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ee      	beq.n	8002a02 <HAL_RCC_OscConfig+0x5b6>
 8002a24:	e014      	b.n	8002a50 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7fe fc07 	bl	8001238 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe fc03 	bl	8001238 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e10c      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a44:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8101 	beq.w	8002c5c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a5a:	4b5e      	ldr	r3, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a62:	2b18      	cmp	r3, #24
 8002a64:	f000 80bc 	beq.w	8002be0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	f040 8095 	bne.w	8002b9c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fbdb 	bl	8001238 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fbd7 	bl	8001238 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e0e2      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a98:	4b4e      	ldr	r3, [pc, #312]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1f0      	bne.n	8002a86 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <HAL_RCC_OscConfig+0x78c>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	4946      	ldr	r1, [pc, #280]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	628b      	str	r3, [r1, #40]	; 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	3b01      	subs	r3, #1
 8002ace:	025b      	lsls	r3, r3, #9
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	041b      	lsls	r3, r3, #16
 8002adc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002aee:	4939      	ldr	r1, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002af4:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002afa:	f023 0301 	bic.w	r3, r3, #1
 8002afe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b00:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b04:	4b35      	ldr	r3, [pc, #212]	; (8002bdc <HAL_RCC_OscConfig+0x790>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b0c:	00d2      	lsls	r2, r2, #3
 8002b0e:	4931      	ldr	r1, [pc, #196]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f023 020c 	bic.w	r2, r3, #12
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	492c      	ldr	r1, [pc, #176]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f023 0202 	bic.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	4928      	ldr	r1, [pc, #160]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b38:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b50:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	4a1f      	ldr	r2, [pc, #124]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a19      	ldr	r2, [pc, #100]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb60 	bl	8001238 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fb5c 	bl	8001238 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e067      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x730>
 8002b9a:	e05f      	b.n	8002c5c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fb46 	bl	8001238 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe fb42 	bl	8001238 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e04d      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_RCC_OscConfig+0x788>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x764>
 8002bce:	e045      	b.n	8002c5c <HAL_RCC_OscConfig+0x810>
 8002bd0:	58024800 	.word	0x58024800
 8002bd4:	58024400 	.word	0x58024400
 8002bd8:	fffffc0c 	.word	0xfffffc0c
 8002bdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0x81c>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x81c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d031      	beq.n	8002c58 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d12a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d122      	bne.n	8002c58 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d11a      	bne.n	8002c58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d111      	bne.n	8002c58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c52:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3730      	adds	r7, #48	; 0x30
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400

08002c6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e19c      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c80:	4b8a      	ldr	r3, [pc, #552]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d910      	bls.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b87      	ldr	r3, [pc, #540]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 020f 	bic.w	r2, r3, #15
 8002c96:	4985      	ldr	r1, [pc, #532]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b83      	ldr	r3, [pc, #524]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e184      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d010      	beq.n	8002cde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691a      	ldr	r2, [r3, #16]
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d908      	bls.n	8002cde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ccc:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	4975      	ldr	r1, [pc, #468]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d908      	bls.n	8002d0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cfa:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	496a      	ldr	r1, [pc, #424]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699a      	ldr	r2, [r3, #24]
 8002d1c:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d908      	bls.n	8002d3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d28:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	495e      	ldr	r1, [pc, #376]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d010      	beq.n	8002d68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d908      	bls.n	8002d68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	4953      	ldr	r1, [pc, #332]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d010      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d908      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	f023 020f 	bic.w	r2, r3, #15
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	4947      	ldr	r1, [pc, #284]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d055      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4940      	ldr	r1, [pc, #256]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d107      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dbc:	4b3c      	ldr	r3, [pc, #240]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d121      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0f6      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d115      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0ea      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dec:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0de      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfc:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0d6      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f023 0207 	bic.w	r2, r3, #7
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4925      	ldr	r1, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fa0b 	bl	8001238 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e26:	f7fe fa07 	bl	8001238 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0be      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d1eb      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d010      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d208      	bcs.n	8002e7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f023 020f 	bic.w	r2, r3, #15
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	490e      	ldr	r1, [pc, #56]	; (8002eb0 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d214      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4906      	ldr	r1, [pc, #24]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e086      	b.n	8002fba <HAL_RCC_ClockConfig+0x34e>
 8002eac:	52002000 	.word	0x52002000
 8002eb0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d208      	bcs.n	8002ee2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ed0:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4939      	ldr	r1, [pc, #228]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d010      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d208      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	492e      	ldr	r1, [pc, #184]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d010      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d208      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4922      	ldr	r1, [pc, #136]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d208      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f5a:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4917      	ldr	r1, [pc, #92]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f6c:	f000 f834 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	4912      	ldr	r1, [pc, #72]	; (8002fc8 <HAL_RCC_ClockConfig+0x35c>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a0d      	ldr	r2, [pc, #52]	; (8002fc8 <HAL_RCC_ClockConfig+0x35c>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_RCC_ClockConfig+0x360>)
 8002fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x364>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x368>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f846 	bl	8001040 <HAL_InitTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	08007bb4 	.word	0x08007bb4
 8002fcc:	24000004 	.word	0x24000004
 8002fd0:	24000000 	.word	0x24000000
 8002fd4:	24000008 	.word	0x24000008

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fde:	4bb3      	ldr	r3, [pc, #716]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe6:	2b18      	cmp	r3, #24
 8002fe8:	f200 8155 	bhi.w	8003296 <HAL_RCC_GetSysClockFreq+0x2be>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003059 	.word	0x08003059
 8002ff8:	08003297 	.word	0x08003297
 8002ffc:	08003297 	.word	0x08003297
 8003000:	08003297 	.word	0x08003297
 8003004:	08003297 	.word	0x08003297
 8003008:	08003297 	.word	0x08003297
 800300c:	08003297 	.word	0x08003297
 8003010:	08003297 	.word	0x08003297
 8003014:	0800307f 	.word	0x0800307f
 8003018:	08003297 	.word	0x08003297
 800301c:	08003297 	.word	0x08003297
 8003020:	08003297 	.word	0x08003297
 8003024:	08003297 	.word	0x08003297
 8003028:	08003297 	.word	0x08003297
 800302c:	08003297 	.word	0x08003297
 8003030:	08003297 	.word	0x08003297
 8003034:	08003085 	.word	0x08003085
 8003038:	08003297 	.word	0x08003297
 800303c:	08003297 	.word	0x08003297
 8003040:	08003297 	.word	0x08003297
 8003044:	08003297 	.word	0x08003297
 8003048:	08003297 	.word	0x08003297
 800304c:	08003297 	.word	0x08003297
 8003050:	08003297 	.word	0x08003297
 8003054:	0800308b 	.word	0x0800308b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003058:	4b94      	ldr	r3, [pc, #592]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d009      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003064:	4b91      	ldr	r3, [pc, #580]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	4a90      	ldr	r2, [pc, #576]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003076:	e111      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003078:	4b8d      	ldr	r3, [pc, #564]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800307a:	61bb      	str	r3, [r7, #24]
    break;
 800307c:	e10e      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800307e:	4b8d      	ldr	r3, [pc, #564]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003080:	61bb      	str	r3, [r7, #24]
    break;
 8003082:	e10b      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003084:	4b8c      	ldr	r3, [pc, #560]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003086:	61bb      	str	r3, [r7, #24]
    break;
 8003088:	e108      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800308a:	4b88      	ldr	r3, [pc, #544]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003094:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800309e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030a0:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030aa:	4b80      	ldr	r3, [pc, #512]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ae:	08db      	lsrs	r3, r3, #3
 80030b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80e1 	beq.w	8003290 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f000 8083 	beq.w	80031dc <HAL_RCC_GetSysClockFreq+0x204>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	f200 80a1 	bhi.w	8003220 <HAL_RCC_GetSysClockFreq+0x248>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x114>
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d056      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030ea:	e099      	b.n	8003220 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030ec:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d02d      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	4a6b      	ldr	r2, [pc, #428]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800311e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003122:	4b62      	ldr	r3, [pc, #392]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003132:	ed97 6a02 	vldr	s12, [r7, #8]
 8003136:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800313a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003152:	e087      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003166:	4b51      	ldr	r3, [pc, #324]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003176:	ed97 6a02 	vldr	s12, [r7, #8]
 800317a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800317e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800318a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003196:	e065      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	ee07 3a90 	vmov	s15, r3
 800319e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80031be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031da:	e043      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ee:	4b2f      	ldr	r3, [pc, #188]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003202:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800321e:	e021      	b.n	8003264 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	ee07 3a90 	vmov	s15, r3
 8003226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800322e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003232:	4b1e      	ldr	r3, [pc, #120]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003242:	ed97 6a02 	vldr	s12, [r7, #8]
 8003246:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800324a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800324e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003262:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003268:	0a5b      	lsrs	r3, r3, #9
 800326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800326e:	3301      	adds	r3, #1
 8003270:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	ee07 3a90 	vmov	s15, r3
 8003278:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800327c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003288:	ee17 3a90 	vmov	r3, s15
 800328c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800328e:	e005      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
    break;
 8003294:	e002      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003298:	61bb      	str	r3, [r7, #24]
    break;
 800329a:	bf00      	nop
  }

  return sysclockfreq;
 800329c:	69bb      	ldr	r3, [r7, #24]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	03d09000 	.word	0x03d09000
 80032b4:	003d0900 	.word	0x003d0900
 80032b8:	007a1200 	.word	0x007a1200
 80032bc:	46000000 	.word	0x46000000
 80032c0:	4c742400 	.word	0x4c742400
 80032c4:	4a742400 	.word	0x4a742400
 80032c8:	4af42400 	.word	0x4af42400

080032cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032d2:	f7ff fe81 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_GetHCLKFreq+0x50>)
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490f      	ldr	r1, [pc, #60]	; (8003320 <HAL_RCC_GetHCLKFreq+0x54>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_GetHCLKFreq+0x50>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_GetHCLKFreq+0x54>)
 80032fa:	5cd3      	ldrb	r3, [r2, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	fa22 f303 	lsr.w	r3, r2, r3
 8003306:	4a07      	ldr	r2, [pc, #28]	; (8003324 <HAL_RCC_GetHCLKFreq+0x58>)
 8003308:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_RCC_GetHCLKFreq+0x5c>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_RCC_GetHCLKFreq+0x58>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	58024400 	.word	0x58024400
 8003320:	08007bb4 	.word	0x08007bb4
 8003324:	24000004 	.word	0x24000004
 8003328:	24000000 	.word	0x24000000

0800332c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003330:	f7ff ffcc 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	4904      	ldr	r1, [pc, #16]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	58024400 	.word	0x58024400
 8003354:	08007bb4 	.word	0x08007bb4

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800335c:	f7ff ffb6 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	0a1b      	lsrs	r3, r3, #8
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4904      	ldr	r1, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	58024400 	.word	0x58024400
 8003380:	08007bb4 	.word	0x08007bb4

08003384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223f      	movs	r2, #63	; 0x3f
 8003392:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003394:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0207 	and.w	r2, r3, #7
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033b8:	4b11      	ldr	r3, [pc, #68]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_RCC_GetClockConfig+0x7c>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetClockConfig+0x80>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	601a      	str	r2, [r3, #0]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	58024400 	.word	0x58024400
 8003404:	52002000 	.word	0x52002000

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003410:	2300      	movs	r3, #0
 8003412:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003414:	2300      	movs	r3, #0
 8003416:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d03f      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003428:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342c:	d02a      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800342e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003432:	d824      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003434:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003438:	d018      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800343a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343e:	d81e      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003448:	d007      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800344a:	e018      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4bab      	ldr	r3, [pc, #684]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4aaa      	ldr	r2, [pc, #680]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003458:	e015      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f001 f9cf 	bl	8004804 <RCCEx_PLL2_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800346a:	e00c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	2102      	movs	r1, #2
 8003472:	4618      	mov	r0, r3
 8003474:	f001 fa78 	bl	8004968 <RCCEx_PLL3_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800347c:	e003      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	75fb      	strb	r3, [r7, #23]
      break;
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800348c:	4b9b      	ldr	r3, [pc, #620]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800348e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003498:	4998      	ldr	r1, [pc, #608]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	650b      	str	r3, [r1, #80]	; 0x50
 800349e:	e001      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03d      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d826      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034d5 	.word	0x080034d5
 80034c4:	080034e3 	.word	0x080034e3
 80034c8:	080034f5 	.word	0x080034f5
 80034cc:	0800350d 	.word	0x0800350d
 80034d0:	0800350d 	.word	0x0800350d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d4:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a88      	ldr	r2, [pc, #544]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034e0:	e015      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f98b 	bl	8004804 <RCCEx_PLL2_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3324      	adds	r3, #36	; 0x24
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 fa34 	bl	8004968 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
      break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003514:	4b79      	ldr	r3, [pc, #484]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003518:	f023 0207 	bic.w	r2, r3, #7
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	4976      	ldr	r1, [pc, #472]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	650b      	str	r3, [r1, #80]	; 0x50
 8003526:	e001      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003534:	2b00      	cmp	r3, #0
 8003536:	d042      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003540:	d02b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003546:	d825      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003548:	2bc0      	cmp	r3, #192	; 0xc0
 800354a:	d028      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800354c:	2bc0      	cmp	r3, #192	; 0xc0
 800354e:	d821      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d016      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d81d      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d007      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003560:	e018      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003562:	4b66      	ldr	r3, [pc, #408]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	4a65      	ldr	r2, [pc, #404]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800356e:	e017      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f944 	bl	8004804 <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003580:	e00e      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3324      	adds	r3, #36	; 0x24
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f001 f9ed 	bl	8004968 <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003592:	e005      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
      break;
 8003598:	e002      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800359e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035a6:	4b55      	ldr	r3, [pc, #340]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b2:	4952      	ldr	r1, [pc, #328]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	650b      	str	r3, [r1, #80]	; 0x50
 80035b8:	e001      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d049      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035d4:	d030      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035da:	d82a      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035e0:	d02c      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035e6:	d824      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ec:	d018      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80035ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f2:	d81e      	bhi.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80035f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fc:	d007      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035fe:	e018      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003600:	4b3e      	ldr	r3, [pc, #248]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800360c:	e017      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 f8f5 	bl	8004804 <RCCEx_PLL2_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800361e:	e00e      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3324      	adds	r3, #36	; 0x24
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f001 f99e 	bl	8004968 <RCCEx_PLL3_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003630:	e005      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	75fb      	strb	r3, [r7, #23]
      break;
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800363c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800363e:	7dfb      	ldrb	r3, [r7, #23]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003648:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003652:	492a      	ldr	r1, [pc, #168]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	658b      	str	r3, [r1, #88]	; 0x58
 8003658:	e001      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04c      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003670:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003674:	d030      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800367a:	d82a      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800367c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003680:	d02c      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003686:	d824      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800368c:	d018      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800368e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003692:	d81e      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d007      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800369e:	e018      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ac:	e017      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f8a5 	bl	8004804 <RCCEx_PLL2_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036be:	e00e      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3324      	adds	r3, #36	; 0x24
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f94e 	bl	8004968 <RCCEx_PLL3_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d0:	e005      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
      break;
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036f2:	4902      	ldr	r1, [pc, #8]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	658b      	str	r3, [r1, #88]	; 0x58
 80036f8:	e004      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80036fa:	bf00      	nop
 80036fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d032      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	d01c      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003718:	2b30      	cmp	r3, #48	; 0x30
 800371a:	d817      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d00c      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d813      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d016      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003728:	2b10      	cmp	r3, #16
 800372a:	d10f      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4baf      	ldr	r3, [pc, #700]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4aae      	ldr	r2, [pc, #696]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003738:	e00e      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2102      	movs	r1, #2
 8003740:	4618      	mov	r0, r3
 8003742:	f001 f85f 	bl	8004804 <RCCEx_PLL2_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800374a:	e005      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
      break;
 8003750:	e002      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800375e:	4ba3      	ldr	r3, [pc, #652]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800376a:	49a0      	ldr	r1, [pc, #640]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800376c:	4313      	orrs	r3, r2
 800376e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003770:	e001      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d047      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800378a:	d030      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800378c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003790:	d82a      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003796:	d02c      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003798:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800379c:	d824      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a2:	d018      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80037a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a8:	d81e      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	d007      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037b4:	e018      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b6:	4b8d      	ldr	r3, [pc, #564]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	4a8c      	ldr	r2, [pc, #560]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037c2:	e017      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f81a 	bl	8004804 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d4:	e00e      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3324      	adds	r3, #36	; 0x24
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 f8c3 	bl	8004968 <RCCEx_PLL3_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037e6:	e005      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
      break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80037f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037fa:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	4979      	ldr	r1, [pc, #484]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	650b      	str	r3, [r1, #80]	; 0x50
 800380c:	e001      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d049      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003826:	d02e      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800382c:	d828      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800382e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003832:	d02a      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003838:	d822      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800383a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800383e:	d026      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003844:	d81c      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800384a:	d010      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800384c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003850:	d816      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01d      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d111      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f000 ffce 	bl	8004804 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800386c:	e012      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3324      	adds	r3, #36	; 0x24
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f001 f877 	bl	8004968 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800387e:	e009      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
      break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003886:	bf00      	nop
 8003888:	e004      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800388a:	bf00      	nop
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800389a:	4b54      	ldr	r3, [pc, #336]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800389c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a6:	4951      	ldr	r1, [pc, #324]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	650b      	str	r3, [r1, #80]	; 0x50
 80038ac:	e001      	b.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c8:	d02e      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80038ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ce:	d828      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d02a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80038d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038da:	d822      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038e0:	d026      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80038e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038e6:	d81c      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ec:	d010      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80038ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f2:	d816      	bhi.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01d      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80038f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fc:	d111      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	2101      	movs	r1, #1
 8003904:	4618      	mov	r0, r3
 8003906:	f000 ff7d 	bl	8004804 <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800390e:	e012      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3324      	adds	r3, #36	; 0x24
 8003914:	2101      	movs	r1, #1
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f826 	bl	8004968 <RCCEx_PLL3_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003920:	e009      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
      break;
 8003926:	e006      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003928:	bf00      	nop
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800392c:	bf00      	nop
 800392e:	e002      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800394a:	4928      	ldr	r1, [pc, #160]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	658b      	str	r3, [r1, #88]	; 0x58
 8003950:	e001      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d02f      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396a:	d00e      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d814      	bhi.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d015      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397a:	d10f      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397c:	4b1b      	ldr	r3, [pc, #108]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4a1a      	ldr	r2, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003986:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003988:	e00c      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f000 ff37 	bl	8004804 <RCCEx_PLL2_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800399a:	e003      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
      break;
 80039a0:	e000      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80039a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b6:	490d      	ldr	r1, [pc, #52]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	650b      	str	r3, [r1, #80]	; 0x50
 80039bc:	e001      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d033      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d81c      	bhi.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a17 	.word	0x08003a17
 80039e0:	080039f1 	.word	0x080039f1
 80039e4:	080039ff 	.word	0x080039ff
 80039e8:	08003a17 	.word	0x08003a17
 80039ec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4bb8      	ldr	r3, [pc, #736]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	4ab7      	ldr	r2, [pc, #732]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039fc:	e00c      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2102      	movs	r1, #2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fefd 	bl	8004804 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	75fb      	strb	r3, [r7, #23]
      break;
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a1e:	4bad      	ldr	r3, [pc, #692]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	49aa      	ldr	r1, [pc, #680]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a30:	e001      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8086 	beq.w	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a44:	4ba4      	ldr	r3, [pc, #656]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4aa3      	ldr	r2, [pc, #652]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a50:	f7fd fbf2 	bl	8001238 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a56:	e009      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fd fbee 	bl	8001238 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d902      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	75fb      	strb	r3, [r7, #23]
        break;
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6c:	4b9a      	ldr	r3, [pc, #616]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d166      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a7e:	4b95      	ldr	r3, [pc, #596]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a88:	4053      	eors	r3, r2
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a92:	4b90      	ldr	r3, [pc, #576]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a9c:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a8c      	ldr	r2, [pc, #560]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa8:	4b8a      	ldr	r3, [pc, #552]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a89      	ldr	r2, [pc, #548]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ab4:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fbb7 	bl	8001238 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd fbb3 	bl	8001238 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ae4:	e005      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae6:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ed      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d126      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b08:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b16:	0919      	lsrs	r1, r3, #4
 8003b18:	4b70      	ldr	r3, [pc, #448]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	496d      	ldr	r1, [pc, #436]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]
 8003b22:	e005      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b24:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b2e:	6113      	str	r3, [r2, #16]
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	4965      	ldr	r1, [pc, #404]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	670b      	str	r3, [r1, #112]	; 0x70
 8003b44:	e004      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	75bb      	strb	r3, [r7, #22]
 8003b4a:	e001      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d07e      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b60:	2b28      	cmp	r3, #40	; 0x28
 8003b62:	d867      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003c3b 	.word	0x08003c3b
 8003b70:	08003c35 	.word	0x08003c35
 8003b74:	08003c35 	.word	0x08003c35
 8003b78:	08003c35 	.word	0x08003c35
 8003b7c:	08003c35 	.word	0x08003c35
 8003b80:	08003c35 	.word	0x08003c35
 8003b84:	08003c35 	.word	0x08003c35
 8003b88:	08003c35 	.word	0x08003c35
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003c35 	.word	0x08003c35
 8003b94:	08003c35 	.word	0x08003c35
 8003b98:	08003c35 	.word	0x08003c35
 8003b9c:	08003c35 	.word	0x08003c35
 8003ba0:	08003c35 	.word	0x08003c35
 8003ba4:	08003c35 	.word	0x08003c35
 8003ba8:	08003c35 	.word	0x08003c35
 8003bac:	08003c23 	.word	0x08003c23
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c35 	.word	0x08003c35
 8003bb8:	08003c35 	.word	0x08003c35
 8003bbc:	08003c35 	.word	0x08003c35
 8003bc0:	08003c35 	.word	0x08003c35
 8003bc4:	08003c35 	.word	0x08003c35
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003c3b 	.word	0x08003c3b
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003c35 	.word	0x08003c35
 8003bd8:	08003c35 	.word	0x08003c35
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003c35 	.word	0x08003c35
 8003be8:	08003c35 	.word	0x08003c35
 8003bec:	08003c3b 	.word	0x08003c3b
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c35 	.word	0x08003c35
 8003bf8:	08003c35 	.word	0x08003c35
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c35 	.word	0x08003c35
 8003c08:	08003c35 	.word	0x08003c35
 8003c0c:	08003c3b 	.word	0x08003c3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	2101      	movs	r1, #1
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fdf4 	bl	8004804 <RCCEx_PLL2_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c20:	e00c      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3324      	adds	r3, #36	; 0x24
 8003c26:	2101      	movs	r1, #1
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fe9d 	bl	8004968 <RCCEx_PLL3_Config>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c32:	e003      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	75fb      	strb	r3, [r7, #23]
      break;
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	4921      	ldr	r1, [pc, #132]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	654b      	str	r3, [r1, #84]	; 0x54
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03e      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d820      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003cb7 	.word	0x08003cb7
 8003c78:	08003c8d 	.word	0x08003c8d
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003cb7 	.word	0x08003cb7
 8003c84:	08003cb7 	.word	0x08003cb7
 8003c88:	08003cb7 	.word	0x08003cb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2101      	movs	r1, #1
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fdb6 	bl	8004804 <RCCEx_PLL2_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c9c:	e00c      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3324      	adds	r3, #36	; 0x24
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fe5f 	bl	8004968 <RCCEx_PLL3_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cae:	e003      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d110      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f023 0207 	bic.w	r2, r3, #7
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	4902      	ldr	r1, [pc, #8]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	654b      	str	r3, [r1, #84]	; 0x54
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	58024800 	.word	0x58024800
 8003cdc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d039      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d820      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d43 	.word	0x08003d43
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d2b 	.word	0x08003d2b
 8003d0c:	08003d43 	.word	0x08003d43
 8003d10:	08003d43 	.word	0x08003d43
 8003d14:	08003d43 	.word	0x08003d43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fd70 	bl	8004804 <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d28:	e00c      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3324      	adds	r3, #36	; 0x24
 8003d2e:	2101      	movs	r1, #1
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fe19 	bl	8004968 <RCCEx_PLL3_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e000      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d4a:	4bb7      	ldr	r3, [pc, #732]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4e:	f023 0207 	bic.w	r2, r3, #7
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	49b3      	ldr	r1, [pc, #716]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d04b      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d7a:	d02e      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d80:	d828      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d02a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d822      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d92:	d026      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003d94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d98:	d81c      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d816      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01d      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dae:	d111      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fd24 	bl	8004804 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dc0:	e012      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fdcd 	bl	8004968 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dd2:	e009      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dee:	4b8e      	ldr	r3, [pc, #568]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfc:	498a      	ldr	r1, [pc, #552]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	654b      	str	r3, [r1, #84]	; 0x54
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d04b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e1e:	d02e      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e24:	d828      	bhi.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d02a      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e30:	d822      	bhi.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e36:	d026      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e3c:	d81c      	bhi.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e42:	d010      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e48:	d816      	bhi.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01d      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d111      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fcd2 	bl	8004804 <RCCEx_PLL2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e64:	e012      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3324      	adds	r3, #36	; 0x24
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fd7b 	bl	8004968 <RCCEx_PLL3_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e76:	e009      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7c:	e006      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e004      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e82:	bf00      	nop
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e92:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea0:	4961      	ldr	r1, [pc, #388]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ea6:	e001      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d04b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ebe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ec2:	d02e      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003ec4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ec8:	d828      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ece:	d02a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	d822      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ed6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003eda:	d026      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003edc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ee0:	d81c      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eec:	d816      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01d      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef6:	d111      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3304      	adds	r3, #4
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fc80 	bl	8004804 <RCCEx_PLL2_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f08:	e012      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3324      	adds	r3, #36	; 0x24
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fd29 	bl	8004968 <RCCEx_PLL3_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f1a:	e009      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f20:	e006      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f22:	bf00      	nop
 8003f24:	e004      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f26:	bf00      	nop
 8003f28:	e002      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f44:	4938      	ldr	r1, [pc, #224]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	658b      	str	r3, [r1, #88]	; 0x58
 8003f4a:	e001      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f66:	d10a      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3324      	adds	r3, #36	; 0x24
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fcfa 	bl	8004968 <RCCEx_PLL3_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8c:	4926      	ldr	r1, [pc, #152]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d01a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 fcd9 	bl	8004968 <RCCEx_PLL3_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fce:	4916      	ldr	r1, [pc, #88]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d036      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fea:	d01f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ff0:	d817      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d009      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003ffc:	e011      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fbfd 	bl	8004804 <RCCEx_PLL2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800400e:	e00e      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	2102      	movs	r1, #2
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fca6 	bl	8004968 <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004020:	e005      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004028:	58024400 	.word	0x58024400
      break;
 800402c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402e:	7dfb      	ldrb	r3, [r7, #23]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004034:	4b93      	ldr	r3, [pc, #588]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004038:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004042:	4990      	ldr	r1, [pc, #576]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	658b      	str	r3, [r1, #88]	; 0x58
 8004048:	e001      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d033      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004060:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004064:	d01c      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004066:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800406a:	d816      	bhi.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800406c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004070:	d003      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004076:	d007      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004078:	e00f      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407a:	4b82      	ldr	r3, [pc, #520]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a81      	ldr	r2, [pc, #516]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004086:	e00c      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3324      	adds	r3, #36	; 0x24
 800408c:	2101      	movs	r1, #1
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fc6a 	bl	8004968 <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	75fb      	strb	r3, [r7, #23]
      break;
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80040a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a8:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b6:	4973      	ldr	r1, [pc, #460]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	654b      	str	r3, [r1, #84]	; 0x54
 80040bc:	e001      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d029      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80040d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040da:	d007      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040de:	4b69      	ldr	r3, [pc, #420]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	4a68      	ldr	r2, [pc, #416]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040ea:	e00b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	2102      	movs	r1, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fb86 	bl	8004804 <RCCEx_PLL2_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	75fb      	strb	r3, [r7, #23]
      break;
 8004102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800410a:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004116:	495b      	ldr	r1, [pc, #364]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3324      	adds	r3, #36	; 0x24
 8004132:	2102      	movs	r1, #2
 8004134:	4618      	mov	r0, r3
 8004136:	f000 fc17 	bl	8004968 <RCCEx_PLL3_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d030      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004158:	d017      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800415a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800415e:	d811      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004164:	d013      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800416a:	d80b      	bhi.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d010      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004174:	d106      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004176:	4b43      	ldr	r3, [pc, #268]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	4a42      	ldr	r2, [pc, #264]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800417c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004182:	e007      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      break;
 8004188:	e004      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004192:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004194:	7dfb      	ldrb	r3, [r7, #23]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800419a:	4b3a      	ldr	r3, [pc, #232]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800419c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a6:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	654b      	str	r3, [r1, #84]	; 0x54
 80041ac:	e001      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	492e      	ldr	r1, [pc, #184]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041dc:	4b29      	ldr	r3, [pc, #164]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041ea:	4926      	ldr	r1, [pc, #152]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fc:	4b21      	ldr	r3, [pc, #132]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004200:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004208:	491e      	ldr	r1, [pc, #120]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00d      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800421a:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004220:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004224:	6113      	str	r3, [r2, #16]
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004228:	691a      	ldr	r2, [r3, #16]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004230:	4914      	ldr	r1, [pc, #80]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	da08      	bge.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d009      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	4906      	ldr	r1, [pc, #24]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004270:	7dbb      	ldrb	r3, [r7, #22]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	58024400 	.word	0x58024400

08004288 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800428c:	f7ff f81e 	bl	80032cc <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4904      	ldr	r1, [pc, #16]	; (80042b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	58024400 	.word	0x58024400
 80042b0:	08007bb4 	.word	0x08007bb4

080042b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b089      	sub	sp, #36	; 0x24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042bc:	4ba1      	ldr	r3, [pc, #644]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042c6:	4b9f      	ldr	r3, [pc, #636]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	0b1b      	lsrs	r3, r3, #12
 80042cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042d2:	4b9c      	ldr	r3, [pc, #624]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042de:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	08db      	lsrs	r3, r3, #3
 80042e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8111 	beq.w	8004524 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b02      	cmp	r3, #2
 8004306:	f000 8083 	beq.w	8004410 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b02      	cmp	r3, #2
 800430e:	f200 80a1 	bhi.w	8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d056      	beq.n	80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800431e:	e099      	b.n	8004454 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004320:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02d      	beq.n	8004388 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800432c:	4b85      	ldr	r3, [pc, #532]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	08db      	lsrs	r3, r3, #3
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	4a84      	ldr	r2, [pc, #528]	; (8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
 800433c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	ee07 3a90 	vmov	s15, r3
 800434e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004356:	4b7b      	ldr	r3, [pc, #492]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004366:	ed97 6a03 	vldr	s12, [r7, #12]
 800436a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800436e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800437a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800437e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004382:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004386:	e087      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004392:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004550 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439a:	4b6a      	ldr	r3, [pc, #424]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ca:	e065      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	ee07 3a90 	vmov	s15, r3
 80043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043de:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e6:	ee07 3a90 	vmov	s15, r3
 80043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80043f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800440e:	e043      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004558 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800441e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004422:	4b48      	ldr	r3, [pc, #288]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004432:	ed97 6a03 	vldr	s12, [r7, #12]
 8004436:	eddf 5a45 	vldr	s11, [pc, #276]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004452:	e021      	b.n	8004498 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004554 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b37      	ldr	r3, [pc, #220]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a03 	vldr	s12, [r7, #12]
 800447a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800454c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004496:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044be:	ee17 2a90 	vmov	r2, s15
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80044e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ec:	ee17 2a90 	vmov	r2, s15
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800450a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800450e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800451a:	ee17 2a90 	vmov	r2, s15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004522:	e008      	b.n	8004536 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
}
 8004536:	bf00      	nop
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	03d09000 	.word	0x03d09000
 800454c:	46000000 	.word	0x46000000
 8004550:	4c742400 	.word	0x4c742400
 8004554:	4a742400 	.word	0x4a742400
 8004558:	4af42400 	.word	0x4af42400

0800455c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004564:	4ba1      	ldr	r3, [pc, #644]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800456e:	4b9f      	ldr	r3, [pc, #636]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	0d1b      	lsrs	r3, r3, #20
 8004574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004578:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800457a:	4b9c      	ldr	r3, [pc, #624]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004586:	4b99      	ldr	r3, [pc, #612]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	08db      	lsrs	r3, r3, #3
 800458c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	fb02 f303 	mul.w	r3, r2, r3
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8111 	beq.w	80047cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	f000 8083 	beq.w	80046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	f200 80a1 	bhi.w	80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d056      	beq.n	8004674 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045c6:	e099      	b.n	80046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045c8:	4b88      	ldr	r3, [pc, #544]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d02d      	beq.n	8004630 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045d4:	4b85      	ldr	r3, [pc, #532]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	08db      	lsrs	r3, r3, #3
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	4a84      	ldr	r2, [pc, #528]	; (80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	ee07 3a90 	vmov	s15, r3
 80045f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fe:	4b7b      	ldr	r3, [pc, #492]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004612:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800462e:	e087      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800463e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004642:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004652:	ed97 6a03 	vldr	s12, [r7, #12]
 8004656:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800465a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004672:	e065      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004686:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004696:	ed97 6a03 	vldr	s12, [r7, #12]
 800469a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046b6:	e043      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004800 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	4b48      	ldr	r3, [pc, #288]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	ed97 6a03 	vldr	s12, [r7, #12]
 80046de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046fa:	e021      	b.n	8004740 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004722:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800473e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004740:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	0a5b      	lsrs	r3, r3, #9
 8004746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474a:	ee07 3a90 	vmov	s15, r3
 800474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800475a:	edd7 6a07 	vldr	s13, [r7, #28]
 800475e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004766:	ee17 2a90 	vmov	r2, s15
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	0c1b      	lsrs	r3, r3, #16
 8004774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004784:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004788:	edd7 6a07 	vldr	s13, [r7, #28]
 800478c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004794:	ee17 2a90 	vmov	r2, s15
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800479c:	4b13      	ldr	r3, [pc, #76]	; (80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	0e1b      	lsrs	r3, r3, #24
 80047a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 2a90 	vmov	r2, s15
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047ca:	e008      	b.n	80047de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	609a      	str	r2, [r3, #8]
}
 80047de:	bf00      	nop
 80047e0:	3724      	adds	r7, #36	; 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
 80047f0:	03d09000 	.word	0x03d09000
 80047f4:	46000000 	.word	0x46000000
 80047f8:	4c742400 	.word	0x4c742400
 80047fc:	4a742400 	.word	0x4a742400
 8004800:	4af42400 	.word	0x4af42400

08004804 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004812:	4b53      	ldr	r3, [pc, #332]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d101      	bne.n	8004822 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e099      	b.n	8004956 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004822:	4b4f      	ldr	r3, [pc, #316]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a4e      	ldr	r2, [pc, #312]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004828:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800482c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fc fd03 	bl	8001238 <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004834:	e008      	b.n	8004848 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004836:	f7fc fcff 	bl	8001238 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e086      	b.n	8004956 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004848:	4b45      	ldr	r3, [pc, #276]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	031b      	lsls	r3, r3, #12
 8004862:	493f      	ldr	r1, [pc, #252]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004864:	4313      	orrs	r3, r2
 8004866:	628b      	str	r3, [r1, #40]	; 0x28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	3b01      	subs	r3, #1
 8004878:	025b      	lsls	r3, r3, #9
 800487a:	b29b      	uxth	r3, r3
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	3b01      	subs	r3, #1
 8004892:	061b      	lsls	r3, r3, #24
 8004894:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004898:	4931      	ldr	r1, [pc, #196]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800489e:	4b30      	ldr	r3, [pc, #192]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	492d      	ldr	r1, [pc, #180]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	f023 0220 	bic.w	r2, r3, #32
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	4928      	ldr	r1, [pc, #160]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048c2:	4b27      	ldr	r3, [pc, #156]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	4a26      	ldr	r2, [pc, #152]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048c8:	f023 0310 	bic.w	r3, r3, #16
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <RCCEx_PLL2_Config+0x160>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	69d2      	ldr	r2, [r2, #28]
 80048da:	00d2      	lsls	r2, r2, #3
 80048dc:	4920      	ldr	r1, [pc, #128]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	f043 0310 	orr.w	r3, r3, #16
 80048ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a19      	ldr	r2, [pc, #100]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 80048fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004900:	e00f      	b.n	8004922 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004908:	4b15      	ldr	r3, [pc, #84]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 800490e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004912:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004914:	e005      	b.n	8004922 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4a11      	ldr	r2, [pc, #68]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 800491c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004920:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a0e      	ldr	r2, [pc, #56]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 8004928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800492c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492e:	f7fc fc83 	bl	8001238 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004934:	e008      	b.n	8004948 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004936:	f7fc fc7f 	bl	8001238 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e006      	b.n	8004956 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <RCCEx_PLL2_Config+0x15c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	58024400 	.word	0x58024400
 8004964:	ffff0007 	.word	0xffff0007

08004968 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004976:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d101      	bne.n	8004986 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e099      	b.n	8004aba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004986:	4b4f      	ldr	r3, [pc, #316]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a4e      	ldr	r2, [pc, #312]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004992:	f7fc fc51 	bl	8001238 <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004998:	e008      	b.n	80049ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800499a:	f7fc fc4d 	bl	8001238 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e086      	b.n	8004aba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049ac:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049b8:	4b42      	ldr	r3, [pc, #264]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	051b      	lsls	r3, r3, #20
 80049c6:	493f      	ldr	r1, [pc, #252]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	628b      	str	r3, [r1, #40]	; 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	3b01      	subs	r3, #1
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	b29b      	uxth	r3, r3
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049fc:	4931      	ldr	r1, [pc, #196]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a02:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	492d      	ldr	r1, [pc, #180]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	4928      	ldr	r1, [pc, #160]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a26:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <RCCEx_PLL3_Config+0x160>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	69d2      	ldr	r2, [r2, #28]
 8004a3e:	00d2      	lsls	r2, r2, #3
 8004a40:	4920      	ldr	r1, [pc, #128]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a58:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a64:	e00f      	b.n	8004a86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a78:	e005      	b.n	8004a86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fc fbd1 	bl	8001238 <HAL_GetTick>
 8004a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a98:	e008      	b.n	8004aac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a9a:	f7fc fbcd 	bl	8001238 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <RCCEx_PLL3_Config+0x15c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	ffff0007 	.word	0xffff0007

08004acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e049      	b.n	8004b72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f841 	bl	8004b7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 f9f8 	bl	8004f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d001      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e04f      	b.n	8004c48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d01d      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd2:	d018      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	; (8004c60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a1b      	ldr	r2, [pc, #108]	; (8004c64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIM_Base_Start_IT+0x76>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d115      	bne.n	8004c32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b06      	cmp	r3, #6
 8004c16:	d015      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1e:	d011      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	e008      	b.n	8004c44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e000      	b.n	8004c46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40001800 	.word	0x40001800
 8004c6c:	00010007 	.word	0x00010007

08004c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0202 	mvn.w	r2, #2
 8004c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f905 	bl	8004ec2 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f8f7 	bl	8004eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f908 	bl	8004ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d122      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d11b      	bne.n	8004d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0204 	mvn.w	r2, #4
 8004cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8db 	bl	8004ec2 <HAL_TIM_IC_CaptureCallback>
 8004d0c:	e005      	b.n	8004d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f8cd 	bl	8004eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f8de 	bl	8004ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d122      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0208 	mvn.w	r2, #8
 8004d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2204      	movs	r2, #4
 8004d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8b1 	bl	8004ec2 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8a3 	bl	8004eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8b4 	bl	8004ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d122      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d11b      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0210 	mvn.w	r2, #16
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f887 	bl	8004ec2 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f879 	bl	8004eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f88a 	bl	8004ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0201 	mvn.w	r2, #1
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fb ff34 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b80      	cmp	r3, #128	; 0x80
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f914 	bl	8005048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2e:	d10e      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d107      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f907 	bl	800505c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d10e      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d107      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f838 	bl	8004eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	2b20      	cmp	r3, #32
 8004e86:	d10e      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0220 	mvn.w	r2, #32
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8c7 	bl	8005034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
	...

08004f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a40      	ldr	r2, [pc, #256]	; (8005014 <TIM_Base_SetConfig+0x114>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1e:	d00f      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a3d      	ldr	r2, [pc, #244]	; (8005018 <TIM_Base_SetConfig+0x118>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a3c      	ldr	r2, [pc, #240]	; (800501c <TIM_Base_SetConfig+0x11c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a3b      	ldr	r2, [pc, #236]	; (8005020 <TIM_Base_SetConfig+0x120>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3a      	ldr	r2, [pc, #232]	; (8005024 <TIM_Base_SetConfig+0x124>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2f      	ldr	r2, [pc, #188]	; (8005014 <TIM_Base_SetConfig+0x114>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01f      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f60:	d01b      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <TIM_Base_SetConfig+0x118>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d017      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2b      	ldr	r2, [pc, #172]	; (800501c <TIM_Base_SetConfig+0x11c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2a      	ldr	r2, [pc, #168]	; (8005020 <TIM_Base_SetConfig+0x120>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00f      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a29      	ldr	r2, [pc, #164]	; (8005024 <TIM_Base_SetConfig+0x124>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <TIM_Base_SetConfig+0x128>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a27      	ldr	r2, [pc, #156]	; (800502c <TIM_Base_SetConfig+0x12c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_Base_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a26      	ldr	r2, [pc, #152]	; (8005030 <TIM_Base_SetConfig+0x130>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d108      	bne.n	8004fac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a10      	ldr	r2, [pc, #64]	; (8005014 <TIM_Base_SetConfig+0x114>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d00f      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a12      	ldr	r2, [pc, #72]	; (8005024 <TIM_Base_SetConfig+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00b      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a11      	ldr	r2, [pc, #68]	; (8005028 <TIM_Base_SetConfig+0x128>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d007      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a10      	ldr	r2, [pc, #64]	; (800502c <TIM_Base_SetConfig+0x12c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d003      	beq.n	8004ff8 <TIM_Base_SetConfig+0xf8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a0f      	ldr	r2, [pc, #60]	; (8005030 <TIM_Base_SetConfig+0x130>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d103      	bne.n	8005000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	615a      	str	r2, [r3, #20]
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40010000 	.word	0x40010000
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40010400 	.word	0x40010400
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800

08005034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e042      	b.n	8005108 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fb fee5 	bl	8000e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2224      	movs	r2, #36	; 0x24
 800509e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0201 	bic.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f82c 	bl	8005110 <UART_SetConfig>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e022      	b.n	8005108 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fd80 	bl	8005bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fe07 	bl	8005d14 <UART_CheckIdleState>
 8005106:	4603      	mov	r3, r0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b08e      	sub	sp, #56	; 0x38
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	4313      	orrs	r3, r2
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4bbf      	ldr	r3, [pc, #764]	; (800543c <UART_SetConfig+0x32c>)
 800513e:	4013      	ands	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6812      	ldr	r2, [r2, #0]
 8005144:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005146:	430b      	orrs	r3, r1
 8005148:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4ab5      	ldr	r2, [pc, #724]	; (8005440 <UART_SetConfig+0x330>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005176:	4313      	orrs	r3, r2
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	4bb0      	ldr	r3, [pc, #704]	; (8005444 <UART_SetConfig+0x334>)
 8005182:	4013      	ands	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800518a:	430b      	orrs	r3, r1
 800518c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	f023 010f 	bic.w	r1, r3, #15
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4aa7      	ldr	r2, [pc, #668]	; (8005448 <UART_SetConfig+0x338>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d176      	bne.n	800529c <UART_SetConfig+0x18c>
 80051ae:	4ba7      	ldr	r3, [pc, #668]	; (800544c <UART_SetConfig+0x33c>)
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	2b28      	cmp	r3, #40	; 0x28
 80051b8:	d86c      	bhi.n	8005294 <UART_SetConfig+0x184>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0xb0>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	08005265 	.word	0x08005265
 80051c4:	08005295 	.word	0x08005295
 80051c8:	08005295 	.word	0x08005295
 80051cc:	08005295 	.word	0x08005295
 80051d0:	08005295 	.word	0x08005295
 80051d4:	08005295 	.word	0x08005295
 80051d8:	08005295 	.word	0x08005295
 80051dc:	08005295 	.word	0x08005295
 80051e0:	0800526d 	.word	0x0800526d
 80051e4:	08005295 	.word	0x08005295
 80051e8:	08005295 	.word	0x08005295
 80051ec:	08005295 	.word	0x08005295
 80051f0:	08005295 	.word	0x08005295
 80051f4:	08005295 	.word	0x08005295
 80051f8:	08005295 	.word	0x08005295
 80051fc:	08005295 	.word	0x08005295
 8005200:	08005275 	.word	0x08005275
 8005204:	08005295 	.word	0x08005295
 8005208:	08005295 	.word	0x08005295
 800520c:	08005295 	.word	0x08005295
 8005210:	08005295 	.word	0x08005295
 8005214:	08005295 	.word	0x08005295
 8005218:	08005295 	.word	0x08005295
 800521c:	08005295 	.word	0x08005295
 8005220:	0800527d 	.word	0x0800527d
 8005224:	08005295 	.word	0x08005295
 8005228:	08005295 	.word	0x08005295
 800522c:	08005295 	.word	0x08005295
 8005230:	08005295 	.word	0x08005295
 8005234:	08005295 	.word	0x08005295
 8005238:	08005295 	.word	0x08005295
 800523c:	08005295 	.word	0x08005295
 8005240:	08005285 	.word	0x08005285
 8005244:	08005295 	.word	0x08005295
 8005248:	08005295 	.word	0x08005295
 800524c:	08005295 	.word	0x08005295
 8005250:	08005295 	.word	0x08005295
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
 800525c:	08005295 	.word	0x08005295
 8005260:	0800528d 	.word	0x0800528d
 8005264:	2301      	movs	r3, #1
 8005266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526a:	e222      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800526c:	2304      	movs	r3, #4
 800526e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005272:	e21e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005274:	2308      	movs	r3, #8
 8005276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527a:	e21a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800527c:	2310      	movs	r3, #16
 800527e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005282:	e216      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005284:	2320      	movs	r3, #32
 8005286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528a:	e212      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800528c:	2340      	movs	r3, #64	; 0x40
 800528e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005292:	e20e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800529a:	e20a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a6b      	ldr	r2, [pc, #428]	; (8005450 <UART_SetConfig+0x340>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d130      	bne.n	8005308 <UART_SetConfig+0x1f8>
 80052a6:	4b69      	ldr	r3, [pc, #420]	; (800544c <UART_SetConfig+0x33c>)
 80052a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d826      	bhi.n	8005300 <UART_SetConfig+0x1f0>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x1a8>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052d1 	.word	0x080052d1
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d6:	e1ec      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052de:	e1e8      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e6:	e1e4      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ee:	e1e0      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80052f0:	2320      	movs	r3, #32
 80052f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f6:	e1dc      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fe:	e1d8      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005306:	e1d4      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a51      	ldr	r2, [pc, #324]	; (8005454 <UART_SetConfig+0x344>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d130      	bne.n	8005374 <UART_SetConfig+0x264>
 8005312:	4b4e      	ldr	r3, [pc, #312]	; (800544c <UART_SetConfig+0x33c>)
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b05      	cmp	r3, #5
 800531c:	d826      	bhi.n	800536c <UART_SetConfig+0x25c>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x214>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	0800533d 	.word	0x0800533d
 8005328:	08005345 	.word	0x08005345
 800532c:	0800534d 	.word	0x0800534d
 8005330:	08005355 	.word	0x08005355
 8005334:	0800535d 	.word	0x0800535d
 8005338:	08005365 	.word	0x08005365
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e1b6      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e1b2      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005352:	e1ae      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535a:	e1aa      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800535c:	2320      	movs	r3, #32
 800535e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005362:	e1a6      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005364:	2340      	movs	r3, #64	; 0x40
 8005366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536a:	e1a2      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800536c:	2380      	movs	r3, #128	; 0x80
 800536e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005372:	e19e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a37      	ldr	r2, [pc, #220]	; (8005458 <UART_SetConfig+0x348>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d130      	bne.n	80053e0 <UART_SetConfig+0x2d0>
 800537e:	4b33      	ldr	r3, [pc, #204]	; (800544c <UART_SetConfig+0x33c>)
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b05      	cmp	r3, #5
 8005388:	d826      	bhi.n	80053d8 <UART_SetConfig+0x2c8>
 800538a:	a201      	add	r2, pc, #4	; (adr r2, 8005390 <UART_SetConfig+0x280>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053a9 	.word	0x080053a9
 8005394:	080053b1 	.word	0x080053b1
 8005398:	080053b9 	.word	0x080053b9
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ae:	e180      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e17c      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e178      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e174      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053c8:	2320      	movs	r3, #32
 80053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ce:	e170      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d6:	e16c      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e168      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1d      	ldr	r2, [pc, #116]	; (800545c <UART_SetConfig+0x34c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d142      	bne.n	8005470 <UART_SetConfig+0x360>
 80053ea:	4b18      	ldr	r3, [pc, #96]	; (800544c <UART_SetConfig+0x33c>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d838      	bhi.n	8005468 <UART_SetConfig+0x358>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x2ec>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800541d 	.word	0x0800541d
 8005404:	08005425 	.word	0x08005425
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005435 	.word	0x08005435
 8005410:	08005461 	.word	0x08005461
 8005414:	2300      	movs	r3, #0
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e14a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e146      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e142      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	e13e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005434:	2320      	movs	r3, #32
 8005436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800543a:	e13a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800543c:	cfff69f3 	.word	0xcfff69f3
 8005440:	58000c00 	.word	0x58000c00
 8005444:	11fff4ff 	.word	0x11fff4ff
 8005448:	40011000 	.word	0x40011000
 800544c:	58024400 	.word	0x58024400
 8005450:	40004400 	.word	0x40004400
 8005454:	40004800 	.word	0x40004800
 8005458:	40004c00 	.word	0x40004c00
 800545c:	40005000 	.word	0x40005000
 8005460:	2340      	movs	r3, #64	; 0x40
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	e124      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	e120      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4acc      	ldr	r2, [pc, #816]	; (80057a8 <UART_SetConfig+0x698>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d176      	bne.n	8005568 <UART_SetConfig+0x458>
 800547a:	4bcc      	ldr	r3, [pc, #816]	; (80057ac <UART_SetConfig+0x69c>)
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005482:	2b28      	cmp	r3, #40	; 0x28
 8005484:	d86c      	bhi.n	8005560 <UART_SetConfig+0x450>
 8005486:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x37c>)
 8005488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548c:	08005531 	.word	0x08005531
 8005490:	08005561 	.word	0x08005561
 8005494:	08005561 	.word	0x08005561
 8005498:	08005561 	.word	0x08005561
 800549c:	08005561 	.word	0x08005561
 80054a0:	08005561 	.word	0x08005561
 80054a4:	08005561 	.word	0x08005561
 80054a8:	08005561 	.word	0x08005561
 80054ac:	08005539 	.word	0x08005539
 80054b0:	08005561 	.word	0x08005561
 80054b4:	08005561 	.word	0x08005561
 80054b8:	08005561 	.word	0x08005561
 80054bc:	08005561 	.word	0x08005561
 80054c0:	08005561 	.word	0x08005561
 80054c4:	08005561 	.word	0x08005561
 80054c8:	08005561 	.word	0x08005561
 80054cc:	08005541 	.word	0x08005541
 80054d0:	08005561 	.word	0x08005561
 80054d4:	08005561 	.word	0x08005561
 80054d8:	08005561 	.word	0x08005561
 80054dc:	08005561 	.word	0x08005561
 80054e0:	08005561 	.word	0x08005561
 80054e4:	08005561 	.word	0x08005561
 80054e8:	08005561 	.word	0x08005561
 80054ec:	08005549 	.word	0x08005549
 80054f0:	08005561 	.word	0x08005561
 80054f4:	08005561 	.word	0x08005561
 80054f8:	08005561 	.word	0x08005561
 80054fc:	08005561 	.word	0x08005561
 8005500:	08005561 	.word	0x08005561
 8005504:	08005561 	.word	0x08005561
 8005508:	08005561 	.word	0x08005561
 800550c:	08005551 	.word	0x08005551
 8005510:	08005561 	.word	0x08005561
 8005514:	08005561 	.word	0x08005561
 8005518:	08005561 	.word	0x08005561
 800551c:	08005561 	.word	0x08005561
 8005520:	08005561 	.word	0x08005561
 8005524:	08005561 	.word	0x08005561
 8005528:	08005561 	.word	0x08005561
 800552c:	08005559 	.word	0x08005559
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005536:	e0bc      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005538:	2304      	movs	r3, #4
 800553a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553e:	e0b8      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005540:	2308      	movs	r3, #8
 8005542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005546:	e0b4      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005548:	2310      	movs	r3, #16
 800554a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554e:	e0b0      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005550:	2320      	movs	r3, #32
 8005552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005556:	e0ac      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005558:	2340      	movs	r3, #64	; 0x40
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	e0a8      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e0a4      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a90      	ldr	r2, [pc, #576]	; (80057b0 <UART_SetConfig+0x6a0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d130      	bne.n	80055d4 <UART_SetConfig+0x4c4>
 8005572:	4b8e      	ldr	r3, [pc, #568]	; (80057ac <UART_SetConfig+0x69c>)
 8005574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b05      	cmp	r3, #5
 800557c:	d826      	bhi.n	80055cc <UART_SetConfig+0x4bc>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <UART_SetConfig+0x474>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	0800559d 	.word	0x0800559d
 8005588:	080055a5 	.word	0x080055a5
 800558c:	080055ad 	.word	0x080055ad
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055c5 	.word	0x080055c5
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a2:	e086      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055a4:	2304      	movs	r3, #4
 80055a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055aa:	e082      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055ac:	2308      	movs	r3, #8
 80055ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b2:	e07e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055b4:	2310      	movs	r3, #16
 80055b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ba:	e07a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055bc:	2320      	movs	r3, #32
 80055be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c2:	e076      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055c4:	2340      	movs	r3, #64	; 0x40
 80055c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ca:	e072      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d2:	e06e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a76      	ldr	r2, [pc, #472]	; (80057b4 <UART_SetConfig+0x6a4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d130      	bne.n	8005640 <UART_SetConfig+0x530>
 80055de:	4b73      	ldr	r3, [pc, #460]	; (80057ac <UART_SetConfig+0x69c>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	2b05      	cmp	r3, #5
 80055e8:	d826      	bhi.n	8005638 <UART_SetConfig+0x528>
 80055ea:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x4e0>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005609 	.word	0x08005609
 80055f4:	08005611 	.word	0x08005611
 80055f8:	08005619 	.word	0x08005619
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005629 	.word	0x08005629
 8005604:	08005631 	.word	0x08005631
 8005608:	2300      	movs	r3, #0
 800560a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560e:	e050      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005610:	2304      	movs	r3, #4
 8005612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005616:	e04c      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005618:	2308      	movs	r3, #8
 800561a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561e:	e048      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005620:	2310      	movs	r3, #16
 8005622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005626:	e044      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005628:	2320      	movs	r3, #32
 800562a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562e:	e040      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005630:	2340      	movs	r3, #64	; 0x40
 8005632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005636:	e03c      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005638:	2380      	movs	r3, #128	; 0x80
 800563a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563e:	e038      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5c      	ldr	r2, [pc, #368]	; (80057b8 <UART_SetConfig+0x6a8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d130      	bne.n	80056ac <UART_SetConfig+0x59c>
 800564a:	4b58      	ldr	r3, [pc, #352]	; (80057ac <UART_SetConfig+0x69c>)
 800564c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	2b05      	cmp	r3, #5
 8005654:	d826      	bhi.n	80056a4 <UART_SetConfig+0x594>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <UART_SetConfig+0x54c>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005675 	.word	0x08005675
 8005660:	0800567d 	.word	0x0800567d
 8005664:	08005685 	.word	0x08005685
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	2302      	movs	r3, #2
 8005676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567a:	e01a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005682:	e016      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568a:	e012      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005692:	e00e      	b.n	80056b2 <UART_SetConfig+0x5a2>
 8005694:	2320      	movs	r3, #32
 8005696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800569a:	e00a      	b.n	80056b2 <UART_SetConfig+0x5a2>
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056a2:	e006      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80056a4:	2380      	movs	r3, #128	; 0x80
 80056a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056aa:	e002      	b.n	80056b2 <UART_SetConfig+0x5a2>
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <UART_SetConfig+0x6a8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	f040 80ef 	bne.w	800589c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	dc46      	bgt.n	8005754 <UART_SetConfig+0x644>
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f2c0 8081 	blt.w	80057ce <UART_SetConfig+0x6be>
 80056cc:	3b02      	subs	r3, #2
 80056ce:	2b1e      	cmp	r3, #30
 80056d0:	d87d      	bhi.n	80057ce <UART_SetConfig+0x6be>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <UART_SetConfig+0x5c8>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	0800575b 	.word	0x0800575b
 80056dc:	080057cf 	.word	0x080057cf
 80056e0:	08005763 	.word	0x08005763
 80056e4:	080057cf 	.word	0x080057cf
 80056e8:	080057cf 	.word	0x080057cf
 80056ec:	080057cf 	.word	0x080057cf
 80056f0:	08005773 	.word	0x08005773
 80056f4:	080057cf 	.word	0x080057cf
 80056f8:	080057cf 	.word	0x080057cf
 80056fc:	080057cf 	.word	0x080057cf
 8005700:	080057cf 	.word	0x080057cf
 8005704:	080057cf 	.word	0x080057cf
 8005708:	080057cf 	.word	0x080057cf
 800570c:	080057cf 	.word	0x080057cf
 8005710:	08005783 	.word	0x08005783
 8005714:	080057cf 	.word	0x080057cf
 8005718:	080057cf 	.word	0x080057cf
 800571c:	080057cf 	.word	0x080057cf
 8005720:	080057cf 	.word	0x080057cf
 8005724:	080057cf 	.word	0x080057cf
 8005728:	080057cf 	.word	0x080057cf
 800572c:	080057cf 	.word	0x080057cf
 8005730:	080057cf 	.word	0x080057cf
 8005734:	080057cf 	.word	0x080057cf
 8005738:	080057cf 	.word	0x080057cf
 800573c:	080057cf 	.word	0x080057cf
 8005740:	080057cf 	.word	0x080057cf
 8005744:	080057cf 	.word	0x080057cf
 8005748:	080057cf 	.word	0x080057cf
 800574c:	080057cf 	.word	0x080057cf
 8005750:	080057c1 	.word	0x080057c1
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	d036      	beq.n	80057c6 <UART_SetConfig+0x6b6>
 8005758:	e039      	b.n	80057ce <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800575a:	f7fe fd95 	bl	8004288 <HAL_RCCEx_GetD3PCLK1Freq>
 800575e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005760:	e03b      	b.n	80057da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005762:	f107 0314 	add.w	r3, r7, #20
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fda4 	bl	80042b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005770:	e033      	b.n	80057da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fef0 	bl	800455c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005780:	e02b      	b.n	80057da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <UART_SetConfig+0x69c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578e:	4b07      	ldr	r3, [pc, #28]	; (80057ac <UART_SetConfig+0x69c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	4a08      	ldr	r2, [pc, #32]	; (80057bc <UART_SetConfig+0x6ac>)
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a0:	e01b      	b.n	80057da <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <UART_SetConfig+0x6ac>)
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057a6:	e018      	b.n	80057da <UART_SetConfig+0x6ca>
 80057a8:	40011400 	.word	0x40011400
 80057ac:	58024400 	.word	0x58024400
 80057b0:	40007800 	.word	0x40007800
 80057b4:	40007c00 	.word	0x40007c00
 80057b8:	58000c00 	.word	0x58000c00
 80057bc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057c0:	4bc4      	ldr	r3, [pc, #784]	; (8005ad4 <UART_SetConfig+0x9c4>)
 80057c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057c4:	e009      	b.n	80057da <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057cc:	e005      	b.n	80057da <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80057ce:	2300      	movs	r3, #0
 80057d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80057d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 81da 	beq.w	8005b96 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	4abc      	ldr	r2, [pc, #752]	; (8005ad8 <UART_SetConfig+0x9c8>)
 80057e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	6a3a      	ldr	r2, [r7, #32]
 8005802:	429a      	cmp	r2, r3
 8005804:	d305      	bcc.n	8005812 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800580c:	6a3a      	ldr	r2, [r7, #32]
 800580e:	429a      	cmp	r2, r3
 8005810:	d903      	bls.n	800581a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005818:	e1bd      	b.n	8005b96 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	4618      	mov	r0, r3
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	4aac      	ldr	r2, [pc, #688]	; (8005ad8 <UART_SetConfig+0x9c8>)
 8005828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800582c:	b29a      	uxth	r2, r3
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	f7fa fd55 	bl	80002e0 <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4610      	mov	r0, r2
 800583c:	4619      	mov	r1, r3
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	020b      	lsls	r3, r1, #8
 8005848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800584c:	0202      	lsls	r2, r0, #8
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	6849      	ldr	r1, [r1, #4]
 8005852:	0849      	lsrs	r1, r1, #1
 8005854:	4608      	mov	r0, r1
 8005856:	f04f 0100 	mov.w	r1, #0
 800585a:	1814      	adds	r4, r2, r0
 800585c:	eb43 0501 	adc.w	r5, r3, r1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	461a      	mov	r2, r3
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fd37 	bl	80002e0 <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4613      	mov	r3, r2
 8005878:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005880:	d308      	bcc.n	8005894 <UART_SetConfig+0x784>
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005888:	d204      	bcs.n	8005894 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005890:	60da      	str	r2, [r3, #12]
 8005892:	e180      	b.n	8005b96 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800589a:	e17c      	b.n	8005b96 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	f040 80bf 	bne.w	8005a26 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80058a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	dc49      	bgt.n	8005944 <UART_SetConfig+0x834>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db7c      	blt.n	80059ae <UART_SetConfig+0x89e>
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d87a      	bhi.n	80059ae <UART_SetConfig+0x89e>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x7b0>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	08005953 	.word	0x08005953
 80058c8:	080059af 	.word	0x080059af
 80058cc:	080059af 	.word	0x080059af
 80058d0:	0800595b 	.word	0x0800595b
 80058d4:	080059af 	.word	0x080059af
 80058d8:	080059af 	.word	0x080059af
 80058dc:	080059af 	.word	0x080059af
 80058e0:	0800596b 	.word	0x0800596b
 80058e4:	080059af 	.word	0x080059af
 80058e8:	080059af 	.word	0x080059af
 80058ec:	080059af 	.word	0x080059af
 80058f0:	080059af 	.word	0x080059af
 80058f4:	080059af 	.word	0x080059af
 80058f8:	080059af 	.word	0x080059af
 80058fc:	080059af 	.word	0x080059af
 8005900:	0800597b 	.word	0x0800597b
 8005904:	080059af 	.word	0x080059af
 8005908:	080059af 	.word	0x080059af
 800590c:	080059af 	.word	0x080059af
 8005910:	080059af 	.word	0x080059af
 8005914:	080059af 	.word	0x080059af
 8005918:	080059af 	.word	0x080059af
 800591c:	080059af 	.word	0x080059af
 8005920:	080059af 	.word	0x080059af
 8005924:	080059af 	.word	0x080059af
 8005928:	080059af 	.word	0x080059af
 800592c:	080059af 	.word	0x080059af
 8005930:	080059af 	.word	0x080059af
 8005934:	080059af 	.word	0x080059af
 8005938:	080059af 	.word	0x080059af
 800593c:	080059af 	.word	0x080059af
 8005940:	080059a1 	.word	0x080059a1
 8005944:	2b40      	cmp	r3, #64	; 0x40
 8005946:	d02e      	beq.n	80059a6 <UART_SetConfig+0x896>
 8005948:	e031      	b.n	80059ae <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7fd fcef 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 800594e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005950:	e033      	b.n	80059ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005952:	f7fd fd01 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8005956:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005958:	e02f      	b.n	80059ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fca8 	bl	80042b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005968:	e027      	b.n	80059ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fdf4 	bl	800455c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005978:	e01f      	b.n	80059ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597a:	4b58      	ldr	r3, [pc, #352]	; (8005adc <UART_SetConfig+0x9cc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005986:	4b55      	ldr	r3, [pc, #340]	; (8005adc <UART_SetConfig+0x9cc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	4a53      	ldr	r2, [pc, #332]	; (8005ae0 <UART_SetConfig+0x9d0>)
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005998:	e00f      	b.n	80059ba <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800599a:	4b51      	ldr	r3, [pc, #324]	; (8005ae0 <UART_SetConfig+0x9d0>)
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800599e:	e00c      	b.n	80059ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059a0:	4b4c      	ldr	r3, [pc, #304]	; (8005ad4 <UART_SetConfig+0x9c4>)
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059a4:	e009      	b.n	80059ba <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ac:	e005      	b.n	80059ba <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80ea 	beq.w	8005b96 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	4a44      	ldr	r2, [pc, #272]	; (8005ad8 <UART_SetConfig+0x9c8>)
 80059c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d4:	005a      	lsls	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	441a      	add	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	2b0f      	cmp	r3, #15
 80059ee:	d916      	bls.n	8005a1e <UART_SetConfig+0x90e>
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f6:	d212      	bcs.n	8005a1e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f023 030f 	bic.w	r3, r3, #15
 8005a00:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f003 0307 	and.w	r3, r3, #7
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a10:	4313      	orrs	r3, r2
 8005a12:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a1a:	60da      	str	r2, [r3, #12]
 8005a1c:	e0bb      	b.n	8005b96 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a24:	e0b7      	b.n	8005b96 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	dc4a      	bgt.n	8005ac4 <UART_SetConfig+0x9b4>
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f2c0 8086 	blt.w	8005b40 <UART_SetConfig+0xa30>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	f200 8083 	bhi.w	8005b40 <UART_SetConfig+0xa30>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <UART_SetConfig+0x930>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005acb 	.word	0x08005acb
 8005a44:	08005ae5 	.word	0x08005ae5
 8005a48:	08005b41 	.word	0x08005b41
 8005a4c:	08005b41 	.word	0x08005b41
 8005a50:	08005aed 	.word	0x08005aed
 8005a54:	08005b41 	.word	0x08005b41
 8005a58:	08005b41 	.word	0x08005b41
 8005a5c:	08005b41 	.word	0x08005b41
 8005a60:	08005afd 	.word	0x08005afd
 8005a64:	08005b41 	.word	0x08005b41
 8005a68:	08005b41 	.word	0x08005b41
 8005a6c:	08005b41 	.word	0x08005b41
 8005a70:	08005b41 	.word	0x08005b41
 8005a74:	08005b41 	.word	0x08005b41
 8005a78:	08005b41 	.word	0x08005b41
 8005a7c:	08005b41 	.word	0x08005b41
 8005a80:	08005b0d 	.word	0x08005b0d
 8005a84:	08005b41 	.word	0x08005b41
 8005a88:	08005b41 	.word	0x08005b41
 8005a8c:	08005b41 	.word	0x08005b41
 8005a90:	08005b41 	.word	0x08005b41
 8005a94:	08005b41 	.word	0x08005b41
 8005a98:	08005b41 	.word	0x08005b41
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b41 	.word	0x08005b41
 8005aa4:	08005b41 	.word	0x08005b41
 8005aa8:	08005b41 	.word	0x08005b41
 8005aac:	08005b41 	.word	0x08005b41
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b41 	.word	0x08005b41
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b33 	.word	0x08005b33
 8005ac4:	2b40      	cmp	r3, #64	; 0x40
 8005ac6:	d037      	beq.n	8005b38 <UART_SetConfig+0xa28>
 8005ac8:	e03a      	b.n	8005b40 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aca:	f7fd fc2f 	bl	800332c <HAL_RCC_GetPCLK1Freq>
 8005ace:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ad0:	e03c      	b.n	8005b4c <UART_SetConfig+0xa3c>
 8005ad2:	bf00      	nop
 8005ad4:	003d0900 	.word	0x003d0900
 8005ad8:	08007bc4 	.word	0x08007bc4
 8005adc:	58024400 	.word	0x58024400
 8005ae0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fd fc38 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 8005ae8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005aea:	e02f      	b.n	8005b4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fbdf 	bl	80042b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005afa:	e027      	b.n	8005b4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005afc:	f107 0308 	add.w	r3, r7, #8
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fd2b 	bl	800455c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b0a:	e01f      	b.n	8005b4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b0c:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <UART_SetConfig+0xab0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b18:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <UART_SetConfig+0xab0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	08db      	lsrs	r3, r3, #3
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <UART_SetConfig+0xab4>)
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b2a:	e00f      	b.n	8005b4c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b25      	ldr	r3, [pc, #148]	; (8005bc4 <UART_SetConfig+0xab4>)
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b30:	e00c      	b.n	8005b4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b32:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <UART_SetConfig+0xab8>)
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b36:	e009      	b.n	8005b4c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b3e:	e005      	b.n	8005b4c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b4a:	bf00      	nop
    }

    if (pclk != 0U)
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d021      	beq.n	8005b96 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <UART_SetConfig+0xabc>)
 8005b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	085b      	lsrs	r3, r3, #1
 8005b6a:	441a      	add	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	2b0f      	cmp	r3, #15
 8005b7c:	d908      	bls.n	8005b90 <UART_SetConfig+0xa80>
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b84:	d204      	bcs.n	8005b90 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	e002      	b.n	8005b96 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005bb2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3738      	adds	r7, #56	; 0x38
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	58024400 	.word	0x58024400
 8005bc4:	03d09000 	.word	0x03d09000
 8005bc8:	003d0900 	.word	0x003d0900
 8005bcc:	08007bc4 	.word	0x08007bc4

08005bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00a      	beq.n	8005bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00a      	beq.n	8005c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01a      	beq.n	8005ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cce:	d10a      	bne.n	8005ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00a      	beq.n	8005d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	605a      	str	r2, [r3, #4]
  }
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d24:	f7fb fa88 	bl	8001238 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d10e      	bne.n	8005d56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f82f 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e025      	b.n	8005da2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d10e      	bne.n	8005d82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f819 	bl	8005daa <UART_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e00f      	b.n	8005da2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	603b      	str	r3, [r7, #0]
 8005db6:	4613      	mov	r3, r2
 8005db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dba:	e062      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d05e      	beq.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc4:	f7fb fa38 	bl	8001238 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d302      	bcc.n	8005dda <UART_WaitOnFlagUntilTimeout+0x30>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d11d      	bne.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005de8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e045      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02e      	beq.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e32:	d126      	bne.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e4c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e00f      	b.n	8005ea2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	79fb      	ldrb	r3, [r7, #7]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d08d      	beq.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e027      	b.n	8005f10 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2224      	movs	r2, #36	; 0x24
 8005ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0201 	bic.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005eee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d101      	bne.n	8005f34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f30:	2302      	movs	r3, #2
 8005f32:	e02d      	b.n	8005f90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2224      	movs	r2, #36	; 0x24
 8005f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f84f 	bl	8006014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e02d      	b.n	800600c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2224      	movs	r2, #36	; 0x24
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f811 	bl	8006014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006034:	e031      	b.n	800609a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006036:	2310      	movs	r3, #16
 8006038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800603a:	2310      	movs	r3, #16
 800603c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	0e5b      	lsrs	r3, r3, #25
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0307 	and.w	r3, r3, #7
 800604c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	0f5b      	lsrs	r3, r3, #29
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	7b3a      	ldrb	r2, [r7, #12]
 8006062:	4911      	ldr	r1, [pc, #68]	; (80060a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006064:	5c8a      	ldrb	r2, [r1, r2]
 8006066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800606a:	7b3a      	ldrb	r2, [r7, #12]
 800606c:	490f      	ldr	r1, [pc, #60]	; (80060ac <UARTEx_SetNbDataToProcess+0x98>)
 800606e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006070:	fb93 f3f2 	sdiv	r3, r3, r2
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800607c:	7bfb      	ldrb	r3, [r7, #15]
 800607e:	7b7a      	ldrb	r2, [r7, #13]
 8006080:	4909      	ldr	r1, [pc, #36]	; (80060a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006082:	5c8a      	ldrb	r2, [r1, r2]
 8006084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006088:	7b7a      	ldrb	r2, [r7, #13]
 800608a:	4908      	ldr	r1, [pc, #32]	; (80060ac <UARTEx_SetNbDataToProcess+0x98>)
 800608c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800608e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	08007bdc 	.word	0x08007bdc
 80060ac:	08007be4 	.word	0x08007be4

080060b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b0:	b084      	sub	sp, #16
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	f107 001c 	add.w	r0, r7, #28
 80060be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d120      	bne.n	800610a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	4b2a      	ldr	r3, [pc, #168]	; (8006184 <USB_CoreInit+0xd4>)
 80060da:	4013      	ands	r3, r2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa60 	bl	80065c4 <USB_CoreReset>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	e01a      	b.n	8006140 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa54 	bl	80065c4 <USB_CoreReset>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
 8006132:	e005      	b.n	8006140 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	2b01      	cmp	r3, #1
 8006144:	d116      	bne.n	8006174 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	b29a      	uxth	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <USB_CoreInit+0xd8>)
 8006156:	4313      	orrs	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f043 0206 	orr.w	r2, r3, #6
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006180:	b004      	add	sp, #16
 8006182:	4770      	bx	lr
 8006184:	ffbdffbf 	.word	0xffbdffbf
 8006188:	03ee0000 	.word	0x03ee0000

0800618c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 0201 	bic.w	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d106      	bne.n	80061da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	e00b      	b.n	80061f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d106      	bne.n	80061ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	60da      	str	r2, [r3, #12]
 80061ec:	e001      	b.n	80061f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e003      	b.n	80061fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80061f2:	2032      	movs	r0, #50	; 0x32
 80061f4:	f7fb f82c 	bl	8001250 <HAL_Delay>

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	e009      	b.n	8006238 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3340      	adds	r3, #64	; 0x40
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	3301      	adds	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b0e      	cmp	r3, #14
 800623c:	d9f2      	bls.n	8006224 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800623e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11c      	bne.n	800627e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f043 0302 	orr.w	r3, r3, #2
 8006256:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e005      	b.n	800628a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800629c:	4619      	mov	r1, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	461a      	mov	r2, r3
 80062a6:	680b      	ldr	r3, [r1, #0]
 80062a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d10c      	bne.n	80062ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062b6:	2100      	movs	r1, #0
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f949 	bl	8006550 <USB_SetDevSpeed>
 80062be:	e008      	b.n	80062d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80062c0:	2101      	movs	r1, #1
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f944 	bl	8006550 <USB_SetDevSpeed>
 80062c8:	e003      	b.n	80062d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062ca:	2103      	movs	r1, #3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f93f 	bl	8006550 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062d2:	2110      	movs	r1, #16
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f8f3 	bl	80064c0 <USB_FlushTxFifo>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f911 	bl	800650c <USB_FlushRxFifo>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	461a      	mov	r2, r3
 8006308:	2300      	movs	r3, #0
 800630a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	461a      	mov	r2, r3
 8006314:	2300      	movs	r3, #0
 8006316:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006318:	2300      	movs	r3, #0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	e043      	b.n	80063a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006334:	d118      	bne.n	8006368 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006348:	461a      	mov	r2, r3
 800634a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	e013      	b.n	800637a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e008      	b.n	800637a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	2300      	movs	r3, #0
 8006378:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	461a      	mov	r2, r3
 8006388:	2300      	movs	r3, #0
 800638a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	461a      	mov	r2, r3
 800639a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800639e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	3301      	adds	r3, #1
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d3b7      	bcc.n	800631e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ae:	2300      	movs	r3, #0
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e043      	b.n	800643c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ca:	d118      	bne.n	80063fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	461a      	mov	r2, r3
 80063e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e013      	b.n	8006410 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f4:	461a      	mov	r2, r3
 80063f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e008      	b.n	8006410 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	2300      	movs	r3, #0
 800640e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	461a      	mov	r2, r3
 800641e:	2300      	movs	r3, #0
 8006420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642e:	461a      	mov	r2, r3
 8006430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	3301      	adds	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d3b7      	bcc.n	80063b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006456:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006464:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b00      	cmp	r3, #0
 800646a:	d105      	bne.n	8006478 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f043 0210 	orr.w	r2, r3, #16
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <USB_DevInit+0x2b4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f043 0208 	orr.w	r2, r3, #8
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006498:	2b01      	cmp	r3, #1
 800649a:	d105      	bne.n	80064a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699a      	ldr	r2, [r3, #24]
 80064a0:	4b06      	ldr	r3, [pc, #24]	; (80064bc <USB_DevInit+0x2b8>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b4:	b004      	add	sp, #16
 80064b6:	4770      	bx	lr
 80064b8:	803c3800 	.word	0x803c3800
 80064bc:	40000004 	.word	0x40000004

080064c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a09      	ldr	r2, [pc, #36]	; (8006508 <USB_FlushTxFifo+0x48>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d901      	bls.n	80064ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e006      	b.n	80064fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f003 0320 	and.w	r3, r3, #32
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d0f0      	beq.n	80064da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	00030d40 	.word	0x00030d40

0800650c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2210      	movs	r2, #16
 800651c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3301      	adds	r3, #1
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a09      	ldr	r2, [pc, #36]	; (800654c <USB_FlushRxFifo+0x40>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d901      	bls.n	8006530 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e006      	b.n	800653e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d0f0      	beq.n	800651e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	00030d40 	.word	0x00030d40

08006550 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006570:	4313      	orrs	r3, r2
 8006572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006582:	b480      	push	{r7}
 8006584:	b085      	sub	sp, #20
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800659c:	f023 0303 	bic.w	r3, r3, #3
 80065a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b0:	f043 0302 	orr.w	r3, r3, #2
 80065b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <USB_CoreReset+0x64>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e01b      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	daf2      	bge.n	80065d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a09      	ldr	r2, [pc, #36]	; (8006628 <USB_CoreReset+0x64>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e006      	b.n	800661a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d0f0      	beq.n	80065fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	00030d40 	.word	0x00030d40

0800662c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	4603      	mov	r3, r0
 8006634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800663a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800663e:	2b84      	cmp	r3, #132	; 0x84
 8006640:	d005      	beq.n	800664e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	3303      	adds	r3, #3
 800664c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800664e:	68fb      	ldr	r3, [r7, #12]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006660:	f000 feda 	bl	8007418 <vTaskStartScheduler>
  
  return osOK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	bd80      	pop	{r7, pc}

0800666a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800666a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800666c:	b089      	sub	sp, #36	; 0x24
 800666e:	af04      	add	r7, sp, #16
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d020      	beq.n	80066be <osThreadCreate+0x54>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01c      	beq.n	80066be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685c      	ldr	r4, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681d      	ldr	r5, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691e      	ldr	r6, [r3, #16]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff ffc8 	bl	800662c <makeFreeRtosPriority>
 800669c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066a6:	9202      	str	r2, [sp, #8]
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	9100      	str	r1, [sp, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	4632      	mov	r2, r6
 80066b0:	4629      	mov	r1, r5
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fce8 	bl	8007088 <xTaskCreateStatic>
 80066b8:	4603      	mov	r3, r0
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	e01c      	b.n	80066f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685c      	ldr	r4, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066ca:	b29e      	uxth	r6, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ffaa 	bl	800662c <makeFreeRtosPriority>
 80066d8:	4602      	mov	r2, r0
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	9200      	str	r2, [sp, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	4632      	mov	r2, r6
 80066e6:	4629      	mov	r1, r5
 80066e8:	4620      	mov	r0, r4
 80066ea:	f000 fd2a 	bl	8007142 <xTaskCreate>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d001      	beq.n	80066f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80066f8:	68fb      	ldr	r3, [r7, #12]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006702 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <osDelay+0x16>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	e000      	b.n	800671a <osDelay+0x18>
 8006718:	2301      	movs	r3, #1
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fe48 	bl	80073b0 <vTaskDelay>
  
  return osOK;
 8006720:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006738:	f000 fece 	bl	80074d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800673c:	4b5b      	ldr	r3, [pc, #364]	; (80068ac <pvPortMalloc+0x180>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006744:	f000 f920 	bl	8006988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006748:	4b59      	ldr	r3, [pc, #356]	; (80068b0 <pvPortMalloc+0x184>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4013      	ands	r3, r2
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 8093 	bne.w	800687c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01d      	beq.n	8006798 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800675c:	2208      	movs	r2, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	2b00      	cmp	r3, #0
 800676c:	d014      	beq.n	8006798 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f023 0307 	bic.w	r3, r3, #7
 8006774:	3308      	adds	r3, #8
 8006776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00a      	beq.n	8006798 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d06e      	beq.n	800687c <pvPortMalloc+0x150>
 800679e:	4b45      	ldr	r3, [pc, #276]	; (80068b4 <pvPortMalloc+0x188>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d869      	bhi.n	800687c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067a8:	4b43      	ldr	r3, [pc, #268]	; (80068b8 <pvPortMalloc+0x18c>)
 80067aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067ac:	4b42      	ldr	r3, [pc, #264]	; (80068b8 <pvPortMalloc+0x18c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067b2:	e004      	b.n	80067be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d903      	bls.n	80067d0 <pvPortMalloc+0xa4>
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f1      	bne.n	80067b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067d0:	4b36      	ldr	r3, [pc, #216]	; (80068ac <pvPortMalloc+0x180>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d050      	beq.n	800687c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2208      	movs	r2, #8
 80067e0:	4413      	add	r3, r2
 80067e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	2308      	movs	r3, #8
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d91f      	bls.n	800683c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <pvPortMalloc+0xf8>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	613b      	str	r3, [r7, #16]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1ad2      	subs	r2, r2, r3
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006836:	69b8      	ldr	r0, [r7, #24]
 8006838:	f000 f908 	bl	8006a4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800683c:	4b1d      	ldr	r3, [pc, #116]	; (80068b4 <pvPortMalloc+0x188>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <pvPortMalloc+0x188>)
 8006848:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800684a:	4b1a      	ldr	r3, [pc, #104]	; (80068b4 <pvPortMalloc+0x188>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <pvPortMalloc+0x190>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d203      	bcs.n	800685e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006856:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <pvPortMalloc+0x188>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a18      	ldr	r2, [pc, #96]	; (80068bc <pvPortMalloc+0x190>)
 800685c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <pvPortMalloc+0x184>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	431a      	orrs	r2, r3
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006872:	4b13      	ldr	r3, [pc, #76]	; (80068c0 <pvPortMalloc+0x194>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	4a11      	ldr	r2, [pc, #68]	; (80068c0 <pvPortMalloc+0x194>)
 800687a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800687c:	f000 fe3a 	bl	80074f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <pvPortMalloc+0x174>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	60fb      	str	r3, [r7, #12]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <pvPortMalloc+0x172>
	return pvReturn;
 80068a0:	69fb      	ldr	r3, [r7, #28]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3728      	adds	r7, #40	; 0x28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	24003f54 	.word	0x24003f54
 80068b0:	24003f68 	.word	0x24003f68
 80068b4:	24003f58 	.word	0x24003f58
 80068b8:	24003f4c 	.word	0x24003f4c
 80068bc:	24003f5c 	.word	0x24003f5c
 80068c0:	24003f60 	.word	0x24003f60

080068c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04d      	beq.n	8006972 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068d6:	2308      	movs	r3, #8
 80068d8:	425b      	negs	r3, r3
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4413      	add	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	4b24      	ldr	r3, [pc, #144]	; (800697c <vPortFree+0xb8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <vPortFree+0x44>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60fb      	str	r3, [r7, #12]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <vPortFree+0x62>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	60bb      	str	r3, [r7, #8]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <vPortFree+0xb8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01e      	beq.n	8006972 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11a      	bne.n	8006972 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	4b0e      	ldr	r3, [pc, #56]	; (800697c <vPortFree+0xb8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	43db      	mvns	r3, r3
 8006946:	401a      	ands	r2, r3
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800694c:	f000 fdc4 	bl	80074d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <vPortFree+0xbc>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4413      	add	r3, r2
 800695a:	4a09      	ldr	r2, [pc, #36]	; (8006980 <vPortFree+0xbc>)
 800695c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800695e:	6938      	ldr	r0, [r7, #16]
 8006960:	f000 f874 	bl	8006a4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006964:	4b07      	ldr	r3, [pc, #28]	; (8006984 <vPortFree+0xc0>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	4a06      	ldr	r2, [pc, #24]	; (8006984 <vPortFree+0xc0>)
 800696c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800696e:	f000 fdc1 	bl	80074f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006972:	bf00      	nop
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	24003f68 	.word	0x24003f68
 8006980:	24003f58 	.word	0x24003f58
 8006984:	24003f64 	.word	0x24003f64

08006988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800698e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006994:	4b27      	ldr	r3, [pc, #156]	; (8006a34 <prvHeapInit+0xac>)
 8006996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00c      	beq.n	80069bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3307      	adds	r3, #7
 80069a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0307 	bic.w	r3, r3, #7
 80069ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	4a1f      	ldr	r2, [pc, #124]	; (8006a34 <prvHeapInit+0xac>)
 80069b8:	4413      	add	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069c0:	4a1d      	ldr	r2, [pc, #116]	; (8006a38 <prvHeapInit+0xb0>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069c6:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <prvHeapInit+0xb0>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069d4:	2208      	movs	r2, #8
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0307 	bic.w	r3, r3, #7
 80069e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <prvHeapInit+0xb4>)
 80069e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069ea:	4b14      	ldr	r3, [pc, #80]	; (8006a3c <prvHeapInit+0xb4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069f2:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <prvHeapInit+0xb4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2200      	movs	r2, #0
 80069f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <prvHeapInit+0xb4>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <prvHeapInit+0xb8>)
 8006a16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a09      	ldr	r2, [pc, #36]	; (8006a44 <prvHeapInit+0xbc>)
 8006a1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <prvHeapInit+0xc0>)
 8006a22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a26:	601a      	str	r2, [r3, #0]
}
 8006a28:	bf00      	nop
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	2400034c 	.word	0x2400034c
 8006a38:	24003f4c 	.word	0x24003f4c
 8006a3c:	24003f54 	.word	0x24003f54
 8006a40:	24003f5c 	.word	0x24003f5c
 8006a44:	24003f58 	.word	0x24003f58
 8006a48:	24003f68 	.word	0x24003f68

08006a4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a54:	4b28      	ldr	r3, [pc, #160]	; (8006af8 <prvInsertBlockIntoFreeList+0xac>)
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <prvInsertBlockIntoFreeList+0x14>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d8f7      	bhi.n	8006a5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	4413      	add	r3, r2
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d108      	bne.n	8006a8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	441a      	add	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	441a      	add	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d118      	bne.n	8006ad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <prvInsertBlockIntoFreeList+0xb0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d00d      	beq.n	8006aca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	441a      	add	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e008      	b.n	8006adc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006aca:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <prvInsertBlockIntoFreeList+0xb0>)
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e003      	b.n	8006adc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d002      	beq.n	8006aea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	24003f4c 	.word	0x24003f4c
 8006afc:	24003f54 	.word	0x24003f54

08006b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f103 0208 	add.w	r2, r3, #8
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f04f 32ff 	mov.w	r2, #4294967295
 8006b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f103 0208 	add.w	r2, r3, #8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f103 0208 	add.w	r2, r3, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b085      	sub	sp, #20
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	601a      	str	r2, [r3, #0]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d103      	bne.n	8006bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	e00c      	b.n	8006bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e002      	b.n	8006bd0 <vListInsert+0x2e>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d2f6      	bcs.n	8006bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	601a      	str	r2, [r3, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6892      	ldr	r2, [r2, #8]
 8006c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6852      	ldr	r2, [r2, #4]
 8006c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d103      	bne.n	8006c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	1e5a      	subs	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b04      	subs	r3, #4
 8006c78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3b04      	subs	r3, #4
 8006c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 0201 	bic.w	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b04      	subs	r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c98:	4a0c      	ldr	r2, [pc, #48]	; (8006ccc <pxPortInitialiseStack+0x64>)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3b14      	subs	r3, #20
 8006ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f06f 0202 	mvn.w	r2, #2
 8006cb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3b20      	subs	r3, #32
 8006cbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	08006cd1 	.word	0x08006cd1

08006cd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <prvTaskExitError+0x54>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d00a      	beq.n	8006cfa <prvTaskExitError+0x2a>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	60fb      	str	r3, [r7, #12]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <prvTaskExitError+0x28>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	60bb      	str	r3, [r7, #8]
}
 8006d0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d0e:	bf00      	nop
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0fc      	beq.n	8006d10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	24000010 	.word	0x24000010
	...

08006d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <pxCurrentTCBConst2>)
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	6808      	ldr	r0, [r1, #0]
 8006d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	f380 8809 	msr	PSP, r0
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f04f 0000 	mov.w	r0, #0
 8006d46:	f380 8811 	msr	BASEPRI, r0
 8006d4a:	4770      	bx	lr
 8006d4c:	f3af 8000 	nop.w

08006d50 <pxCurrentTCBConst2>:
 8006d50:	24003f74 	.word	0x24003f74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop

08006d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d58:	4808      	ldr	r0, [pc, #32]	; (8006d7c <prvPortStartFirstTask+0x24>)
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	6800      	ldr	r0, [r0, #0]
 8006d5e:	f380 8808 	msr	MSP, r0
 8006d62:	f04f 0000 	mov.w	r0, #0
 8006d66:	f380 8814 	msr	CONTROL, r0
 8006d6a:	b662      	cpsie	i
 8006d6c:	b661      	cpsie	f
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	df00      	svc	0
 8006d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d7a:	bf00      	nop
 8006d7c:	e000ed08 	.word	0xe000ed08

08006d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d86:	4b46      	ldr	r3, [pc, #280]	; (8006ea0 <xPortStartScheduler+0x120>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a46      	ldr	r2, [pc, #280]	; (8006ea4 <xPortStartScheduler+0x124>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d10a      	bne.n	8006da6 <xPortStartScheduler+0x26>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	613b      	str	r3, [r7, #16]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006da6:	4b3e      	ldr	r3, [pc, #248]	; (8006ea0 <xPortStartScheduler+0x120>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3f      	ldr	r2, [pc, #252]	; (8006ea8 <xPortStartScheduler+0x128>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10a      	bne.n	8006dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dc6:	4b39      	ldr	r3, [pc, #228]	; (8006eac <xPortStartScheduler+0x12c>)
 8006dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	22ff      	movs	r2, #255	; 0xff
 8006dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <xPortStartScheduler+0x130>)
 8006dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dee:	4b31      	ldr	r3, [pc, #196]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006df4:	e009      	b.n	8006e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006df6:	4b2f      	ldr	r3, [pc, #188]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e0a:	78fb      	ldrb	r3, [r7, #3]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d0ef      	beq.n	8006df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e16:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f1c3 0307 	rsb	r3, r3, #7
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d00a      	beq.n	8006e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60bb      	str	r3, [r7, #8]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e38:	4b1e      	ldr	r3, [pc, #120]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e42:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e4a:	4a1a      	ldr	r2, [pc, #104]	; (8006eb4 <xPortStartScheduler+0x134>)
 8006e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e56:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <xPortStartScheduler+0x138>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <xPortStartScheduler+0x138>)
 8006e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <xPortStartScheduler+0x138>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a14      	ldr	r2, [pc, #80]	; (8006eb8 <xPortStartScheduler+0x138>)
 8006e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e6e:	f000 f8dd 	bl	800702c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <xPortStartScheduler+0x13c>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e78:	f000 f8fc 	bl	8007074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <xPortStartScheduler+0x140>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0f      	ldr	r2, [pc, #60]	; (8006ec0 <xPortStartScheduler+0x140>)
 8006e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e88:	f7ff ff66 	bl	8006d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e8c:	f000 fc86 	bl	800779c <vTaskSwitchContext>
	prvTaskExitError();
 8006e90:	f7ff ff1e 	bl	8006cd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	e000ed00 	.word	0xe000ed00
 8006ea4:	410fc271 	.word	0x410fc271
 8006ea8:	410fc270 	.word	0x410fc270
 8006eac:	e000e400 	.word	0xe000e400
 8006eb0:	24003f6c 	.word	0x24003f6c
 8006eb4:	24003f70 	.word	0x24003f70
 8006eb8:	e000ed20 	.word	0xe000ed20
 8006ebc:	24000010 	.word	0x24000010
 8006ec0:	e000ef34 	.word	0xe000ef34

08006ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	607b      	str	r3, [r7, #4]
}
 8006edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <vPortEnterCritical+0x58>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	4a0d      	ldr	r2, [pc, #52]	; (8006f1c <vPortEnterCritical+0x58>)
 8006ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ee8:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <vPortEnterCritical+0x58>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10f      	bne.n	8006f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <vPortEnterCritical+0x5c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	603b      	str	r3, [r7, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <vPortEnterCritical+0x4a>
	}
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	24000010 	.word	0x24000010
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f2a:	4b12      	ldr	r3, [pc, #72]	; (8006f74 <vPortExitCritical+0x50>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <vPortExitCritical+0x24>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	607b      	str	r3, [r7, #4]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <vPortExitCritical+0x50>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <vPortExitCritical+0x50>)
 8006f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f52:	4b08      	ldr	r3, [pc, #32]	; (8006f74 <vPortExitCritical+0x50>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <vPortExitCritical+0x42>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	24000010 	.word	0x24000010
	...

08006f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f80:	f3ef 8009 	mrs	r0, PSP
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	4b15      	ldr	r3, [pc, #84]	; (8006fe0 <pxCurrentTCBConst>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	f01e 0f10 	tst.w	lr, #16
 8006f90:	bf08      	it	eq
 8006f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	6010      	str	r0, [r2, #0]
 8006f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fa4:	f380 8811 	msr	BASEPRI, r0
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f000 fbf4 	bl	800779c <vTaskSwitchContext>
 8006fb4:	f04f 0000 	mov.w	r0, #0
 8006fb8:	f380 8811 	msr	BASEPRI, r0
 8006fbc:	bc09      	pop	{r0, r3}
 8006fbe:	6819      	ldr	r1, [r3, #0]
 8006fc0:	6808      	ldr	r0, [r1, #0]
 8006fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc6:	f01e 0f10 	tst.w	lr, #16
 8006fca:	bf08      	it	eq
 8006fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fd0:	f380 8809 	msr	PSP, r0
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	f3af 8000 	nop.w

08006fe0 <pxCurrentTCBConst>:
 8006fe0:	24003f74 	.word	0x24003f74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop

08006fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	f383 8811 	msr	BASEPRI, r3
 8006ff6:	f3bf 8f6f 	isb	sy
 8006ffa:	f3bf 8f4f 	dsb	sy
 8006ffe:	607b      	str	r3, [r7, #4]
}
 8007000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007002:	f000 fb13 	bl	800762c <xTaskIncrementTick>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <SysTick_Handler+0x40>)
 800700e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	2300      	movs	r3, #0
 8007016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f383 8811 	msr	BASEPRI, r3
}
 800701e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	e000ed04 	.word	0xe000ed04

0800702c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007030:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <vPortSetupTimerInterrupt+0x34>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <vPortSetupTimerInterrupt+0x38>)
 8007038:	2200      	movs	r2, #0
 800703a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800703c:	4b0a      	ldr	r3, [pc, #40]	; (8007068 <vPortSetupTimerInterrupt+0x3c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <vPortSetupTimerInterrupt+0x40>)
 8007042:	fba2 2303 	umull	r2, r3, r2, r3
 8007046:	099b      	lsrs	r3, r3, #6
 8007048:	4a09      	ldr	r2, [pc, #36]	; (8007070 <vPortSetupTimerInterrupt+0x44>)
 800704a:	3b01      	subs	r3, #1
 800704c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800704e:	4b04      	ldr	r3, [pc, #16]	; (8007060 <vPortSetupTimerInterrupt+0x34>)
 8007050:	2207      	movs	r2, #7
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	e000e010 	.word	0xe000e010
 8007064:	e000e018 	.word	0xe000e018
 8007068:	24000000 	.word	0x24000000
 800706c:	10624dd3 	.word	0x10624dd3
 8007070:	e000e014 	.word	0xe000e014

08007074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007084 <vPortEnableVFP+0x10>
 8007078:	6801      	ldr	r1, [r0, #0]
 800707a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800707e:	6001      	str	r1, [r0, #0]
 8007080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007082:	bf00      	nop
 8007084:	e000ed88 	.word	0xe000ed88

08007088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08e      	sub	sp, #56	; 0x38
 800708c:	af04      	add	r7, sp, #16
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	623b      	str	r3, [r7, #32]
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <xTaskCreateStatic+0x46>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	61fb      	str	r3, [r7, #28]
}
 80070ca:	bf00      	nop
 80070cc:	e7fe      	b.n	80070cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070ce:	2354      	movs	r3, #84	; 0x54
 80070d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b54      	cmp	r3, #84	; 0x54
 80070d6:	d00a      	beq.n	80070ee <xTaskCreateStatic+0x66>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	61bb      	str	r3, [r7, #24]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d01e      	beq.n	8007134 <xTaskCreateStatic+0xac>
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01b      	beq.n	8007134 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007104:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	2202      	movs	r2, #2
 800710a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800710e:	2300      	movs	r3, #0
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	9302      	str	r3, [sp, #8]
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f000 f850 	bl	80071cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800712c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800712e:	f000 f8d5 	bl	80072dc <prvAddNewTaskToReadyList>
 8007132:	e001      	b.n	8007138 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007134:	2300      	movs	r3, #0
 8007136:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007138:	697b      	ldr	r3, [r7, #20]
	}
 800713a:	4618      	mov	r0, r3
 800713c:	3728      	adds	r7, #40	; 0x28
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007142:	b580      	push	{r7, lr}
 8007144:	b08c      	sub	sp, #48	; 0x30
 8007146:	af04      	add	r7, sp, #16
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	4613      	mov	r3, r2
 8007150:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff fae8 	bl	800672c <pvPortMalloc>
 800715c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00e      	beq.n	8007182 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007164:	2054      	movs	r0, #84	; 0x54
 8007166:	f7ff fae1 	bl	800672c <pvPortMalloc>
 800716a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
 8007178:	e005      	b.n	8007186 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	f7ff fba2 	bl	80068c4 <vPortFree>
 8007180:	e001      	b.n	8007186 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d017      	beq.n	80071bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007194:	88fa      	ldrh	r2, [r7, #6]
 8007196:	2300      	movs	r3, #0
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	9302      	str	r3, [sp, #8]
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f80e 	bl	80071cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071b0:	69f8      	ldr	r0, [r7, #28]
 80071b2:	f000 f893 	bl	80072dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e002      	b.n	80071c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071bc:	f04f 33ff 	mov.w	r3, #4294967295
 80071c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071c2:	69bb      	ldr	r3, [r7, #24]
	}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80071e4:	440b      	add	r3, r1
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f023 0307 	bic.w	r3, r3, #7
 80071f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <prvInitialiseNewTask+0x48>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	617b      	str	r3, [r7, #20]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01f      	beq.n	800725a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	e012      	b.n	8007246 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	7819      	ldrb	r1, [r3, #0]
 8007228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	3334      	adds	r3, #52	; 0x34
 8007230:	460a      	mov	r2, r1
 8007232:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3301      	adds	r3, #1
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	2b0f      	cmp	r3, #15
 800724a:	d9e9      	bls.n	8007220 <prvInitialiseNewTask+0x54>
 800724c:	e000      	b.n	8007250 <prvInitialiseNewTask+0x84>
			{
				break;
 800724e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007258:	e003      	b.n	8007262 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	2b06      	cmp	r3, #6
 8007266:	d901      	bls.n	800726c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007268:	2306      	movs	r3, #6
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007276:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	2200      	movs	r2, #0
 800727c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	3304      	adds	r3, #4
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fc5c 	bl	8006b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	3318      	adds	r3, #24
 800728c:	4618      	mov	r0, r3
 800728e:	f7ff fc57 	bl	8006b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	f1c3 0207 	rsb	r2, r3, #7
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072aa:	2200      	movs	r2, #0
 80072ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	68f9      	ldr	r1, [r7, #12]
 80072ba:	69b8      	ldr	r0, [r7, #24]
 80072bc:	f7ff fcd4 	bl	8006c68 <pxPortInitialiseStack>
 80072c0:	4602      	mov	r2, r0
 80072c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072d2:	bf00      	nop
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072e4:	f7ff fdee 	bl	8006ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072e8:	4b2a      	ldr	r3, [pc, #168]	; (8007394 <prvAddNewTaskToReadyList+0xb8>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3301      	adds	r3, #1
 80072ee:	4a29      	ldr	r2, [pc, #164]	; (8007394 <prvAddNewTaskToReadyList+0xb8>)
 80072f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072f2:	4b29      	ldr	r3, [pc, #164]	; (8007398 <prvAddNewTaskToReadyList+0xbc>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d109      	bne.n	800730e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072fa:	4a27      	ldr	r2, [pc, #156]	; (8007398 <prvAddNewTaskToReadyList+0xbc>)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007300:	4b24      	ldr	r3, [pc, #144]	; (8007394 <prvAddNewTaskToReadyList+0xb8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d110      	bne.n	800732a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007308:	f000 fabc 	bl	8007884 <prvInitialiseTaskLists>
 800730c:	e00d      	b.n	800732a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800730e:	4b23      	ldr	r3, [pc, #140]	; (800739c <prvAddNewTaskToReadyList+0xc0>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007316:	4b20      	ldr	r3, [pc, #128]	; (8007398 <prvAddNewTaskToReadyList+0xbc>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	429a      	cmp	r2, r3
 8007322:	d802      	bhi.n	800732a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007324:	4a1c      	ldr	r2, [pc, #112]	; (8007398 <prvAddNewTaskToReadyList+0xbc>)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800732a:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <prvAddNewTaskToReadyList+0xc4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3301      	adds	r3, #1
 8007330:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <prvAddNewTaskToReadyList+0xc4>)
 8007332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	2201      	movs	r2, #1
 800733a:	409a      	lsls	r2, r3
 800733c:	4b19      	ldr	r3, [pc, #100]	; (80073a4 <prvAddNewTaskToReadyList+0xc8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4313      	orrs	r3, r2
 8007342:	4a18      	ldr	r2, [pc, #96]	; (80073a4 <prvAddNewTaskToReadyList+0xc8>)
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4a15      	ldr	r2, [pc, #84]	; (80073a8 <prvAddNewTaskToReadyList+0xcc>)
 8007354:	441a      	add	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7ff fbfc 	bl	8006b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007362:	f7ff fddf 	bl	8006f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007366:	4b0d      	ldr	r3, [pc, #52]	; (800739c <prvAddNewTaskToReadyList+0xc0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00e      	beq.n	800738c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800736e:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <prvAddNewTaskToReadyList+0xbc>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	429a      	cmp	r2, r3
 800737a:	d207      	bcs.n	800738c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800737c:	4b0b      	ldr	r3, [pc, #44]	; (80073ac <prvAddNewTaskToReadyList+0xd0>)
 800737e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	24004074 	.word	0x24004074
 8007398:	24003f74 	.word	0x24003f74
 800739c:	24004080 	.word	0x24004080
 80073a0:	24004090 	.word	0x24004090
 80073a4:	2400407c 	.word	0x2400407c
 80073a8:	24003f78 	.word	0x24003f78
 80073ac:	e000ed04 	.word	0xe000ed04

080073b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d017      	beq.n	80073f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <vTaskDelay+0x60>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <vTaskDelay+0x30>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60bb      	str	r3, [r7, #8]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80073e0:	f000 f87a 	bl	80074d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073e4:	2100      	movs	r1, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb0a 	bl	8007a00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073ec:	f000 f882 	bl	80074f4 <xTaskResumeAll>
 80073f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <vTaskDelay+0x64>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	2400409c 	.word	0x2400409c
 8007414:	e000ed04 	.word	0xe000ed04

08007418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007426:	463a      	mov	r2, r7
 8007428:	1d39      	adds	r1, r7, #4
 800742a:	f107 0308 	add.w	r3, r7, #8
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 f96c 	bl	800070c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	9202      	str	r2, [sp, #8]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	2300      	movs	r3, #0
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	2300      	movs	r3, #0
 8007444:	460a      	mov	r2, r1
 8007446:	491e      	ldr	r1, [pc, #120]	; (80074c0 <vTaskStartScheduler+0xa8>)
 8007448:	481e      	ldr	r0, [pc, #120]	; (80074c4 <vTaskStartScheduler+0xac>)
 800744a:	f7ff fe1d 	bl	8007088 <xTaskCreateStatic>
 800744e:	4603      	mov	r3, r0
 8007450:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <vTaskStartScheduler+0xb0>)
 8007452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007454:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <vTaskStartScheduler+0xb0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800745c:	2301      	movs	r3, #1
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	e001      	b.n	8007466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d116      	bne.n	800749a <vTaskStartScheduler+0x82>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	613b      	str	r3, [r7, #16]
}
 800747e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007480:	4b12      	ldr	r3, [pc, #72]	; (80074cc <vTaskStartScheduler+0xb4>)
 8007482:	f04f 32ff 	mov.w	r2, #4294967295
 8007486:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007488:	4b11      	ldr	r3, [pc, #68]	; (80074d0 <vTaskStartScheduler+0xb8>)
 800748a:	2201      	movs	r2, #1
 800748c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <vTaskStartScheduler+0xbc>)
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007494:	f7ff fc74 	bl	8006d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007498:	e00e      	b.n	80074b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a0:	d10a      	bne.n	80074b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60fb      	str	r3, [r7, #12]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <vTaskStartScheduler+0x9e>
}
 80074b8:	bf00      	nop
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	08007bac 	.word	0x08007bac
 80074c4:	08007855 	.word	0x08007855
 80074c8:	24004098 	.word	0x24004098
 80074cc:	24004094 	.word	0x24004094
 80074d0:	24004080 	.word	0x24004080
 80074d4:	24004078 	.word	0x24004078

080074d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80074dc:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <vTaskSuspendAll+0x18>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3301      	adds	r3, #1
 80074e2:	4a03      	ldr	r2, [pc, #12]	; (80074f0 <vTaskSuspendAll+0x18>)
 80074e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80074e6:	bf00      	nop
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	2400409c 	.word	0x2400409c

080074f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074fe:	2300      	movs	r3, #0
 8007500:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007502:	4b41      	ldr	r3, [pc, #260]	; (8007608 <xTaskResumeAll+0x114>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <xTaskResumeAll+0x2c>
	__asm volatile
 800750a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	603b      	str	r3, [r7, #0]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007520:	f7ff fcd0 	bl	8006ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007524:	4b38      	ldr	r3, [pc, #224]	; (8007608 <xTaskResumeAll+0x114>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3b01      	subs	r3, #1
 800752a:	4a37      	ldr	r2, [pc, #220]	; (8007608 <xTaskResumeAll+0x114>)
 800752c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752e:	4b36      	ldr	r3, [pc, #216]	; (8007608 <xTaskResumeAll+0x114>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d161      	bne.n	80075fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007536:	4b35      	ldr	r3, [pc, #212]	; (800760c <xTaskResumeAll+0x118>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d05d      	beq.n	80075fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800753e:	e02e      	b.n	800759e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007540:	4b33      	ldr	r3, [pc, #204]	; (8007610 <xTaskResumeAll+0x11c>)
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3318      	adds	r3, #24
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fb61 	bl	8006c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3304      	adds	r3, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff fb5c 	bl	8006c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	2201      	movs	r2, #1
 8007562:	409a      	lsls	r2, r3
 8007564:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <xTaskResumeAll+0x120>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4313      	orrs	r3, r2
 800756a:	4a2a      	ldr	r2, [pc, #168]	; (8007614 <xTaskResumeAll+0x120>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	4a27      	ldr	r2, [pc, #156]	; (8007618 <xTaskResumeAll+0x124>)
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3304      	adds	r3, #4
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f7ff fae8 	bl	8006b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <xTaskResumeAll+0x128>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	429a      	cmp	r2, r3
 8007596:	d302      	bcc.n	800759e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007598:	4b21      	ldr	r3, [pc, #132]	; (8007620 <xTaskResumeAll+0x12c>)
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800759e:	4b1c      	ldr	r3, [pc, #112]	; (8007610 <xTaskResumeAll+0x11c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1cc      	bne.n	8007540 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80075ac:	f000 fa08 	bl	80079c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80075b0:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <xTaskResumeAll+0x130>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d010      	beq.n	80075de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075bc:	f000 f836 	bl	800762c <xTaskIncrementTick>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80075c6:	4b16      	ldr	r3, [pc, #88]	; (8007620 <xTaskResumeAll+0x12c>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f1      	bne.n	80075bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80075d8:	4b12      	ldr	r3, [pc, #72]	; (8007624 <xTaskResumeAll+0x130>)
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075de:	4b10      	ldr	r3, [pc, #64]	; (8007620 <xTaskResumeAll+0x12c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075e6:	2301      	movs	r3, #1
 80075e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075ea:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <xTaskResumeAll+0x134>)
 80075ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	f3bf 8f4f 	dsb	sy
 80075f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075fa:	f7ff fc93 	bl	8006f24 <vPortExitCritical>

	return xAlreadyYielded;
 80075fe:	68bb      	ldr	r3, [r7, #8]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2400409c 	.word	0x2400409c
 800760c:	24004074 	.word	0x24004074
 8007610:	24004034 	.word	0x24004034
 8007614:	2400407c 	.word	0x2400407c
 8007618:	24003f78 	.word	0x24003f78
 800761c:	24003f74 	.word	0x24003f74
 8007620:	24004088 	.word	0x24004088
 8007624:	24004084 	.word	0x24004084
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007636:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <xTaskIncrementTick+0x144>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	f040 808e 	bne.w	800775c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007640:	4b4c      	ldr	r3, [pc, #304]	; (8007774 <xTaskIncrementTick+0x148>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007648:	4a4a      	ldr	r2, [pc, #296]	; (8007774 <xTaskIncrementTick+0x148>)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d120      	bne.n	8007696 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007654:	4b48      	ldr	r3, [pc, #288]	; (8007778 <xTaskIncrementTick+0x14c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <xTaskIncrementTick+0x48>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	603b      	str	r3, [r7, #0]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <xTaskIncrementTick+0x46>
 8007674:	4b40      	ldr	r3, [pc, #256]	; (8007778 <xTaskIncrementTick+0x14c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	4b40      	ldr	r3, [pc, #256]	; (800777c <xTaskIncrementTick+0x150>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a3e      	ldr	r2, [pc, #248]	; (8007778 <xTaskIncrementTick+0x14c>)
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	4a3e      	ldr	r2, [pc, #248]	; (800777c <xTaskIncrementTick+0x150>)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	4b3d      	ldr	r3, [pc, #244]	; (8007780 <xTaskIncrementTick+0x154>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	4a3c      	ldr	r2, [pc, #240]	; (8007780 <xTaskIncrementTick+0x154>)
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	f000 f995 	bl	80079c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007696:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <xTaskIncrementTick+0x158>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	429a      	cmp	r2, r3
 800769e:	d348      	bcc.n	8007732 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076a0:	4b35      	ldr	r3, [pc, #212]	; (8007778 <xTaskIncrementTick+0x14c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076aa:	4b36      	ldr	r3, [pc, #216]	; (8007784 <xTaskIncrementTick+0x158>)
 80076ac:	f04f 32ff 	mov.w	r2, #4294967295
 80076b0:	601a      	str	r2, [r3, #0]
					break;
 80076b2:	e03e      	b.n	8007732 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b4:	4b30      	ldr	r3, [pc, #192]	; (8007778 <xTaskIncrementTick+0x14c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d203      	bcs.n	80076d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076cc:	4a2d      	ldr	r2, [pc, #180]	; (8007784 <xTaskIncrementTick+0x158>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80076d2:	e02e      	b.n	8007732 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fa9b 	bl	8006c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3318      	adds	r3, #24
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7ff fa92 	bl	8006c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	2201      	movs	r2, #1
 80076f6:	409a      	lsls	r2, r3
 80076f8:	4b23      	ldr	r3, [pc, #140]	; (8007788 <xTaskIncrementTick+0x15c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	4a22      	ldr	r2, [pc, #136]	; (8007788 <xTaskIncrementTick+0x15c>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a1f      	ldr	r2, [pc, #124]	; (800778c <xTaskIncrementTick+0x160>)
 8007710:	441a      	add	r2, r3
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3304      	adds	r3, #4
 8007716:	4619      	mov	r1, r3
 8007718:	4610      	mov	r0, r2
 800771a:	f7ff fa1e 	bl	8006b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <xTaskIncrementTick+0x164>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	429a      	cmp	r2, r3
 800772a:	d3b9      	bcc.n	80076a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007730:	e7b6      	b.n	80076a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007732:	4b17      	ldr	r3, [pc, #92]	; (8007790 <xTaskIncrementTick+0x164>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007738:	4914      	ldr	r1, [pc, #80]	; (800778c <xTaskIncrementTick+0x160>)
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d901      	bls.n	800774e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800774a:	2301      	movs	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800774e:	4b11      	ldr	r3, [pc, #68]	; (8007794 <xTaskIncrementTick+0x168>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d007      	beq.n	8007766 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007756:	2301      	movs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	e004      	b.n	8007766 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800775c:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <xTaskIncrementTick+0x16c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a0d      	ldr	r2, [pc, #52]	; (8007798 <xTaskIncrementTick+0x16c>)
 8007764:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007766:	697b      	ldr	r3, [r7, #20]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	2400409c 	.word	0x2400409c
 8007774:	24004078 	.word	0x24004078
 8007778:	2400402c 	.word	0x2400402c
 800777c:	24004030 	.word	0x24004030
 8007780:	2400408c 	.word	0x2400408c
 8007784:	24004094 	.word	0x24004094
 8007788:	2400407c 	.word	0x2400407c
 800778c:	24003f78 	.word	0x24003f78
 8007790:	24003f74 	.word	0x24003f74
 8007794:	24004088 	.word	0x24004088
 8007798:	24004084 	.word	0x24004084

0800779c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077a2:	4b27      	ldr	r3, [pc, #156]	; (8007840 <vTaskSwitchContext+0xa4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d003      	beq.n	80077b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077aa:	4b26      	ldr	r3, [pc, #152]	; (8007844 <vTaskSwitchContext+0xa8>)
 80077ac:	2201      	movs	r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077b0:	e03f      	b.n	8007832 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <vTaskSwitchContext+0xa8>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b8:	4b23      	ldr	r3, [pc, #140]	; (8007848 <vTaskSwitchContext+0xac>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	fab3 f383 	clz	r3, r3
 80077c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	f1c3 031f 	rsb	r3, r3, #31
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	491f      	ldr	r1, [pc, #124]	; (800784c <vTaskSwitchContext+0xb0>)
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	4613      	mov	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10a      	bne.n	80077f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	607b      	str	r3, [r7, #4]
}
 80077f4:	bf00      	nop
 80077f6:	e7fe      	b.n	80077f6 <vTaskSwitchContext+0x5a>
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4a12      	ldr	r2, [pc, #72]	; (800784c <vTaskSwitchContext+0xb0>)
 8007804:	4413      	add	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	3308      	adds	r3, #8
 800781a:	429a      	cmp	r2, r3
 800781c:	d104      	bne.n	8007828 <vTaskSwitchContext+0x8c>
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	4a08      	ldr	r2, [pc, #32]	; (8007850 <vTaskSwitchContext+0xb4>)
 8007830:	6013      	str	r3, [r2, #0]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2400409c 	.word	0x2400409c
 8007844:	24004088 	.word	0x24004088
 8007848:	2400407c 	.word	0x2400407c
 800784c:	24003f78 	.word	0x24003f78
 8007850:	24003f74 	.word	0x24003f74

08007854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800785c:	f000 f852 	bl	8007904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <prvIdleTask+0x28>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d9f9      	bls.n	800785c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <prvIdleTask+0x2c>)
 800786a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	f3bf 8f4f 	dsb	sy
 8007874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007878:	e7f0      	b.n	800785c <prvIdleTask+0x8>
 800787a:	bf00      	nop
 800787c:	24003f78 	.word	0x24003f78
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	e00c      	b.n	80078aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4a12      	ldr	r2, [pc, #72]	; (80078e4 <prvInitialiseTaskLists+0x60>)
 800789c:	4413      	add	r3, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff f92e 	bl	8006b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3301      	adds	r3, #1
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	d9ef      	bls.n	8007890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078b0:	480d      	ldr	r0, [pc, #52]	; (80078e8 <prvInitialiseTaskLists+0x64>)
 80078b2:	f7ff f925 	bl	8006b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078b6:	480d      	ldr	r0, [pc, #52]	; (80078ec <prvInitialiseTaskLists+0x68>)
 80078b8:	f7ff f922 	bl	8006b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078bc:	480c      	ldr	r0, [pc, #48]	; (80078f0 <prvInitialiseTaskLists+0x6c>)
 80078be:	f7ff f91f 	bl	8006b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078c2:	480c      	ldr	r0, [pc, #48]	; (80078f4 <prvInitialiseTaskLists+0x70>)
 80078c4:	f7ff f91c 	bl	8006b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078c8:	480b      	ldr	r0, [pc, #44]	; (80078f8 <prvInitialiseTaskLists+0x74>)
 80078ca:	f7ff f919 	bl	8006b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <prvInitialiseTaskLists+0x78>)
 80078d0:	4a05      	ldr	r2, [pc, #20]	; (80078e8 <prvInitialiseTaskLists+0x64>)
 80078d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <prvInitialiseTaskLists+0x7c>)
 80078d6:	4a05      	ldr	r2, [pc, #20]	; (80078ec <prvInitialiseTaskLists+0x68>)
 80078d8:	601a      	str	r2, [r3, #0]
}
 80078da:	bf00      	nop
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	24003f78 	.word	0x24003f78
 80078e8:	24004004 	.word	0x24004004
 80078ec:	24004018 	.word	0x24004018
 80078f0:	24004034 	.word	0x24004034
 80078f4:	24004048 	.word	0x24004048
 80078f8:	24004060 	.word	0x24004060
 80078fc:	2400402c 	.word	0x2400402c
 8007900:	24004030 	.word	0x24004030

08007904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800790a:	e019      	b.n	8007940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800790c:	f7ff fada 	bl	8006ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007910:	4b10      	ldr	r3, [pc, #64]	; (8007954 <prvCheckTasksWaitingTermination+0x50>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	4618      	mov	r0, r3
 800791e:	f7ff f979 	bl	8006c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007922:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <prvCheckTasksWaitingTermination+0x54>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3b01      	subs	r3, #1
 8007928:	4a0b      	ldr	r2, [pc, #44]	; (8007958 <prvCheckTasksWaitingTermination+0x54>)
 800792a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3b01      	subs	r3, #1
 8007932:	4a0a      	ldr	r2, [pc, #40]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 8007934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007936:	f7ff faf5 	bl	8006f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f810 	bl	8007960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <prvCheckTasksWaitingTermination+0x58>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e1      	bne.n	800790c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007948:	bf00      	nop
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	24004048 	.word	0x24004048
 8007958:	24004074 	.word	0x24004074
 800795c:	2400405c 	.word	0x2400405c

08007960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800796e:	2b00      	cmp	r3, #0
 8007970:	d108      	bne.n	8007984 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe ffa4 	bl	80068c4 <vPortFree>
				vPortFree( pxTCB );
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7fe ffa1 	bl	80068c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007982:	e018      	b.n	80079b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800798a:	2b01      	cmp	r3, #1
 800798c:	d103      	bne.n	8007996 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fe ff98 	bl	80068c4 <vPortFree>
	}
 8007994:	e00f      	b.n	80079b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800799c:	2b02      	cmp	r3, #2
 800799e:	d00a      	beq.n	80079b6 <prvDeleteTCB+0x56>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	60fb      	str	r3, [r7, #12]
}
 80079b2:	bf00      	nop
 80079b4:	e7fe      	b.n	80079b4 <prvDeleteTCB+0x54>
	}
 80079b6:	bf00      	nop
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079c6:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <prvResetNextTaskUnblockTime+0x38>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079d0:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <prvResetNextTaskUnblockTime+0x3c>)
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079d8:	e008      	b.n	80079ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <prvResetNextTaskUnblockTime+0x38>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4a04      	ldr	r2, [pc, #16]	; (80079fc <prvResetNextTaskUnblockTime+0x3c>)
 80079ea:	6013      	str	r3, [r2, #0]
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	2400402c 	.word	0x2400402c
 80079fc:	24004094 	.word	0x24004094

08007a00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a0a:	4b29      	ldr	r3, [pc, #164]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a10:	4b28      	ldr	r3, [pc, #160]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f8fc 	bl	8006c14 <uxListRemove>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a22:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	2201      	movs	r2, #1
 8007a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2e:	43da      	mvns	r2, r3
 8007a30:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4013      	ands	r3, r2
 8007a36:	4a20      	ldr	r2, [pc, #128]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d10a      	bne.n	8007a58 <prvAddCurrentTaskToDelayedList+0x58>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a48:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	4619      	mov	r1, r3
 8007a50:	481a      	ldr	r0, [pc, #104]	; (8007abc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a52:	f7ff f882 	bl	8006b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a56:	e026      	b.n	8007aa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a60:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d209      	bcs.n	8007a84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7ff f890 	bl	8006ba2 <vListInsert>
}
 8007a82:	e010      	b.n	8007aa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a84:	4b0f      	ldr	r3, [pc, #60]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7ff f886 	bl	8006ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a96:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d202      	bcs.n	8007aa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007aa0:	4a09      	ldr	r2, [pc, #36]	; (8007ac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6013      	str	r3, [r2, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	24004078 	.word	0x24004078
 8007ab4:	24003f74 	.word	0x24003f74
 8007ab8:	2400407c 	.word	0x2400407c
 8007abc:	24004060 	.word	0x24004060
 8007ac0:	24004030 	.word	0x24004030
 8007ac4:	2400402c 	.word	0x2400402c
 8007ac8:	24004094 	.word	0x24004094

08007acc <__libc_init_array>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4d0d      	ldr	r5, [pc, #52]	; (8007b04 <__libc_init_array+0x38>)
 8007ad0:	4c0d      	ldr	r4, [pc, #52]	; (8007b08 <__libc_init_array+0x3c>)
 8007ad2:	1b64      	subs	r4, r4, r5
 8007ad4:	10a4      	asrs	r4, r4, #2
 8007ad6:	2600      	movs	r6, #0
 8007ad8:	42a6      	cmp	r6, r4
 8007ada:	d109      	bne.n	8007af0 <__libc_init_array+0x24>
 8007adc:	4d0b      	ldr	r5, [pc, #44]	; (8007b0c <__libc_init_array+0x40>)
 8007ade:	4c0c      	ldr	r4, [pc, #48]	; (8007b10 <__libc_init_array+0x44>)
 8007ae0:	f000 f820 	bl	8007b24 <_init>
 8007ae4:	1b64      	subs	r4, r4, r5
 8007ae6:	10a4      	asrs	r4, r4, #2
 8007ae8:	2600      	movs	r6, #0
 8007aea:	42a6      	cmp	r6, r4
 8007aec:	d105      	bne.n	8007afa <__libc_init_array+0x2e>
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af4:	4798      	blx	r3
 8007af6:	3601      	adds	r6, #1
 8007af8:	e7ee      	b.n	8007ad8 <__libc_init_array+0xc>
 8007afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007afe:	4798      	blx	r3
 8007b00:	3601      	adds	r6, #1
 8007b02:	e7f2      	b.n	8007aea <__libc_init_array+0x1e>
 8007b04:	08007bf4 	.word	0x08007bf4
 8007b08:	08007bf4 	.word	0x08007bf4
 8007b0c:	08007bf4 	.word	0x08007bf4
 8007b10:	08007bf8 	.word	0x08007bf8

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
