
ProyectoFinal_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005228  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  081054c8  081054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08105540  08105540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08105544  08105544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  10000000  08105548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000041bc  1000001c  08105564  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100041d8  08105564  000241d8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029ad5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000045bf  00000000  00000000  00049b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001708  00000000  00000000  0004e0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001580  00000000  00000000  0004f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c15f  00000000  00000000  00050d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001bcb0  00000000  00000000  0008cec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018fc71  00000000  00000000  000a8b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002387e8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006080  00000000  00000000  0023883c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000001c 	.word	0x1000001c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081054b0 	.word	0x081054b0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000020 	.word	0x10000020
 81002dc:	081054b0 	.word	0x081054b0

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b0b      	ldr	r3, [pc, #44]	; (8100314 <SystemInit+0x34>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a0a      	ldr	r2, [pc, #40]	; (8100314 <SystemInit+0x34>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b07      	ldr	r3, [pc, #28]	; (8100314 <SystemInit+0x34>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a06      	ldr	r2, [pc, #24]	; (8100314 <SystemInit+0x34>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100300:	4b04      	ldr	r3, [pc, #16]	; (8100314 <SystemInit+0x34>)
 8100302:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100306:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100308:	bf00      	nop
 810030a:	46bd      	mov	sp, r7
 810030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100310:	4770      	bx	lr
 8100312:	bf00      	nop
 8100314:	e000ed00 	.word	0xe000ed00

08100318 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8100318:	b480      	push	{r7}
 810031a:	b085      	sub	sp, #20
 810031c:	af00      	add	r7, sp, #0
 810031e:	60f8      	str	r0, [r7, #12]
 8100320:	60b9      	str	r1, [r7, #8]
 8100322:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8100324:	68fb      	ldr	r3, [r7, #12]
 8100326:	4a07      	ldr	r2, [pc, #28]	; (8100344 <vApplicationGetIdleTaskMemory+0x2c>)
 8100328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 810032a:	68bb      	ldr	r3, [r7, #8]
 810032c:	4a06      	ldr	r2, [pc, #24]	; (8100348 <vApplicationGetIdleTaskMemory+0x30>)
 810032e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8100330:	687b      	ldr	r3, [r7, #4]
 8100332:	2280      	movs	r2, #128	; 0x80
 8100334:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8100336:	bf00      	nop
 8100338:	3714      	adds	r7, #20
 810033a:	46bd      	mov	sp, r7
 810033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100340:	4770      	bx	lr
 8100342:	bf00      	nop
 8100344:	10000038 	.word	0x10000038
 8100348:	1000008c 	.word	0x1000008c

0810034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810034c:	b5b0      	push	{r4, r5, r7, lr}
 810034e:	b094      	sub	sp, #80	; 0x50
 8100350:	af00      	add	r7, sp, #0

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* CPU2 goes to STOP mode and waits CPU1 to initialize all the steps first */
	/* CPU1 will wakeup CPU2 with semaphore take and release events */
	/* HW semaphore Clock enable */
	__HAL_RCC_HSEM_CLK_ENABLE();
 8100352:	4b44      	ldr	r3, [pc, #272]	; (8100464 <main+0x118>)
 8100354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100358:	4a42      	ldr	r2, [pc, #264]	; (8100464 <main+0x118>)
 810035a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810035e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100362:	4b40      	ldr	r3, [pc, #256]	; (8100464 <main+0x118>)
 8100364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810036c:	607b      	str	r3, [r7, #4]
 810036e:	687b      	ldr	r3, [r7, #4]
	HAL_HSEM_ActivateNotification(HSEM_WAKEUP_CPU2_MASK);
 8100370:	2001      	movs	r0, #1
 8100372:	f000 fdc5 	bl	8100f00 <HAL_HSEM_ActivateNotification>
	HAL_PWREx_ClearPendingEvent();
 8100376:	f000 ff75 	bl	8101264 <HAL_PWREx_ClearPendingEvent>
	HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810037a:	2201      	movs	r2, #1
 810037c:	2102      	movs	r1, #2
 810037e:	2000      	movs	r0, #0
 8100380:	f000 fef6 	bl	8101170 <HAL_PWREx_EnterSTOPMode>
	__HAL_HSEM_CLEAR_FLAG(HSEM_WAKEUP_CPU2_MASK);
 8100384:	4b38      	ldr	r3, [pc, #224]	; (8100468 <main+0x11c>)
 8100386:	681b      	ldr	r3, [r3, #0]
 8100388:	091b      	lsrs	r3, r3, #4
 810038a:	f003 030f 	and.w	r3, r3, #15
 810038e:	2b07      	cmp	r3, #7
 8100390:	d108      	bne.n	81003a4 <main+0x58>
 8100392:	4b36      	ldr	r3, [pc, #216]	; (810046c <main+0x120>)
 8100394:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100398:	4a34      	ldr	r2, [pc, #208]	; (810046c <main+0x120>)
 810039a:	f043 0301 	orr.w	r3, r3, #1
 810039e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81003a2:	e007      	b.n	81003b4 <main+0x68>
 81003a4:	4b31      	ldr	r3, [pc, #196]	; (810046c <main+0x120>)
 81003a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003aa:	4a30      	ldr	r2, [pc, #192]	; (810046c <main+0x120>)
 81003ac:	f043 0301 	orr.w	r3, r3, #1
 81003b0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003b4:	f000 fa82 	bl	81008bc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003b8:	f000 f8ac 	bl	8100514 <MX_GPIO_Init>
  MX_I2C1_Init();
 81003bc:	f000 f86a 	bl	8100494 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  while (!ringbuff_is_ready(bombaAire) || !ringbuff_is_ready(valvula)) {}
 81003c0:	bf00      	nop
 81003c2:	4b2b      	ldr	r3, [pc, #172]	; (8100470 <main+0x124>)
 81003c4:	681b      	ldr	r3, [r3, #0]
 81003c6:	4618      	mov	r0, r3
 81003c8:	f004 ff42 	bl	8105250 <ringbuff_is_ready>
 81003cc:	4603      	mov	r3, r0
 81003ce:	2b00      	cmp	r3, #0
 81003d0:	d0f7      	beq.n	81003c2 <main+0x76>
 81003d2:	4b28      	ldr	r3, [pc, #160]	; (8100474 <main+0x128>)
 81003d4:	681b      	ldr	r3, [r3, #0]
 81003d6:	4618      	mov	r0, r3
 81003d8:	f004 ff3a 	bl	8105250 <ringbuff_is_ready>
 81003dc:	4603      	mov	r3, r0
 81003de:	2b00      	cmp	r3, #0
 81003e0:	d0ef      	beq.n	81003c2 <main+0x76>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of lecturaSensor */
  osMessageQDef(lecturaSensor, 16, uint16_t);
 81003e2:	4b25      	ldr	r3, [pc, #148]	; (8100478 <main+0x12c>)
 81003e4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 81003e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81003ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  lecturaSensorHandle = osMessageCreate(osMessageQ(lecturaSensor), NULL);
 81003ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 81003f2:	2100      	movs	r1, #0
 81003f4:	4618      	mov	r0, r3
 81003f6:	f002 fd4e 	bl	8102e96 <osMessageCreate>
 81003fa:	4603      	mov	r3, r0
 81003fc:	4a1f      	ldr	r2, [pc, #124]	; (810047c <main+0x130>)
 81003fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  controlQueueHandle = xQueueCreate(1, sizeof(int));
 8100400:	2200      	movs	r2, #0
 8100402:	2104      	movs	r1, #4
 8100404:	2001      	movs	r0, #1
 8100406:	f003 fbef 	bl	8103be8 <xQueueGenericCreate>
 810040a:	4603      	mov	r3, r0
 810040c:	4a1c      	ldr	r2, [pc, #112]	; (8100480 <main+0x134>)
 810040e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of controlTask */
  osThreadDef(controlTask, control_Init, osPriorityHigh, 0, 128);
 8100410:	4b1c      	ldr	r3, [pc, #112]	; (8100484 <main+0x138>)
 8100412:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8100416:	461d      	mov	r5, r3
 8100418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810041a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810041c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8100424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100428:	2100      	movs	r1, #0
 810042a:	4618      	mov	r0, r3
 810042c:	f002 fcd3 	bl	8102dd6 <osThreadCreate>
 8100430:	4603      	mov	r3, r0
 8100432:	4a15      	ldr	r2, [pc, #84]	; (8100488 <main+0x13c>)
 8100434:	6013      	str	r3, [r2, #0]

  /* definition and creation of LeerSensor */
  osThreadDef(LeerSensor, LeerSensor_Init, osPriorityHigh, 0, 128);
 8100436:	4b15      	ldr	r3, [pc, #84]	; (810048c <main+0x140>)
 8100438:	f107 0408 	add.w	r4, r7, #8
 810043c:	461d      	mov	r5, r3
 810043e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100442:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100446:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LeerSensorHandle = osThreadCreate(osThread(LeerSensor), NULL);
 810044a:	f107 0308 	add.w	r3, r7, #8
 810044e:	2100      	movs	r1, #0
 8100450:	4618      	mov	r0, r3
 8100452:	f002 fcc0 	bl	8102dd6 <osThreadCreate>
 8100456:	4603      	mov	r3, r0
 8100458:	4a0d      	ldr	r2, [pc, #52]	; (8100490 <main+0x144>)
 810045a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 810045c:	f002 fcb4 	bl	8102dc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100460:	e7fe      	b.n	8100460 <main+0x114>
 8100462:	bf00      	nop
 8100464:	58024400 	.word	0x58024400
 8100468:	e000ed00 	.word	0xe000ed00
 810046c:	58026400 	.word	0x58026400
 8100470:	10000008 	.word	0x10000008
 8100474:	1000000c 	.word	0x1000000c
 8100478:	081054e0 	.word	0x081054e0
 810047c:	100040c0 	.word	0x100040c0
 8100480:	1000028c 	.word	0x1000028c
 8100484:	081054f0 	.word	0x081054f0
 8100488:	100040c8 	.word	0x100040c8
 810048c:	0810550c 	.word	0x0810550c
 8100490:	100040c4 	.word	0x100040c4

08100494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8100494:	b580      	push	{r7, lr}
 8100496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100498:	4b1b      	ldr	r3, [pc, #108]	; (8100508 <MX_I2C1_Init+0x74>)
 810049a:	4a1c      	ldr	r2, [pc, #112]	; (810050c <MX_I2C1_Init+0x78>)
 810049c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810049e:	4b1a      	ldr	r3, [pc, #104]	; (8100508 <MX_I2C1_Init+0x74>)
 81004a0:	4a1b      	ldr	r2, [pc, #108]	; (8100510 <MX_I2C1_Init+0x7c>)
 81004a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81004a4:	4b18      	ldr	r3, [pc, #96]	; (8100508 <MX_I2C1_Init+0x74>)
 81004a6:	2200      	movs	r2, #0
 81004a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81004aa:	4b17      	ldr	r3, [pc, #92]	; (8100508 <MX_I2C1_Init+0x74>)
 81004ac:	2201      	movs	r2, #1
 81004ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81004b0:	4b15      	ldr	r3, [pc, #84]	; (8100508 <MX_I2C1_Init+0x74>)
 81004b2:	2200      	movs	r2, #0
 81004b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81004b6:	4b14      	ldr	r3, [pc, #80]	; (8100508 <MX_I2C1_Init+0x74>)
 81004b8:	2200      	movs	r2, #0
 81004ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81004bc:	4b12      	ldr	r3, [pc, #72]	; (8100508 <MX_I2C1_Init+0x74>)
 81004be:	2200      	movs	r2, #0
 81004c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81004c2:	4b11      	ldr	r3, [pc, #68]	; (8100508 <MX_I2C1_Init+0x74>)
 81004c4:	2200      	movs	r2, #0
 81004c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81004c8:	4b0f      	ldr	r3, [pc, #60]	; (8100508 <MX_I2C1_Init+0x74>)
 81004ca:	2200      	movs	r2, #0
 81004cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81004ce:	480e      	ldr	r0, [pc, #56]	; (8100508 <MX_I2C1_Init+0x74>)
 81004d0:	f000 fd28 	bl	8100f24 <HAL_I2C_Init>
 81004d4:	4603      	mov	r3, r0
 81004d6:	2b00      	cmp	r3, #0
 81004d8:	d001      	beq.n	81004de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81004da:	f000 f8b2 	bl	8100642 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81004de:	2100      	movs	r1, #0
 81004e0:	4809      	ldr	r0, [pc, #36]	; (8100508 <MX_I2C1_Init+0x74>)
 81004e2:	f000 fdae 	bl	8101042 <HAL_I2CEx_ConfigAnalogFilter>
 81004e6:	4603      	mov	r3, r0
 81004e8:	2b00      	cmp	r3, #0
 81004ea:	d001      	beq.n	81004f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81004ec:	f000 f8a9 	bl	8100642 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81004f0:	2100      	movs	r1, #0
 81004f2:	4805      	ldr	r0, [pc, #20]	; (8100508 <MX_I2C1_Init+0x74>)
 81004f4:	f000 fdf0 	bl	81010d8 <HAL_I2CEx_ConfigDigitalFilter>
 81004f8:	4603      	mov	r3, r0
 81004fa:	2b00      	cmp	r3, #0
 81004fc:	d001      	beq.n	8100502 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81004fe:	f000 f8a0 	bl	8100642 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8100502:	bf00      	nop
 8100504:	bd80      	pop	{r7, pc}
 8100506:	bf00      	nop
 8100508:	10004074 	.word	0x10004074
 810050c:	40005400 	.word	0x40005400
 8100510:	307075b1 	.word	0x307075b1

08100514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100514:	b480      	push	{r7}
 8100516:	b083      	sub	sp, #12
 8100518:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810051a:	4b0a      	ldr	r3, [pc, #40]	; (8100544 <MX_GPIO_Init+0x30>)
 810051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100520:	4a08      	ldr	r2, [pc, #32]	; (8100544 <MX_GPIO_Init+0x30>)
 8100522:	f043 0302 	orr.w	r3, r3, #2
 8100526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810052a:	4b06      	ldr	r3, [pc, #24]	; (8100544 <MX_GPIO_Init+0x30>)
 810052c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100530:	f003 0302 	and.w	r3, r3, #2
 8100534:	607b      	str	r3, [r7, #4]
 8100536:	687b      	ldr	r3, [r7, #4]

}
 8100538:	bf00      	nop
 810053a:	370c      	adds	r7, #12
 810053c:	46bd      	mov	sp, r7
 810053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100542:	4770      	bx	lr
 8100544:	58024400 	.word	0x58024400

08100548 <control_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_control_Init */
void control_Init(void const * argument)
{
 8100548:	b580      	push	{r7, lr}
 810054a:	b088      	sub	sp, #32
 810054c:	af00      	add	r7, sp, #0
 810054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  int pr=0;
 8100550:	2300      	movs	r3, #0
 8100552:	61fb      	str	r3, [r7, #28]
  char comp='0';
 8100554:	2330      	movs	r3, #48	; 0x30
 8100556:	75fb      	strb	r3, [r7, #23]
  char val='0';
 8100558:	2330      	movs	r3, #48	; 0x30
 810055a:	75bb      	strb	r3, [r7, #22]
  osEvent evt;
  //float *getVal;

  //Borrar cuando se realize comunicacion CAN
  int pEsp=10;
 810055c:	230a      	movs	r3, #10
 810055e:	61bb      	str	r3, [r7, #24]

  for(;;)
  {
	//Receive queue
	//while(!xQueueReceive(controlQueueHandle,&p,1000));
	evt = osMessageGet(lecturaSensorHandle,osWaitForever);
 8100560:	4b17      	ldr	r3, [pc, #92]	; (81005c0 <control_Init+0x78>)
 8100562:	6819      	ldr	r1, [r3, #0]
 8100564:	f107 0308 	add.w	r3, r7, #8
 8100568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810056c:	4618      	mov	r0, r3
 810056e:	f002 fcfb 	bl	8102f68 <osMessageGet>
	if (evt.status == osEventMessage) {
 8100572:	68bb      	ldr	r3, [r7, #8]
 8100574:	2b10      	cmp	r3, #16
 8100576:	d1f3      	bne.n	8100560 <control_Init+0x18>
		pr=evt.value.v;
 8100578:	68fb      	ldr	r3, [r7, #12]
 810057a:	61fb      	str	r3, [r7, #28]
		//pr=*getVal;
		if (pr<pEsp){
 810057c:	69fa      	ldr	r2, [r7, #28]
 810057e:	69bb      	ldr	r3, [r7, #24]
 8100580:	429a      	cmp	r2, r3
 8100582:	da04      	bge.n	810058e <control_Init+0x46>
			comp='1';
 8100584:	2331      	movs	r3, #49	; 0x31
 8100586:	75fb      	strb	r3, [r7, #23]
			val='0';
 8100588:	2330      	movs	r3, #48	; 0x30
 810058a:	75bb      	strb	r3, [r7, #22]
 810058c:	e007      	b.n	810059e <control_Init+0x56>
		}else if(pr>pEsp){
 810058e:	69fa      	ldr	r2, [r7, #28]
 8100590:	69bb      	ldr	r3, [r7, #24]
 8100592:	429a      	cmp	r2, r3
 8100594:	dd03      	ble.n	810059e <control_Init+0x56>
			comp='0';
 8100596:	2330      	movs	r3, #48	; 0x30
 8100598:	75fb      	strb	r3, [r7, #23]
			val='1';
 810059a:	2331      	movs	r3, #49	; 0x31
 810059c:	75bb      	strb	r3, [r7, #22]
		}
		//xQueueSend(compresor2Handle,&comp,0);
		ringbuff_write(bombaAire, &comp, 1);
 810059e:	4b09      	ldr	r3, [pc, #36]	; (81005c4 <control_Init+0x7c>)
 81005a0:	681b      	ldr	r3, [r3, #0]
 81005a2:	f107 0117 	add.w	r1, r7, #23
 81005a6:	2201      	movs	r2, #1
 81005a8:	4618      	mov	r0, r3
 81005aa:	f004 fe79 	bl	81052a0 <ringbuff_write>
		//xQueueSend(valvula2Handle,&val,0);
		ringbuff_write(valvula, &val, 1);
 81005ae:	4b06      	ldr	r3, [pc, #24]	; (81005c8 <control_Init+0x80>)
 81005b0:	681b      	ldr	r3, [r3, #0]
 81005b2:	f107 0116 	add.w	r1, r7, #22
 81005b6:	2201      	movs	r2, #1
 81005b8:	4618      	mov	r0, r3
 81005ba:	f004 fe71 	bl	81052a0 <ringbuff_write>
	evt = osMessageGet(lecturaSensorHandle,osWaitForever);
 81005be:	e7cf      	b.n	8100560 <control_Init+0x18>
 81005c0:	100040c0 	.word	0x100040c0
 81005c4:	10000008 	.word	0x10000008
 81005c8:	1000000c 	.word	0x1000000c

081005cc <LeerSensor_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LeerSensor_Init */
void LeerSensor_Init(void const * argument)
{
 81005cc:	b580      	push	{r7, lr}
 81005ce:	b084      	sub	sp, #16
 81005d0:	af00      	add	r7, sp, #0
 81005d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LeerSensor_Init */
  float p=5;
 81005d4:	4b10      	ldr	r3, [pc, #64]	; (8100618 <LeerSensor_Init+0x4c>)
 81005d6:	60fb      	str	r3, [r7, #12]
  //int go=200;
  /* Infinite loop */
  for(;;)
  {
	//p=BMP180_calculate_true_pressure(0);
	if (p==15){
 81005d8:	edd7 7a03 	vldr	s15, [r7, #12]
 81005dc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 81005e0:	eef4 7a47 	vcmp.f32	s15, s14
 81005e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81005e8:	d102      	bne.n	81005f0 <LeerSensor_Init+0x24>
		p=5;
 81005ea:	4b0b      	ldr	r3, [pc, #44]	; (8100618 <LeerSensor_Init+0x4c>)
 81005ec:	60fb      	str	r3, [r7, #12]
 81005ee:	e001      	b.n	81005f4 <LeerSensor_Init+0x28>
	}else{
		p=15;
 81005f0:	4b0a      	ldr	r3, [pc, #40]	; (810061c <LeerSensor_Init+0x50>)
 81005f2:	60fb      	str	r3, [r7, #12]
	}
	//pr=&p;
	//xQueueSend(controlQueueHandle,&p,1000);
	osMessagePut(lecturaSensorHandle, (uint32_t)p,osWaitForever);
 81005f4:	4b0a      	ldr	r3, [pc, #40]	; (8100620 <LeerSensor_Init+0x54>)
 81005f6:	681b      	ldr	r3, [r3, #0]
 81005f8:	edd7 7a03 	vldr	s15, [r7, #12]
 81005fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100604:	ee17 1a90 	vmov	r1, s15
 8100608:	4618      	mov	r0, r3
 810060a:	f002 fc6d 	bl	8102ee8 <osMessagePut>
	//Utilizada para can

	//Para llamar a Sensor
	osDelay(1000);
 810060e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100612:	f002 fc2c 	bl	8102e6e <osDelay>
	if (p==15){
 8100616:	e7df      	b.n	81005d8 <LeerSensor_Init+0xc>
 8100618:	40a00000 	.word	0x40a00000
 810061c:	41700000 	.word	0x41700000
 8100620:	100040c0 	.word	0x100040c0

08100624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100624:	b580      	push	{r7, lr}
 8100626:	b082      	sub	sp, #8
 8100628:	af00      	add	r7, sp, #0
 810062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 810062c:	687b      	ldr	r3, [r7, #4]
 810062e:	681b      	ldr	r3, [r3, #0]
 8100630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100634:	d101      	bne.n	810063a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100636:	f000 f99f 	bl	8100978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810063a:	bf00      	nop
 810063c:	3708      	adds	r7, #8
 810063e:	46bd      	mov	sp, r7
 8100640:	bd80      	pop	{r7, pc}

08100642 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100642:	b480      	push	{r7}
 8100644:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100646:	b672      	cpsid	i
}
 8100648:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810064a:	e7fe      	b.n	810064a <Error_Handler+0x8>

0810064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810064c:	b580      	push	{r7, lr}
 810064e:	b082      	sub	sp, #8
 8100650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100652:	4b0c      	ldr	r3, [pc, #48]	; (8100684 <HAL_MspInit+0x38>)
 8100654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100658:	4a0a      	ldr	r2, [pc, #40]	; (8100684 <HAL_MspInit+0x38>)
 810065a:	f043 0302 	orr.w	r3, r3, #2
 810065e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100662:	4b08      	ldr	r3, [pc, #32]	; (8100684 <HAL_MspInit+0x38>)
 8100664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100668:	f003 0302 	and.w	r3, r3, #2
 810066c:	607b      	str	r3, [r7, #4]
 810066e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100670:	2200      	movs	r2, #0
 8100672:	210f      	movs	r1, #15
 8100674:	f06f 0001 	mvn.w	r0, #1
 8100678:	f000 fa56 	bl	8100b28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810067c:	bf00      	nop
 810067e:	3708      	adds	r7, #8
 8100680:	46bd      	mov	sp, r7
 8100682:	bd80      	pop	{r7, pc}
 8100684:	58024400 	.word	0x58024400

08100688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8100688:	b580      	push	{r7, lr}
 810068a:	b0b8      	sub	sp, #224	; 0xe0
 810068c:	af00      	add	r7, sp, #0
 810068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100690:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100694:	2200      	movs	r2, #0
 8100696:	601a      	str	r2, [r3, #0]
 8100698:	605a      	str	r2, [r3, #4]
 810069a:	609a      	str	r2, [r3, #8]
 810069c:	60da      	str	r2, [r3, #12]
 810069e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81006a0:	f107 0310 	add.w	r3, r7, #16
 81006a4:	22bc      	movs	r2, #188	; 0xbc
 81006a6:	2100      	movs	r1, #0
 81006a8:	4618      	mov	r0, r3
 81006aa:	f004 fef9 	bl	81054a0 <memset>
  if(hi2c->Instance==I2C1)
 81006ae:	687b      	ldr	r3, [r7, #4]
 81006b0:	681b      	ldr	r3, [r3, #0]
 81006b2:	4a25      	ldr	r2, [pc, #148]	; (8100748 <HAL_I2C_MspInit+0xc0>)
 81006b4:	4293      	cmp	r3, r2
 81006b6:	d142      	bne.n	810073e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81006b8:	2308      	movs	r3, #8
 81006ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81006bc:	2300      	movs	r3, #0
 81006be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81006c2:	f107 0310 	add.w	r3, r7, #16
 81006c6:	4618      	mov	r0, r3
 81006c8:	f000 ffde 	bl	8101688 <HAL_RCCEx_PeriphCLKConfig>
 81006cc:	4603      	mov	r3, r0
 81006ce:	2b00      	cmp	r3, #0
 81006d0:	d001      	beq.n	81006d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 81006d2:	f7ff ffb6 	bl	8100642 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81006d6:	4b1d      	ldr	r3, [pc, #116]	; (810074c <HAL_I2C_MspInit+0xc4>)
 81006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006dc:	4a1b      	ldr	r2, [pc, #108]	; (810074c <HAL_I2C_MspInit+0xc4>)
 81006de:	f043 0302 	orr.w	r3, r3, #2
 81006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006e6:	4b19      	ldr	r3, [pc, #100]	; (810074c <HAL_I2C_MspInit+0xc4>)
 81006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006ec:	f003 0302 	and.w	r3, r3, #2
 81006f0:	60fb      	str	r3, [r7, #12]
 81006f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81006f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 81006f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81006fc:	2312      	movs	r3, #18
 81006fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100702:	2300      	movs	r3, #0
 8100704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100708:	2300      	movs	r3, #0
 810070a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810070e:	2304      	movs	r3, #4
 8100710:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100714:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100718:	4619      	mov	r1, r3
 810071a:	480d      	ldr	r0, [pc, #52]	; (8100750 <HAL_I2C_MspInit+0xc8>)
 810071c:	f000 fa40 	bl	8100ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8100720:	4b0a      	ldr	r3, [pc, #40]	; (810074c <HAL_I2C_MspInit+0xc4>)
 8100722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100726:	4a09      	ldr	r2, [pc, #36]	; (810074c <HAL_I2C_MspInit+0xc4>)
 8100728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810072c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100730:	4b06      	ldr	r3, [pc, #24]	; (810074c <HAL_I2C_MspInit+0xc4>)
 8100732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810073a:	60bb      	str	r3, [r7, #8]
 810073c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 810073e:	bf00      	nop
 8100740:	37e0      	adds	r7, #224	; 0xe0
 8100742:	46bd      	mov	sp, r7
 8100744:	bd80      	pop	{r7, pc}
 8100746:	bf00      	nop
 8100748:	40005400 	.word	0x40005400
 810074c:	58024400 	.word	0x58024400
 8100750:	58020400 	.word	0x58020400

08100754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100754:	b580      	push	{r7, lr}
 8100756:	b090      	sub	sp, #64	; 0x40
 8100758:	af00      	add	r7, sp, #0
 810075a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810075c:	687b      	ldr	r3, [r7, #4]
 810075e:	2b0f      	cmp	r3, #15
 8100760:	d827      	bhi.n	81007b2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8100762:	2200      	movs	r2, #0
 8100764:	6879      	ldr	r1, [r7, #4]
 8100766:	201c      	movs	r0, #28
 8100768:	f000 f9de 	bl	8100b28 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 810076c:	201c      	movs	r0, #28
 810076e:	f000 f9f5 	bl	8100b5c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100772:	4a29      	ldr	r2, [pc, #164]	; (8100818 <HAL_InitTick+0xc4>)
 8100774:	687b      	ldr	r3, [r7, #4]
 8100776:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8100778:	4b28      	ldr	r3, [pc, #160]	; (810081c <HAL_InitTick+0xc8>)
 810077a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810077e:	4a27      	ldr	r2, [pc, #156]	; (810081c <HAL_InitTick+0xc8>)
 8100780:	f043 0301 	orr.w	r3, r3, #1
 8100784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100788:	4b24      	ldr	r3, [pc, #144]	; (810081c <HAL_InitTick+0xc8>)
 810078a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810078e:	f003 0301 	and.w	r3, r3, #1
 8100792:	60fb      	str	r3, [r7, #12]
 8100794:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100796:	f107 0210 	add.w	r2, r7, #16
 810079a:	f107 0314 	add.w	r3, r7, #20
 810079e:	4611      	mov	r1, r2
 81007a0:	4618      	mov	r0, r3
 81007a2:	f000 ff2f 	bl	8101604 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81007aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81007ac:	2b00      	cmp	r3, #0
 81007ae:	d106      	bne.n	81007be <HAL_InitTick+0x6a>
 81007b0:	e001      	b.n	81007b6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 81007b2:	2301      	movs	r3, #1
 81007b4:	e02c      	b.n	8100810 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81007b6:	f000 ff0f 	bl	81015d8 <HAL_RCC_GetPCLK1Freq>
 81007ba:	63f8      	str	r0, [r7, #60]	; 0x3c
 81007bc:	e004      	b.n	81007c8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81007be:	f000 ff0b 	bl	81015d8 <HAL_RCC_GetPCLK1Freq>
 81007c2:	4603      	mov	r3, r0
 81007c4:	005b      	lsls	r3, r3, #1
 81007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81007c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81007ca:	4a15      	ldr	r2, [pc, #84]	; (8100820 <HAL_InitTick+0xcc>)
 81007cc:	fba2 2303 	umull	r2, r3, r2, r3
 81007d0:	0c9b      	lsrs	r3, r3, #18
 81007d2:	3b01      	subs	r3, #1
 81007d4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 81007d6:	4b13      	ldr	r3, [pc, #76]	; (8100824 <HAL_InitTick+0xd0>)
 81007d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81007dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 81007de:	4b11      	ldr	r3, [pc, #68]	; (8100824 <HAL_InitTick+0xd0>)
 81007e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 81007e4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 81007e6:	4a0f      	ldr	r2, [pc, #60]	; (8100824 <HAL_InitTick+0xd0>)
 81007e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81007ea:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 81007ec:	4b0d      	ldr	r3, [pc, #52]	; (8100824 <HAL_InitTick+0xd0>)
 81007ee:	2200      	movs	r2, #0
 81007f0:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81007f2:	4b0c      	ldr	r3, [pc, #48]	; (8100824 <HAL_InitTick+0xd0>)
 81007f4:	2200      	movs	r2, #0
 81007f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 81007f8:	480a      	ldr	r0, [pc, #40]	; (8100824 <HAL_InitTick+0xd0>)
 81007fa:	f001 ffe9 	bl	81027d0 <HAL_TIM_Base_Init>
 81007fe:	4603      	mov	r3, r0
 8100800:	2b00      	cmp	r3, #0
 8100802:	d104      	bne.n	810080e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8100804:	4807      	ldr	r0, [pc, #28]	; (8100824 <HAL_InitTick+0xd0>)
 8100806:	f002 f845 	bl	8102894 <HAL_TIM_Base_Start_IT>
 810080a:	4603      	mov	r3, r0
 810080c:	e000      	b.n	8100810 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 810080e:	2301      	movs	r3, #1
}
 8100810:	4618      	mov	r0, r3
 8100812:	3740      	adds	r7, #64	; 0x40
 8100814:	46bd      	mov	sp, r7
 8100816:	bd80      	pop	{r7, pc}
 8100818:	10000010 	.word	0x10000010
 810081c:	58024400 	.word	0x58024400
 8100820:	431bde83 	.word	0x431bde83
 8100824:	10004188 	.word	0x10004188

08100828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100828:	b480      	push	{r7}
 810082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810082c:	e7fe      	b.n	810082c <NMI_Handler+0x4>

0810082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810082e:	b480      	push	{r7}
 8100830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100832:	e7fe      	b.n	8100832 <HardFault_Handler+0x4>

08100834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100834:	b480      	push	{r7}
 8100836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100838:	e7fe      	b.n	8100838 <MemManage_Handler+0x4>

0810083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810083a:	b480      	push	{r7}
 810083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810083e:	e7fe      	b.n	810083e <BusFault_Handler+0x4>

08100840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100840:	b480      	push	{r7}
 8100842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100844:	e7fe      	b.n	8100844 <UsageFault_Handler+0x4>

08100846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100846:	b480      	push	{r7}
 8100848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810084a:	bf00      	nop
 810084c:	46bd      	mov	sp, r7
 810084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100852:	4770      	bx	lr

08100854 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8100854:	b580      	push	{r7, lr}
 8100856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8100858:	4802      	ldr	r0, [pc, #8]	; (8100864 <TIM2_IRQHandler+0x10>)
 810085a:	f002 f88b 	bl	8102974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810085e:	bf00      	nop
 8100860:	bd80      	pop	{r7, pc}
 8100862:	bf00      	nop
 8100864:	10004188 	.word	0x10004188

08100868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100868:	f8df d034 	ldr.w	sp, [pc, #52]	; 81008a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810086c:	f7ff fd38 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100870:	480c      	ldr	r0, [pc, #48]	; (81008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100872:	490d      	ldr	r1, [pc, #52]	; (81008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100874:	4a0d      	ldr	r2, [pc, #52]	; (81008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100878:	e002      	b.n	8100880 <LoopCopyDataInit>

0810087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810087e:	3304      	adds	r3, #4

08100880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100884:	d3f9      	bcc.n	810087a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100886:	4a0a      	ldr	r2, [pc, #40]	; (81008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100888:	4c0a      	ldr	r4, [pc, #40]	; (81008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810088c:	e001      	b.n	8100892 <LoopFillZerobss>

0810088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100890:	3204      	adds	r2, #4

08100892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100894:	d3fb      	bcc.n	810088e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100896:	f004 fdd1 	bl	810543c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810089a:	f7ff fd57 	bl	810034c <main>
  bx  lr
 810089e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81008a0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81008a4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81008a8:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 81008ac:	08105548 	.word	0x08105548
  ldr r2, =_sbss
 81008b0:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 81008b4:	100041d8 	.word	0x100041d8

081008b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81008b8:	e7fe      	b.n	81008b8 <ADC3_IRQHandler>
	...

081008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81008bc:	b580      	push	{r7, lr}
 81008be:	b082      	sub	sp, #8
 81008c0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81008c2:	4b28      	ldr	r3, [pc, #160]	; (8100964 <HAL_Init+0xa8>)
 81008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81008c8:	4a26      	ldr	r2, [pc, #152]	; (8100964 <HAL_Init+0xa8>)
 81008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81008d2:	4b24      	ldr	r3, [pc, #144]	; (8100964 <HAL_Init+0xa8>)
 81008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81008d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81008dc:	603b      	str	r3, [r7, #0]
 81008de:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81008e0:	4b21      	ldr	r3, [pc, #132]	; (8100968 <HAL_Init+0xac>)
 81008e2:	681b      	ldr	r3, [r3, #0]
 81008e4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81008e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81008ec:	4a1e      	ldr	r2, [pc, #120]	; (8100968 <HAL_Init+0xac>)
 81008ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81008f2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81008f4:	4b1c      	ldr	r3, [pc, #112]	; (8100968 <HAL_Init+0xac>)
 81008f6:	681b      	ldr	r3, [r3, #0]
 81008f8:	4a1b      	ldr	r2, [pc, #108]	; (8100968 <HAL_Init+0xac>)
 81008fa:	f043 0301 	orr.w	r3, r3, #1
 81008fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100900:	2003      	movs	r0, #3
 8100902:	f000 f906 	bl	8100b12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100906:	f000 fcbb 	bl	8101280 <HAL_RCC_GetSysClockFreq>
 810090a:	4602      	mov	r2, r0
 810090c:	4b15      	ldr	r3, [pc, #84]	; (8100964 <HAL_Init+0xa8>)
 810090e:	699b      	ldr	r3, [r3, #24]
 8100910:	0a1b      	lsrs	r3, r3, #8
 8100912:	f003 030f 	and.w	r3, r3, #15
 8100916:	4915      	ldr	r1, [pc, #84]	; (810096c <HAL_Init+0xb0>)
 8100918:	5ccb      	ldrb	r3, [r1, r3]
 810091a:	f003 031f 	and.w	r3, r3, #31
 810091e:	fa22 f303 	lsr.w	r3, r2, r3
 8100922:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100924:	4b0f      	ldr	r3, [pc, #60]	; (8100964 <HAL_Init+0xa8>)
 8100926:	699b      	ldr	r3, [r3, #24]
 8100928:	f003 030f 	and.w	r3, r3, #15
 810092c:	4a0f      	ldr	r2, [pc, #60]	; (810096c <HAL_Init+0xb0>)
 810092e:	5cd3      	ldrb	r3, [r2, r3]
 8100930:	f003 031f 	and.w	r3, r3, #31
 8100934:	687a      	ldr	r2, [r7, #4]
 8100936:	fa22 f303 	lsr.w	r3, r2, r3
 810093a:	4a0d      	ldr	r2, [pc, #52]	; (8100970 <HAL_Init+0xb4>)
 810093c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810093e:	4b0c      	ldr	r3, [pc, #48]	; (8100970 <HAL_Init+0xb4>)
 8100940:	681b      	ldr	r3, [r3, #0]
 8100942:	4a0c      	ldr	r2, [pc, #48]	; (8100974 <HAL_Init+0xb8>)
 8100944:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100946:	200f      	movs	r0, #15
 8100948:	f7ff ff04 	bl	8100754 <HAL_InitTick>
 810094c:	4603      	mov	r3, r0
 810094e:	2b00      	cmp	r3, #0
 8100950:	d001      	beq.n	8100956 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100952:	2301      	movs	r3, #1
 8100954:	e002      	b.n	810095c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100956:	f7ff fe79 	bl	810064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810095a:	2300      	movs	r3, #0
}
 810095c:	4618      	mov	r0, r3
 810095e:	3708      	adds	r7, #8
 8100960:	46bd      	mov	sp, r7
 8100962:	bd80      	pop	{r7, pc}
 8100964:	58024400 	.word	0x58024400
 8100968:	40024400 	.word	0x40024400
 810096c:	08105530 	.word	0x08105530
 8100970:	10000004 	.word	0x10000004
 8100974:	10000000 	.word	0x10000000

08100978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100978:	b480      	push	{r7}
 810097a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810097c:	4b06      	ldr	r3, [pc, #24]	; (8100998 <HAL_IncTick+0x20>)
 810097e:	781b      	ldrb	r3, [r3, #0]
 8100980:	461a      	mov	r2, r3
 8100982:	4b06      	ldr	r3, [pc, #24]	; (810099c <HAL_IncTick+0x24>)
 8100984:	681b      	ldr	r3, [r3, #0]
 8100986:	4413      	add	r3, r2
 8100988:	4a04      	ldr	r2, [pc, #16]	; (810099c <HAL_IncTick+0x24>)
 810098a:	6013      	str	r3, [r2, #0]
}
 810098c:	bf00      	nop
 810098e:	46bd      	mov	sp, r7
 8100990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100994:	4770      	bx	lr
 8100996:	bf00      	nop
 8100998:	10000014 	.word	0x10000014
 810099c:	100041d4 	.word	0x100041d4

081009a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81009a0:	b480      	push	{r7}
 81009a2:	af00      	add	r7, sp, #0
  return uwTick;
 81009a4:	4b03      	ldr	r3, [pc, #12]	; (81009b4 <HAL_GetTick+0x14>)
 81009a6:	681b      	ldr	r3, [r3, #0]
}
 81009a8:	4618      	mov	r0, r3
 81009aa:	46bd      	mov	sp, r7
 81009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009b0:	4770      	bx	lr
 81009b2:	bf00      	nop
 81009b4:	100041d4 	.word	0x100041d4

081009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81009b8:	b480      	push	{r7}
 81009ba:	b085      	sub	sp, #20
 81009bc:	af00      	add	r7, sp, #0
 81009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81009c0:	687b      	ldr	r3, [r7, #4]
 81009c2:	f003 0307 	and.w	r3, r3, #7
 81009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81009c8:	4b0c      	ldr	r3, [pc, #48]	; (81009fc <__NVIC_SetPriorityGrouping+0x44>)
 81009ca:	68db      	ldr	r3, [r3, #12]
 81009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81009ce:	68ba      	ldr	r2, [r7, #8]
 81009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81009d4:	4013      	ands	r3, r2
 81009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81009d8:	68fb      	ldr	r3, [r7, #12]
 81009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81009dc:	68bb      	ldr	r3, [r7, #8]
 81009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81009ea:	4a04      	ldr	r2, [pc, #16]	; (81009fc <__NVIC_SetPriorityGrouping+0x44>)
 81009ec:	68bb      	ldr	r3, [r7, #8]
 81009ee:	60d3      	str	r3, [r2, #12]
}
 81009f0:	bf00      	nop
 81009f2:	3714      	adds	r7, #20
 81009f4:	46bd      	mov	sp, r7
 81009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009fa:	4770      	bx	lr
 81009fc:	e000ed00 	.word	0xe000ed00

08100a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100a00:	b480      	push	{r7}
 8100a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100a04:	4b04      	ldr	r3, [pc, #16]	; (8100a18 <__NVIC_GetPriorityGrouping+0x18>)
 8100a06:	68db      	ldr	r3, [r3, #12]
 8100a08:	0a1b      	lsrs	r3, r3, #8
 8100a0a:	f003 0307 	and.w	r3, r3, #7
}
 8100a0e:	4618      	mov	r0, r3
 8100a10:	46bd      	mov	sp, r7
 8100a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a16:	4770      	bx	lr
 8100a18:	e000ed00 	.word	0xe000ed00

08100a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100a1c:	b480      	push	{r7}
 8100a1e:	b083      	sub	sp, #12
 8100a20:	af00      	add	r7, sp, #0
 8100a22:	4603      	mov	r3, r0
 8100a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a2a:	2b00      	cmp	r3, #0
 8100a2c:	db0b      	blt.n	8100a46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100a2e:	88fb      	ldrh	r3, [r7, #6]
 8100a30:	f003 021f 	and.w	r2, r3, #31
 8100a34:	4907      	ldr	r1, [pc, #28]	; (8100a54 <__NVIC_EnableIRQ+0x38>)
 8100a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a3a:	095b      	lsrs	r3, r3, #5
 8100a3c:	2001      	movs	r0, #1
 8100a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8100a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100a46:	bf00      	nop
 8100a48:	370c      	adds	r7, #12
 8100a4a:	46bd      	mov	sp, r7
 8100a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a50:	4770      	bx	lr
 8100a52:	bf00      	nop
 8100a54:	e000e100 	.word	0xe000e100

08100a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100a58:	b480      	push	{r7}
 8100a5a:	b083      	sub	sp, #12
 8100a5c:	af00      	add	r7, sp, #0
 8100a5e:	4603      	mov	r3, r0
 8100a60:	6039      	str	r1, [r7, #0]
 8100a62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a68:	2b00      	cmp	r3, #0
 8100a6a:	db0a      	blt.n	8100a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a6c:	683b      	ldr	r3, [r7, #0]
 8100a6e:	b2da      	uxtb	r2, r3
 8100a70:	490c      	ldr	r1, [pc, #48]	; (8100aa4 <__NVIC_SetPriority+0x4c>)
 8100a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100a76:	0112      	lsls	r2, r2, #4
 8100a78:	b2d2      	uxtb	r2, r2
 8100a7a:	440b      	add	r3, r1
 8100a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100a80:	e00a      	b.n	8100a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100a82:	683b      	ldr	r3, [r7, #0]
 8100a84:	b2da      	uxtb	r2, r3
 8100a86:	4908      	ldr	r1, [pc, #32]	; (8100aa8 <__NVIC_SetPriority+0x50>)
 8100a88:	88fb      	ldrh	r3, [r7, #6]
 8100a8a:	f003 030f 	and.w	r3, r3, #15
 8100a8e:	3b04      	subs	r3, #4
 8100a90:	0112      	lsls	r2, r2, #4
 8100a92:	b2d2      	uxtb	r2, r2
 8100a94:	440b      	add	r3, r1
 8100a96:	761a      	strb	r2, [r3, #24]
}
 8100a98:	bf00      	nop
 8100a9a:	370c      	adds	r7, #12
 8100a9c:	46bd      	mov	sp, r7
 8100a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa2:	4770      	bx	lr
 8100aa4:	e000e100 	.word	0xe000e100
 8100aa8:	e000ed00 	.word	0xe000ed00

08100aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100aac:	b480      	push	{r7}
 8100aae:	b089      	sub	sp, #36	; 0x24
 8100ab0:	af00      	add	r7, sp, #0
 8100ab2:	60f8      	str	r0, [r7, #12]
 8100ab4:	60b9      	str	r1, [r7, #8]
 8100ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100ab8:	68fb      	ldr	r3, [r7, #12]
 8100aba:	f003 0307 	and.w	r3, r3, #7
 8100abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100ac0:	69fb      	ldr	r3, [r7, #28]
 8100ac2:	f1c3 0307 	rsb	r3, r3, #7
 8100ac6:	2b04      	cmp	r3, #4
 8100ac8:	bf28      	it	cs
 8100aca:	2304      	movcs	r3, #4
 8100acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100ace:	69fb      	ldr	r3, [r7, #28]
 8100ad0:	3304      	adds	r3, #4
 8100ad2:	2b06      	cmp	r3, #6
 8100ad4:	d902      	bls.n	8100adc <NVIC_EncodePriority+0x30>
 8100ad6:	69fb      	ldr	r3, [r7, #28]
 8100ad8:	3b03      	subs	r3, #3
 8100ada:	e000      	b.n	8100ade <NVIC_EncodePriority+0x32>
 8100adc:	2300      	movs	r3, #0
 8100ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100ae4:	69bb      	ldr	r3, [r7, #24]
 8100ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8100aea:	43da      	mvns	r2, r3
 8100aec:	68bb      	ldr	r3, [r7, #8]
 8100aee:	401a      	ands	r2, r3
 8100af0:	697b      	ldr	r3, [r7, #20]
 8100af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100af8:	697b      	ldr	r3, [r7, #20]
 8100afa:	fa01 f303 	lsl.w	r3, r1, r3
 8100afe:	43d9      	mvns	r1, r3
 8100b00:	687b      	ldr	r3, [r7, #4]
 8100b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100b04:	4313      	orrs	r3, r2
         );
}
 8100b06:	4618      	mov	r0, r3
 8100b08:	3724      	adds	r7, #36	; 0x24
 8100b0a:	46bd      	mov	sp, r7
 8100b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b10:	4770      	bx	lr

08100b12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b12:	b580      	push	{r7, lr}
 8100b14:	b082      	sub	sp, #8
 8100b16:	af00      	add	r7, sp, #0
 8100b18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100b1a:	6878      	ldr	r0, [r7, #4]
 8100b1c:	f7ff ff4c 	bl	81009b8 <__NVIC_SetPriorityGrouping>
}
 8100b20:	bf00      	nop
 8100b22:	3708      	adds	r7, #8
 8100b24:	46bd      	mov	sp, r7
 8100b26:	bd80      	pop	{r7, pc}

08100b28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100b28:	b580      	push	{r7, lr}
 8100b2a:	b086      	sub	sp, #24
 8100b2c:	af00      	add	r7, sp, #0
 8100b2e:	4603      	mov	r3, r0
 8100b30:	60b9      	str	r1, [r7, #8]
 8100b32:	607a      	str	r2, [r7, #4]
 8100b34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100b36:	f7ff ff63 	bl	8100a00 <__NVIC_GetPriorityGrouping>
 8100b3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100b3c:	687a      	ldr	r2, [r7, #4]
 8100b3e:	68b9      	ldr	r1, [r7, #8]
 8100b40:	6978      	ldr	r0, [r7, #20]
 8100b42:	f7ff ffb3 	bl	8100aac <NVIC_EncodePriority>
 8100b46:	4602      	mov	r2, r0
 8100b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100b4c:	4611      	mov	r1, r2
 8100b4e:	4618      	mov	r0, r3
 8100b50:	f7ff ff82 	bl	8100a58 <__NVIC_SetPriority>
}
 8100b54:	bf00      	nop
 8100b56:	3718      	adds	r7, #24
 8100b58:	46bd      	mov	sp, r7
 8100b5a:	bd80      	pop	{r7, pc}

08100b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b5c:	b580      	push	{r7, lr}
 8100b5e:	b082      	sub	sp, #8
 8100b60:	af00      	add	r7, sp, #0
 8100b62:	4603      	mov	r3, r0
 8100b64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b6a:	4618      	mov	r0, r3
 8100b6c:	f7ff ff56 	bl	8100a1c <__NVIC_EnableIRQ>
}
 8100b70:	bf00      	nop
 8100b72:	3708      	adds	r7, #8
 8100b74:	46bd      	mov	sp, r7
 8100b76:	bd80      	pop	{r7, pc}

08100b78 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100b78:	b480      	push	{r7}
 8100b7a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100b7c:	4b07      	ldr	r3, [pc, #28]	; (8100b9c <HAL_GetCurrentCPUID+0x24>)
 8100b7e:	681b      	ldr	r3, [r3, #0]
 8100b80:	091b      	lsrs	r3, r3, #4
 8100b82:	f003 030f 	and.w	r3, r3, #15
 8100b86:	2b07      	cmp	r3, #7
 8100b88:	d101      	bne.n	8100b8e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100b8a:	2303      	movs	r3, #3
 8100b8c:	e000      	b.n	8100b90 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100b8e:	2301      	movs	r3, #1
  }
}
 8100b90:	4618      	mov	r0, r3
 8100b92:	46bd      	mov	sp, r7
 8100b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b98:	4770      	bx	lr
 8100b9a:	bf00      	nop
 8100b9c:	e000ed00 	.word	0xe000ed00

08100ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100ba0:	b480      	push	{r7}
 8100ba2:	b089      	sub	sp, #36	; 0x24
 8100ba4:	af00      	add	r7, sp, #0
 8100ba6:	6078      	str	r0, [r7, #4]
 8100ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100baa:	2300      	movs	r3, #0
 8100bac:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100bae:	4b89      	ldr	r3, [pc, #548]	; (8100dd4 <HAL_GPIO_Init+0x234>)
 8100bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100bb2:	e194      	b.n	8100ede <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100bb4:	683b      	ldr	r3, [r7, #0]
 8100bb6:	681a      	ldr	r2, [r3, #0]
 8100bb8:	2101      	movs	r1, #1
 8100bba:	69fb      	ldr	r3, [r7, #28]
 8100bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8100bc0:	4013      	ands	r3, r2
 8100bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100bc4:	693b      	ldr	r3, [r7, #16]
 8100bc6:	2b00      	cmp	r3, #0
 8100bc8:	f000 8186 	beq.w	8100ed8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100bcc:	683b      	ldr	r3, [r7, #0]
 8100bce:	685b      	ldr	r3, [r3, #4]
 8100bd0:	2b01      	cmp	r3, #1
 8100bd2:	d00b      	beq.n	8100bec <HAL_GPIO_Init+0x4c>
 8100bd4:	683b      	ldr	r3, [r7, #0]
 8100bd6:	685b      	ldr	r3, [r3, #4]
 8100bd8:	2b02      	cmp	r3, #2
 8100bda:	d007      	beq.n	8100bec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100bdc:	683b      	ldr	r3, [r7, #0]
 8100bde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100be0:	2b11      	cmp	r3, #17
 8100be2:	d003      	beq.n	8100bec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100be4:	683b      	ldr	r3, [r7, #0]
 8100be6:	685b      	ldr	r3, [r3, #4]
 8100be8:	2b12      	cmp	r3, #18
 8100bea:	d130      	bne.n	8100c4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100bec:	687b      	ldr	r3, [r7, #4]
 8100bee:	689b      	ldr	r3, [r3, #8]
 8100bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	005b      	lsls	r3, r3, #1
 8100bf6:	2203      	movs	r2, #3
 8100bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8100bfc:	43db      	mvns	r3, r3
 8100bfe:	69ba      	ldr	r2, [r7, #24]
 8100c00:	4013      	ands	r3, r2
 8100c02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100c04:	683b      	ldr	r3, [r7, #0]
 8100c06:	68da      	ldr	r2, [r3, #12]
 8100c08:	69fb      	ldr	r3, [r7, #28]
 8100c0a:	005b      	lsls	r3, r3, #1
 8100c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8100c10:	69ba      	ldr	r2, [r7, #24]
 8100c12:	4313      	orrs	r3, r2
 8100c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100c16:	687b      	ldr	r3, [r7, #4]
 8100c18:	69ba      	ldr	r2, [r7, #24]
 8100c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100c1c:	687b      	ldr	r3, [r7, #4]
 8100c1e:	685b      	ldr	r3, [r3, #4]
 8100c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100c22:	2201      	movs	r2, #1
 8100c24:	69fb      	ldr	r3, [r7, #28]
 8100c26:	fa02 f303 	lsl.w	r3, r2, r3
 8100c2a:	43db      	mvns	r3, r3
 8100c2c:	69ba      	ldr	r2, [r7, #24]
 8100c2e:	4013      	ands	r3, r2
 8100c30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8100c32:	683b      	ldr	r3, [r7, #0]
 8100c34:	685b      	ldr	r3, [r3, #4]
 8100c36:	091b      	lsrs	r3, r3, #4
 8100c38:	f003 0201 	and.w	r2, r3, #1
 8100c3c:	69fb      	ldr	r3, [r7, #28]
 8100c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c42:	69ba      	ldr	r2, [r7, #24]
 8100c44:	4313      	orrs	r3, r2
 8100c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	68db      	ldr	r3, [r3, #12]
 8100c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100c54:	69fb      	ldr	r3, [r7, #28]
 8100c56:	005b      	lsls	r3, r3, #1
 8100c58:	2203      	movs	r2, #3
 8100c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c5e:	43db      	mvns	r3, r3
 8100c60:	69ba      	ldr	r2, [r7, #24]
 8100c62:	4013      	ands	r3, r2
 8100c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100c66:	683b      	ldr	r3, [r7, #0]
 8100c68:	689a      	ldr	r2, [r3, #8]
 8100c6a:	69fb      	ldr	r3, [r7, #28]
 8100c6c:	005b      	lsls	r3, r3, #1
 8100c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c72:	69ba      	ldr	r2, [r7, #24]
 8100c74:	4313      	orrs	r3, r2
 8100c76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100c78:	687b      	ldr	r3, [r7, #4]
 8100c7a:	69ba      	ldr	r2, [r7, #24]
 8100c7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100c7e:	683b      	ldr	r3, [r7, #0]
 8100c80:	685b      	ldr	r3, [r3, #4]
 8100c82:	2b02      	cmp	r3, #2
 8100c84:	d003      	beq.n	8100c8e <HAL_GPIO_Init+0xee>
 8100c86:	683b      	ldr	r3, [r7, #0]
 8100c88:	685b      	ldr	r3, [r3, #4]
 8100c8a:	2b12      	cmp	r3, #18
 8100c8c:	d123      	bne.n	8100cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100c8e:	69fb      	ldr	r3, [r7, #28]
 8100c90:	08da      	lsrs	r2, r3, #3
 8100c92:	687b      	ldr	r3, [r7, #4]
 8100c94:	3208      	adds	r2, #8
 8100c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100c9c:	69fb      	ldr	r3, [r7, #28]
 8100c9e:	f003 0307 	and.w	r3, r3, #7
 8100ca2:	009b      	lsls	r3, r3, #2
 8100ca4:	220f      	movs	r2, #15
 8100ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8100caa:	43db      	mvns	r3, r3
 8100cac:	69ba      	ldr	r2, [r7, #24]
 8100cae:	4013      	ands	r3, r2
 8100cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100cb2:	683b      	ldr	r3, [r7, #0]
 8100cb4:	691a      	ldr	r2, [r3, #16]
 8100cb6:	69fb      	ldr	r3, [r7, #28]
 8100cb8:	f003 0307 	and.w	r3, r3, #7
 8100cbc:	009b      	lsls	r3, r3, #2
 8100cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8100cc2:	69ba      	ldr	r2, [r7, #24]
 8100cc4:	4313      	orrs	r3, r2
 8100cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100cc8:	69fb      	ldr	r3, [r7, #28]
 8100cca:	08da      	lsrs	r2, r3, #3
 8100ccc:	687b      	ldr	r3, [r7, #4]
 8100cce:	3208      	adds	r2, #8
 8100cd0:	69b9      	ldr	r1, [r7, #24]
 8100cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100cd6:	687b      	ldr	r3, [r7, #4]
 8100cd8:	681b      	ldr	r3, [r3, #0]
 8100cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100cdc:	69fb      	ldr	r3, [r7, #28]
 8100cde:	005b      	lsls	r3, r3, #1
 8100ce0:	2203      	movs	r2, #3
 8100ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ce6:	43db      	mvns	r3, r3
 8100ce8:	69ba      	ldr	r2, [r7, #24]
 8100cea:	4013      	ands	r3, r2
 8100cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100cee:	683b      	ldr	r3, [r7, #0]
 8100cf0:	685b      	ldr	r3, [r3, #4]
 8100cf2:	f003 0203 	and.w	r2, r3, #3
 8100cf6:	69fb      	ldr	r3, [r7, #28]
 8100cf8:	005b      	lsls	r3, r3, #1
 8100cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8100cfe:	69ba      	ldr	r2, [r7, #24]
 8100d00:	4313      	orrs	r3, r2
 8100d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100d04:	687b      	ldr	r3, [r7, #4]
 8100d06:	69ba      	ldr	r2, [r7, #24]
 8100d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8100d0a:	683b      	ldr	r3, [r7, #0]
 8100d0c:	685b      	ldr	r3, [r3, #4]
 8100d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8100d12:	2b00      	cmp	r3, #0
 8100d14:	f000 80e0 	beq.w	8100ed8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d18:	4b2f      	ldr	r3, [pc, #188]	; (8100dd8 <HAL_GPIO_Init+0x238>)
 8100d1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d1e:	4a2e      	ldr	r2, [pc, #184]	; (8100dd8 <HAL_GPIO_Init+0x238>)
 8100d20:	f043 0302 	orr.w	r3, r3, #2
 8100d24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d28:	4b2b      	ldr	r3, [pc, #172]	; (8100dd8 <HAL_GPIO_Init+0x238>)
 8100d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d2e:	f003 0302 	and.w	r3, r3, #2
 8100d32:	60fb      	str	r3, [r7, #12]
 8100d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100d36:	4a29      	ldr	r2, [pc, #164]	; (8100ddc <HAL_GPIO_Init+0x23c>)
 8100d38:	69fb      	ldr	r3, [r7, #28]
 8100d3a:	089b      	lsrs	r3, r3, #2
 8100d3c:	3302      	adds	r3, #2
 8100d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100d44:	69fb      	ldr	r3, [r7, #28]
 8100d46:	f003 0303 	and.w	r3, r3, #3
 8100d4a:	009b      	lsls	r3, r3, #2
 8100d4c:	220f      	movs	r2, #15
 8100d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8100d52:	43db      	mvns	r3, r3
 8100d54:	69ba      	ldr	r2, [r7, #24]
 8100d56:	4013      	ands	r3, r2
 8100d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100d5a:	687b      	ldr	r3, [r7, #4]
 8100d5c:	4a20      	ldr	r2, [pc, #128]	; (8100de0 <HAL_GPIO_Init+0x240>)
 8100d5e:	4293      	cmp	r3, r2
 8100d60:	d052      	beq.n	8100e08 <HAL_GPIO_Init+0x268>
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	4a1f      	ldr	r2, [pc, #124]	; (8100de4 <HAL_GPIO_Init+0x244>)
 8100d66:	4293      	cmp	r3, r2
 8100d68:	d031      	beq.n	8100dce <HAL_GPIO_Init+0x22e>
 8100d6a:	687b      	ldr	r3, [r7, #4]
 8100d6c:	4a1e      	ldr	r2, [pc, #120]	; (8100de8 <HAL_GPIO_Init+0x248>)
 8100d6e:	4293      	cmp	r3, r2
 8100d70:	d02b      	beq.n	8100dca <HAL_GPIO_Init+0x22a>
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	4a1d      	ldr	r2, [pc, #116]	; (8100dec <HAL_GPIO_Init+0x24c>)
 8100d76:	4293      	cmp	r3, r2
 8100d78:	d025      	beq.n	8100dc6 <HAL_GPIO_Init+0x226>
 8100d7a:	687b      	ldr	r3, [r7, #4]
 8100d7c:	4a1c      	ldr	r2, [pc, #112]	; (8100df0 <HAL_GPIO_Init+0x250>)
 8100d7e:	4293      	cmp	r3, r2
 8100d80:	d01f      	beq.n	8100dc2 <HAL_GPIO_Init+0x222>
 8100d82:	687b      	ldr	r3, [r7, #4]
 8100d84:	4a1b      	ldr	r2, [pc, #108]	; (8100df4 <HAL_GPIO_Init+0x254>)
 8100d86:	4293      	cmp	r3, r2
 8100d88:	d019      	beq.n	8100dbe <HAL_GPIO_Init+0x21e>
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	4a1a      	ldr	r2, [pc, #104]	; (8100df8 <HAL_GPIO_Init+0x258>)
 8100d8e:	4293      	cmp	r3, r2
 8100d90:	d013      	beq.n	8100dba <HAL_GPIO_Init+0x21a>
 8100d92:	687b      	ldr	r3, [r7, #4]
 8100d94:	4a19      	ldr	r2, [pc, #100]	; (8100dfc <HAL_GPIO_Init+0x25c>)
 8100d96:	4293      	cmp	r3, r2
 8100d98:	d00d      	beq.n	8100db6 <HAL_GPIO_Init+0x216>
 8100d9a:	687b      	ldr	r3, [r7, #4]
 8100d9c:	4a18      	ldr	r2, [pc, #96]	; (8100e00 <HAL_GPIO_Init+0x260>)
 8100d9e:	4293      	cmp	r3, r2
 8100da0:	d007      	beq.n	8100db2 <HAL_GPIO_Init+0x212>
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	4a17      	ldr	r2, [pc, #92]	; (8100e04 <HAL_GPIO_Init+0x264>)
 8100da6:	4293      	cmp	r3, r2
 8100da8:	d101      	bne.n	8100dae <HAL_GPIO_Init+0x20e>
 8100daa:	2309      	movs	r3, #9
 8100dac:	e02d      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dae:	230a      	movs	r3, #10
 8100db0:	e02b      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100db2:	2308      	movs	r3, #8
 8100db4:	e029      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100db6:	2307      	movs	r3, #7
 8100db8:	e027      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dba:	2306      	movs	r3, #6
 8100dbc:	e025      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dbe:	2305      	movs	r3, #5
 8100dc0:	e023      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dc2:	2304      	movs	r3, #4
 8100dc4:	e021      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dc6:	2303      	movs	r3, #3
 8100dc8:	e01f      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dca:	2302      	movs	r3, #2
 8100dcc:	e01d      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dce:	2301      	movs	r3, #1
 8100dd0:	e01b      	b.n	8100e0a <HAL_GPIO_Init+0x26a>
 8100dd2:	bf00      	nop
 8100dd4:	580000c0 	.word	0x580000c0
 8100dd8:	58024400 	.word	0x58024400
 8100ddc:	58000400 	.word	0x58000400
 8100de0:	58020000 	.word	0x58020000
 8100de4:	58020400 	.word	0x58020400
 8100de8:	58020800 	.word	0x58020800
 8100dec:	58020c00 	.word	0x58020c00
 8100df0:	58021000 	.word	0x58021000
 8100df4:	58021400 	.word	0x58021400
 8100df8:	58021800 	.word	0x58021800
 8100dfc:	58021c00 	.word	0x58021c00
 8100e00:	58022000 	.word	0x58022000
 8100e04:	58022400 	.word	0x58022400
 8100e08:	2300      	movs	r3, #0
 8100e0a:	69fa      	ldr	r2, [r7, #28]
 8100e0c:	f002 0203 	and.w	r2, r2, #3
 8100e10:	0092      	lsls	r2, r2, #2
 8100e12:	4093      	lsls	r3, r2
 8100e14:	69ba      	ldr	r2, [r7, #24]
 8100e16:	4313      	orrs	r3, r2
 8100e18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100e1a:	4938      	ldr	r1, [pc, #224]	; (8100efc <HAL_GPIO_Init+0x35c>)
 8100e1c:	69fb      	ldr	r3, [r7, #28]
 8100e1e:	089b      	lsrs	r3, r3, #2
 8100e20:	3302      	adds	r3, #2
 8100e22:	69ba      	ldr	r2, [r7, #24]
 8100e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100e28:	697b      	ldr	r3, [r7, #20]
 8100e2a:	681b      	ldr	r3, [r3, #0]
 8100e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e2e:	693b      	ldr	r3, [r7, #16]
 8100e30:	43db      	mvns	r3, r3
 8100e32:	69ba      	ldr	r2, [r7, #24]
 8100e34:	4013      	ands	r3, r2
 8100e36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8100e38:	683b      	ldr	r3, [r7, #0]
 8100e3a:	685b      	ldr	r3, [r3, #4]
 8100e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d003      	beq.n	8100e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8100e44:	69ba      	ldr	r2, [r7, #24]
 8100e46:	693b      	ldr	r3, [r7, #16]
 8100e48:	4313      	orrs	r3, r2
 8100e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100e4c:	697b      	ldr	r3, [r7, #20]
 8100e4e:	69ba      	ldr	r2, [r7, #24]
 8100e50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8100e52:	697b      	ldr	r3, [r7, #20]
 8100e54:	685b      	ldr	r3, [r3, #4]
 8100e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e58:	693b      	ldr	r3, [r7, #16]
 8100e5a:	43db      	mvns	r3, r3
 8100e5c:	69ba      	ldr	r2, [r7, #24]
 8100e5e:	4013      	ands	r3, r2
 8100e60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8100e62:	683b      	ldr	r3, [r7, #0]
 8100e64:	685b      	ldr	r3, [r3, #4]
 8100e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100e6a:	2b00      	cmp	r3, #0
 8100e6c:	d003      	beq.n	8100e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8100e6e:	69ba      	ldr	r2, [r7, #24]
 8100e70:	693b      	ldr	r3, [r7, #16]
 8100e72:	4313      	orrs	r3, r2
 8100e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100e76:	697b      	ldr	r3, [r7, #20]
 8100e78:	69ba      	ldr	r2, [r7, #24]
 8100e7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e80:	681b      	ldr	r3, [r3, #0]
 8100e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100e84:	693b      	ldr	r3, [r7, #16]
 8100e86:	43db      	mvns	r3, r3
 8100e88:	69ba      	ldr	r2, [r7, #24]
 8100e8a:	4013      	ands	r3, r2
 8100e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8100e8e:	683b      	ldr	r3, [r7, #0]
 8100e90:	685b      	ldr	r3, [r3, #4]
 8100e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100e96:	2b00      	cmp	r3, #0
 8100e98:	d003      	beq.n	8100ea2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8100e9a:	69ba      	ldr	r2, [r7, #24]
 8100e9c:	693b      	ldr	r3, [r7, #16]
 8100e9e:	4313      	orrs	r3, r2
 8100ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ea6:	69bb      	ldr	r3, [r7, #24]
 8100ea8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100eae:	685b      	ldr	r3, [r3, #4]
 8100eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100eb2:	693b      	ldr	r3, [r7, #16]
 8100eb4:	43db      	mvns	r3, r3
 8100eb6:	69ba      	ldr	r2, [r7, #24]
 8100eb8:	4013      	ands	r3, r2
 8100eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8100ebc:	683b      	ldr	r3, [r7, #0]
 8100ebe:	685b      	ldr	r3, [r3, #4]
 8100ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100ec4:	2b00      	cmp	r3, #0
 8100ec6:	d003      	beq.n	8100ed0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8100ec8:	69ba      	ldr	r2, [r7, #24]
 8100eca:	693b      	ldr	r3, [r7, #16]
 8100ecc:	4313      	orrs	r3, r2
 8100ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ed4:	69bb      	ldr	r3, [r7, #24]
 8100ed6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8100ed8:	69fb      	ldr	r3, [r7, #28]
 8100eda:	3301      	adds	r3, #1
 8100edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100ede:	683b      	ldr	r3, [r7, #0]
 8100ee0:	681a      	ldr	r2, [r3, #0]
 8100ee2:	69fb      	ldr	r3, [r7, #28]
 8100ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8100ee8:	2b00      	cmp	r3, #0
 8100eea:	f47f ae63 	bne.w	8100bb4 <HAL_GPIO_Init+0x14>
  }
}
 8100eee:	bf00      	nop
 8100ef0:	bf00      	nop
 8100ef2:	3724      	adds	r7, #36	; 0x24
 8100ef4:	46bd      	mov	sp, r7
 8100ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100efa:	4770      	bx	lr
 8100efc:	58000400 	.word	0x58000400

08100f00 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100f00:	b480      	push	{r7}
 8100f02:	b083      	sub	sp, #12
 8100f04:	af00      	add	r7, sp, #0
 8100f06:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100f08:	4b05      	ldr	r3, [pc, #20]	; (8100f20 <HAL_HSEM_ActivateNotification+0x20>)
 8100f0a:	681a      	ldr	r2, [r3, #0]
 8100f0c:	4904      	ldr	r1, [pc, #16]	; (8100f20 <HAL_HSEM_ActivateNotification+0x20>)
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	4313      	orrs	r3, r2
 8100f12:	600b      	str	r3, [r1, #0]
#endif
}
 8100f14:	bf00      	nop
 8100f16:	370c      	adds	r7, #12
 8100f18:	46bd      	mov	sp, r7
 8100f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f1e:	4770      	bx	lr
 8100f20:	58026510 	.word	0x58026510

08100f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8100f24:	b580      	push	{r7, lr}
 8100f26:	b082      	sub	sp, #8
 8100f28:	af00      	add	r7, sp, #0
 8100f2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8100f2c:	687b      	ldr	r3, [r7, #4]
 8100f2e:	2b00      	cmp	r3, #0
 8100f30:	d101      	bne.n	8100f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8100f32:	2301      	movs	r3, #1
 8100f34:	e081      	b.n	810103a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8100f36:	687b      	ldr	r3, [r7, #4]
 8100f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8100f3c:	b2db      	uxtb	r3, r3
 8100f3e:	2b00      	cmp	r3, #0
 8100f40:	d106      	bne.n	8100f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	2200      	movs	r2, #0
 8100f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8100f4a:	6878      	ldr	r0, [r7, #4]
 8100f4c:	f7ff fb9c 	bl	8100688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8100f50:	687b      	ldr	r3, [r7, #4]
 8100f52:	2224      	movs	r2, #36	; 0x24
 8100f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8100f58:	687b      	ldr	r3, [r7, #4]
 8100f5a:	681b      	ldr	r3, [r3, #0]
 8100f5c:	681a      	ldr	r2, [r3, #0]
 8100f5e:	687b      	ldr	r3, [r7, #4]
 8100f60:	681b      	ldr	r3, [r3, #0]
 8100f62:	f022 0201 	bic.w	r2, r2, #1
 8100f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8100f68:	687b      	ldr	r3, [r7, #4]
 8100f6a:	685a      	ldr	r2, [r3, #4]
 8100f6c:	687b      	ldr	r3, [r7, #4]
 8100f6e:	681b      	ldr	r3, [r3, #0]
 8100f70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8100f74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8100f76:	687b      	ldr	r3, [r7, #4]
 8100f78:	681b      	ldr	r3, [r3, #0]
 8100f7a:	689a      	ldr	r2, [r3, #8]
 8100f7c:	687b      	ldr	r3, [r7, #4]
 8100f7e:	681b      	ldr	r3, [r3, #0]
 8100f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8100f84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8100f86:	687b      	ldr	r3, [r7, #4]
 8100f88:	68db      	ldr	r3, [r3, #12]
 8100f8a:	2b01      	cmp	r3, #1
 8100f8c:	d107      	bne.n	8100f9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	689a      	ldr	r2, [r3, #8]
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	681b      	ldr	r3, [r3, #0]
 8100f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8100f9a:	609a      	str	r2, [r3, #8]
 8100f9c:	e006      	b.n	8100fac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8100f9e:	687b      	ldr	r3, [r7, #4]
 8100fa0:	689a      	ldr	r2, [r3, #8]
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8100faa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	68db      	ldr	r3, [r3, #12]
 8100fb0:	2b02      	cmp	r3, #2
 8100fb2:	d104      	bne.n	8100fbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8100fb4:	687b      	ldr	r3, [r7, #4]
 8100fb6:	681b      	ldr	r3, [r3, #0]
 8100fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8100fbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8100fbe:	687b      	ldr	r3, [r7, #4]
 8100fc0:	681b      	ldr	r3, [r3, #0]
 8100fc2:	685b      	ldr	r3, [r3, #4]
 8100fc4:	687a      	ldr	r2, [r7, #4]
 8100fc6:	6812      	ldr	r2, [r2, #0]
 8100fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8100fd2:	687b      	ldr	r3, [r7, #4]
 8100fd4:	681b      	ldr	r3, [r3, #0]
 8100fd6:	68da      	ldr	r2, [r3, #12]
 8100fd8:	687b      	ldr	r3, [r7, #4]
 8100fda:	681b      	ldr	r3, [r3, #0]
 8100fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8100fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8100fe2:	687b      	ldr	r3, [r7, #4]
 8100fe4:	691a      	ldr	r2, [r3, #16]
 8100fe6:	687b      	ldr	r3, [r7, #4]
 8100fe8:	695b      	ldr	r3, [r3, #20]
 8100fea:	ea42 0103 	orr.w	r1, r2, r3
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	699b      	ldr	r3, [r3, #24]
 8100ff2:	021a      	lsls	r2, r3, #8
 8100ff4:	687b      	ldr	r3, [r7, #4]
 8100ff6:	681b      	ldr	r3, [r3, #0]
 8100ff8:	430a      	orrs	r2, r1
 8100ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8100ffc:	687b      	ldr	r3, [r7, #4]
 8100ffe:	69d9      	ldr	r1, [r3, #28]
 8101000:	687b      	ldr	r3, [r7, #4]
 8101002:	6a1a      	ldr	r2, [r3, #32]
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	681b      	ldr	r3, [r3, #0]
 8101008:	430a      	orrs	r2, r1
 810100a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810100c:	687b      	ldr	r3, [r7, #4]
 810100e:	681b      	ldr	r3, [r3, #0]
 8101010:	681a      	ldr	r2, [r3, #0]
 8101012:	687b      	ldr	r3, [r7, #4]
 8101014:	681b      	ldr	r3, [r3, #0]
 8101016:	f042 0201 	orr.w	r2, r2, #1
 810101a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810101c:	687b      	ldr	r3, [r7, #4]
 810101e:	2200      	movs	r2, #0
 8101020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101022:	687b      	ldr	r3, [r7, #4]
 8101024:	2220      	movs	r2, #32
 8101026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810102a:	687b      	ldr	r3, [r7, #4]
 810102c:	2200      	movs	r2, #0
 810102e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101030:	687b      	ldr	r3, [r7, #4]
 8101032:	2200      	movs	r2, #0
 8101034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101038:	2300      	movs	r3, #0
}
 810103a:	4618      	mov	r0, r3
 810103c:	3708      	adds	r7, #8
 810103e:	46bd      	mov	sp, r7
 8101040:	bd80      	pop	{r7, pc}

08101042 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101042:	b480      	push	{r7}
 8101044:	b083      	sub	sp, #12
 8101046:	af00      	add	r7, sp, #0
 8101048:	6078      	str	r0, [r7, #4]
 810104a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810104c:	687b      	ldr	r3, [r7, #4]
 810104e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101052:	b2db      	uxtb	r3, r3
 8101054:	2b20      	cmp	r3, #32
 8101056:	d138      	bne.n	81010ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101058:	687b      	ldr	r3, [r7, #4]
 810105a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810105e:	2b01      	cmp	r3, #1
 8101060:	d101      	bne.n	8101066 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101062:	2302      	movs	r3, #2
 8101064:	e032      	b.n	81010cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101066:	687b      	ldr	r3, [r7, #4]
 8101068:	2201      	movs	r2, #1
 810106a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	2224      	movs	r2, #36	; 0x24
 8101072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	681a      	ldr	r2, [r3, #0]
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	681b      	ldr	r3, [r3, #0]
 8101080:	f022 0201 	bic.w	r2, r2, #1
 8101084:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101086:	687b      	ldr	r3, [r7, #4]
 8101088:	681b      	ldr	r3, [r3, #0]
 810108a:	681a      	ldr	r2, [r3, #0]
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8101094:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	681b      	ldr	r3, [r3, #0]
 810109a:	6819      	ldr	r1, [r3, #0]
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	681b      	ldr	r3, [r3, #0]
 81010a0:	683a      	ldr	r2, [r7, #0]
 81010a2:	430a      	orrs	r2, r1
 81010a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	681a      	ldr	r2, [r3, #0]
 81010ac:	687b      	ldr	r3, [r7, #4]
 81010ae:	681b      	ldr	r3, [r3, #0]
 81010b0:	f042 0201 	orr.w	r2, r2, #1
 81010b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81010b6:	687b      	ldr	r3, [r7, #4]
 81010b8:	2220      	movs	r2, #32
 81010ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	2200      	movs	r2, #0
 81010c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81010c6:	2300      	movs	r3, #0
 81010c8:	e000      	b.n	81010cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81010ca:	2302      	movs	r3, #2
  }
}
 81010cc:	4618      	mov	r0, r3
 81010ce:	370c      	adds	r7, #12
 81010d0:	46bd      	mov	sp, r7
 81010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010d6:	4770      	bx	lr

081010d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81010d8:	b480      	push	{r7}
 81010da:	b085      	sub	sp, #20
 81010dc:	af00      	add	r7, sp, #0
 81010de:	6078      	str	r0, [r7, #4]
 81010e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81010e8:	b2db      	uxtb	r3, r3
 81010ea:	2b20      	cmp	r3, #32
 81010ec:	d139      	bne.n	8101162 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81010ee:	687b      	ldr	r3, [r7, #4]
 81010f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81010f4:	2b01      	cmp	r3, #1
 81010f6:	d101      	bne.n	81010fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81010f8:	2302      	movs	r3, #2
 81010fa:	e033      	b.n	8101164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81010fc:	687b      	ldr	r3, [r7, #4]
 81010fe:	2201      	movs	r2, #1
 8101100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	2224      	movs	r2, #36	; 0x24
 8101108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	681b      	ldr	r3, [r3, #0]
 8101110:	681a      	ldr	r2, [r3, #0]
 8101112:	687b      	ldr	r3, [r7, #4]
 8101114:	681b      	ldr	r3, [r3, #0]
 8101116:	f022 0201 	bic.w	r2, r2, #1
 810111a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810111c:	687b      	ldr	r3, [r7, #4]
 810111e:	681b      	ldr	r3, [r3, #0]
 8101120:	681b      	ldr	r3, [r3, #0]
 8101122:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101124:	68fb      	ldr	r3, [r7, #12]
 8101126:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810112a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810112c:	683b      	ldr	r3, [r7, #0]
 810112e:	021b      	lsls	r3, r3, #8
 8101130:	68fa      	ldr	r2, [r7, #12]
 8101132:	4313      	orrs	r3, r2
 8101134:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101136:	687b      	ldr	r3, [r7, #4]
 8101138:	681b      	ldr	r3, [r3, #0]
 810113a:	68fa      	ldr	r2, [r7, #12]
 810113c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810113e:	687b      	ldr	r3, [r7, #4]
 8101140:	681b      	ldr	r3, [r3, #0]
 8101142:	681a      	ldr	r2, [r3, #0]
 8101144:	687b      	ldr	r3, [r7, #4]
 8101146:	681b      	ldr	r3, [r3, #0]
 8101148:	f042 0201 	orr.w	r2, r2, #1
 810114c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810114e:	687b      	ldr	r3, [r7, #4]
 8101150:	2220      	movs	r2, #32
 8101152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101156:	687b      	ldr	r3, [r7, #4]
 8101158:	2200      	movs	r2, #0
 810115a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810115e:	2300      	movs	r3, #0
 8101160:	e000      	b.n	8101164 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101162:	2302      	movs	r3, #2
  }
}
 8101164:	4618      	mov	r0, r3
 8101166:	3714      	adds	r7, #20
 8101168:	46bd      	mov	sp, r7
 810116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810116e:	4770      	bx	lr

08101170 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101170:	b580      	push	{r7, lr}
 8101172:	b084      	sub	sp, #16
 8101174:	af00      	add	r7, sp, #0
 8101176:	60f8      	str	r0, [r7, #12]
 8101178:	460b      	mov	r3, r1
 810117a:	607a      	str	r2, [r7, #4]
 810117c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810117e:	4b37      	ldr	r3, [pc, #220]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101180:	681b      	ldr	r3, [r3, #0]
 8101182:	f023 0201 	bic.w	r2, r3, #1
 8101186:	4935      	ldr	r1, [pc, #212]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101188:	68fb      	ldr	r3, [r7, #12]
 810118a:	4313      	orrs	r3, r2
 810118c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	2b00      	cmp	r3, #0
 8101192:	d123      	bne.n	81011dc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101194:	f7ff fcf0 	bl	8100b78 <HAL_GetCurrentCPUID>
 8101198:	4603      	mov	r3, r0
 810119a:	2b03      	cmp	r3, #3
 810119c:	d158      	bne.n	8101250 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810119e:	4b2f      	ldr	r3, [pc, #188]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 81011a0:	691b      	ldr	r3, [r3, #16]
 81011a2:	4a2e      	ldr	r2, [pc, #184]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 81011a4:	f023 0301 	bic.w	r3, r3, #1
 81011a8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011aa:	4b2d      	ldr	r3, [pc, #180]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011ac:	691b      	ldr	r3, [r3, #16]
 81011ae:	4a2c      	ldr	r2, [pc, #176]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011b0:	f043 0304 	orr.w	r3, r3, #4
 81011b4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81011b6:	f3bf 8f4f 	dsb	sy
}
 81011ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81011bc:	f3bf 8f6f 	isb	sy
}
 81011c0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81011c2:	7afb      	ldrb	r3, [r7, #11]
 81011c4:	2b01      	cmp	r3, #1
 81011c6:	d101      	bne.n	81011cc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81011c8:	bf30      	wfi
 81011ca:	e000      	b.n	81011ce <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81011cc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011ce:	4b24      	ldr	r3, [pc, #144]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011d0:	691b      	ldr	r3, [r3, #16]
 81011d2:	4a23      	ldr	r2, [pc, #140]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011d4:	f023 0304 	bic.w	r3, r3, #4
 81011d8:	6113      	str	r3, [r2, #16]
 81011da:	e03c      	b.n	8101256 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81011dc:	687b      	ldr	r3, [r7, #4]
 81011de:	2b01      	cmp	r3, #1
 81011e0:	d123      	bne.n	810122a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81011e2:	f7ff fcc9 	bl	8100b78 <HAL_GetCurrentCPUID>
 81011e6:	4603      	mov	r3, r0
 81011e8:	2b01      	cmp	r3, #1
 81011ea:	d133      	bne.n	8101254 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81011ec:	4b1b      	ldr	r3, [pc, #108]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ee:	695b      	ldr	r3, [r3, #20]
 81011f0:	4a1a      	ldr	r2, [pc, #104]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 81011f2:	f023 0302 	bic.w	r3, r3, #2
 81011f6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011f8:	4b19      	ldr	r3, [pc, #100]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011fa:	691b      	ldr	r3, [r3, #16]
 81011fc:	4a18      	ldr	r2, [pc, #96]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011fe:	f043 0304 	orr.w	r3, r3, #4
 8101202:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101204:	f3bf 8f4f 	dsb	sy
}
 8101208:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810120a:	f3bf 8f6f 	isb	sy
}
 810120e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101210:	7afb      	ldrb	r3, [r7, #11]
 8101212:	2b01      	cmp	r3, #1
 8101214:	d101      	bne.n	810121a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101216:	bf30      	wfi
 8101218:	e000      	b.n	810121c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810121a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810121c:	4b10      	ldr	r3, [pc, #64]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810121e:	691b      	ldr	r3, [r3, #16]
 8101220:	4a0f      	ldr	r2, [pc, #60]	; (8101260 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101222:	f023 0304 	bic.w	r3, r3, #4
 8101226:	6113      	str	r3, [r2, #16]
 8101228:	e015      	b.n	8101256 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810122a:	f7ff fca5 	bl	8100b78 <HAL_GetCurrentCPUID>
 810122e:	4603      	mov	r3, r0
 8101230:	2b03      	cmp	r3, #3
 8101232:	d106      	bne.n	8101242 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101234:	4b09      	ldr	r3, [pc, #36]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101236:	691b      	ldr	r3, [r3, #16]
 8101238:	4a08      	ldr	r2, [pc, #32]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 810123a:	f023 0304 	bic.w	r3, r3, #4
 810123e:	6113      	str	r3, [r2, #16]
 8101240:	e009      	b.n	8101256 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101242:	4b06      	ldr	r3, [pc, #24]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101244:	695b      	ldr	r3, [r3, #20]
 8101246:	4a05      	ldr	r2, [pc, #20]	; (810125c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101248:	f023 0304 	bic.w	r3, r3, #4
 810124c:	6153      	str	r3, [r2, #20]
 810124e:	e002      	b.n	8101256 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101250:	bf00      	nop
 8101252:	e000      	b.n	8101256 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101254:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101256:	3710      	adds	r7, #16
 8101258:	46bd      	mov	sp, r7
 810125a:	bd80      	pop	{r7, pc}
 810125c:	58024800 	.word	0x58024800
 8101260:	e000ed00 	.word	0xe000ed00

08101264 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101264:	b580      	push	{r7, lr}
 8101266:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101268:	f7ff fc86 	bl	8100b78 <HAL_GetCurrentCPUID>
 810126c:	4603      	mov	r3, r0
 810126e:	2b03      	cmp	r3, #3
 8101270:	d101      	bne.n	8101276 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101272:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101274:	e001      	b.n	810127a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101276:	bf40      	sev
    __WFE ();
 8101278:	bf20      	wfe
}
 810127a:	bf00      	nop
 810127c:	bd80      	pop	{r7, pc}
	...

08101280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101280:	b480      	push	{r7}
 8101282:	b089      	sub	sp, #36	; 0x24
 8101284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101286:	4bb3      	ldr	r3, [pc, #716]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101288:	691b      	ldr	r3, [r3, #16]
 810128a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810128e:	2b18      	cmp	r3, #24
 8101290:	f200 8155 	bhi.w	810153e <HAL_RCC_GetSysClockFreq+0x2be>
 8101294:	a201      	add	r2, pc, #4	; (adr r2, 810129c <HAL_RCC_GetSysClockFreq+0x1c>)
 8101296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810129a:	bf00      	nop
 810129c:	08101301 	.word	0x08101301
 81012a0:	0810153f 	.word	0x0810153f
 81012a4:	0810153f 	.word	0x0810153f
 81012a8:	0810153f 	.word	0x0810153f
 81012ac:	0810153f 	.word	0x0810153f
 81012b0:	0810153f 	.word	0x0810153f
 81012b4:	0810153f 	.word	0x0810153f
 81012b8:	0810153f 	.word	0x0810153f
 81012bc:	08101327 	.word	0x08101327
 81012c0:	0810153f 	.word	0x0810153f
 81012c4:	0810153f 	.word	0x0810153f
 81012c8:	0810153f 	.word	0x0810153f
 81012cc:	0810153f 	.word	0x0810153f
 81012d0:	0810153f 	.word	0x0810153f
 81012d4:	0810153f 	.word	0x0810153f
 81012d8:	0810153f 	.word	0x0810153f
 81012dc:	0810132d 	.word	0x0810132d
 81012e0:	0810153f 	.word	0x0810153f
 81012e4:	0810153f 	.word	0x0810153f
 81012e8:	0810153f 	.word	0x0810153f
 81012ec:	0810153f 	.word	0x0810153f
 81012f0:	0810153f 	.word	0x0810153f
 81012f4:	0810153f 	.word	0x0810153f
 81012f8:	0810153f 	.word	0x0810153f
 81012fc:	08101333 	.word	0x08101333
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101300:	4b94      	ldr	r3, [pc, #592]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	f003 0320 	and.w	r3, r3, #32
 8101308:	2b00      	cmp	r3, #0
 810130a:	d009      	beq.n	8101320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810130c:	4b91      	ldr	r3, [pc, #580]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810130e:	681b      	ldr	r3, [r3, #0]
 8101310:	08db      	lsrs	r3, r3, #3
 8101312:	f003 0303 	and.w	r3, r3, #3
 8101316:	4a90      	ldr	r2, [pc, #576]	; (8101558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101318:	fa22 f303 	lsr.w	r3, r2, r3
 810131c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810131e:	e111      	b.n	8101544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101320:	4b8d      	ldr	r3, [pc, #564]	; (8101558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101322:	61bb      	str	r3, [r7, #24]
    break;
 8101324:	e10e      	b.n	8101544 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101326:	4b8d      	ldr	r3, [pc, #564]	; (810155c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101328:	61bb      	str	r3, [r7, #24]
    break;
 810132a:	e10b      	b.n	8101544 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810132c:	4b8c      	ldr	r3, [pc, #560]	; (8101560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810132e:	61bb      	str	r3, [r7, #24]
    break;
 8101330:	e108      	b.n	8101544 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101332:	4b88      	ldr	r3, [pc, #544]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101336:	f003 0303 	and.w	r3, r3, #3
 810133a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810133c:	4b85      	ldr	r3, [pc, #532]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101340:	091b      	lsrs	r3, r3, #4
 8101342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101346:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101348:	4b82      	ldr	r3, [pc, #520]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810134c:	f003 0301 	and.w	r3, r3, #1
 8101350:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101352:	4b80      	ldr	r3, [pc, #512]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101356:	08db      	lsrs	r3, r3, #3
 8101358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810135c:	68fa      	ldr	r2, [r7, #12]
 810135e:	fb02 f303 	mul.w	r3, r2, r3
 8101362:	ee07 3a90 	vmov	s15, r3
 8101366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810136a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810136e:	693b      	ldr	r3, [r7, #16]
 8101370:	2b00      	cmp	r3, #0
 8101372:	f000 80e1 	beq.w	8101538 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101376:	697b      	ldr	r3, [r7, #20]
 8101378:	2b02      	cmp	r3, #2
 810137a:	f000 8083 	beq.w	8101484 <HAL_RCC_GetSysClockFreq+0x204>
 810137e:	697b      	ldr	r3, [r7, #20]
 8101380:	2b02      	cmp	r3, #2
 8101382:	f200 80a1 	bhi.w	81014c8 <HAL_RCC_GetSysClockFreq+0x248>
 8101386:	697b      	ldr	r3, [r7, #20]
 8101388:	2b00      	cmp	r3, #0
 810138a:	d003      	beq.n	8101394 <HAL_RCC_GetSysClockFreq+0x114>
 810138c:	697b      	ldr	r3, [r7, #20]
 810138e:	2b01      	cmp	r3, #1
 8101390:	d056      	beq.n	8101440 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101392:	e099      	b.n	81014c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101394:	4b6f      	ldr	r3, [pc, #444]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101396:	681b      	ldr	r3, [r3, #0]
 8101398:	f003 0320 	and.w	r3, r3, #32
 810139c:	2b00      	cmp	r3, #0
 810139e:	d02d      	beq.n	81013fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81013a0:	4b6c      	ldr	r3, [pc, #432]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	08db      	lsrs	r3, r3, #3
 81013a6:	f003 0303 	and.w	r3, r3, #3
 81013aa:	4a6b      	ldr	r2, [pc, #428]	; (8101558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013ac:	fa22 f303 	lsr.w	r3, r2, r3
 81013b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	ee07 3a90 	vmov	s15, r3
 81013b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013bc:	693b      	ldr	r3, [r7, #16]
 81013be:	ee07 3a90 	vmov	s15, r3
 81013c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013ca:	4b62      	ldr	r3, [pc, #392]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013d2:	ee07 3a90 	vmov	s15, r3
 81013d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013da:	ed97 6a02 	vldr	s12, [r7, #8]
 81013de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101564 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81013e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81013ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81013fa:	e087      	b.n	810150c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81013fc:	693b      	ldr	r3, [r7, #16]
 81013fe:	ee07 3a90 	vmov	s15, r3
 8101402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101406:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101568 <HAL_RCC_GetSysClockFreq+0x2e8>
 810140a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810140e:	4b51      	ldr	r3, [pc, #324]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101416:	ee07 3a90 	vmov	s15, r3
 810141a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810141e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101422:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101564 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810142a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810142e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101436:	ee67 7a27 	vmul.f32	s15, s14, s15
 810143a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810143e:	e065      	b.n	810150c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101440:	693b      	ldr	r3, [r7, #16]
 8101442:	ee07 3a90 	vmov	s15, r3
 8101446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810144a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810156c <HAL_RCC_GetSysClockFreq+0x2ec>
 810144e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101452:	4b40      	ldr	r3, [pc, #256]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810145a:	ee07 3a90 	vmov	s15, r3
 810145e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101462:	ed97 6a02 	vldr	s12, [r7, #8]
 8101466:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101564 <HAL_RCC_GetSysClockFreq+0x2e4>
 810146a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810146e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810147e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101482:	e043      	b.n	810150c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101484:	693b      	ldr	r3, [r7, #16]
 8101486:	ee07 3a90 	vmov	s15, r3
 810148a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810148e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101570 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101496:	4b2f      	ldr	r3, [pc, #188]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810149a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810149e:	ee07 3a90 	vmov	s15, r3
 81014a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81014aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101564 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81014c6:	e021      	b.n	810150c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81014c8:	693b      	ldr	r3, [r7, #16]
 81014ca:	ee07 3a90 	vmov	s15, r3
 81014ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810156c <HAL_RCC_GetSysClockFreq+0x2ec>
 81014d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014da:	4b1e      	ldr	r3, [pc, #120]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014e2:	ee07 3a90 	vmov	s15, r3
 81014e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81014ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101564 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810150a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810150c:	4b11      	ldr	r3, [pc, #68]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101510:	0a5b      	lsrs	r3, r3, #9
 8101512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101516:	3301      	adds	r3, #1
 8101518:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810151a:	683b      	ldr	r3, [r7, #0]
 810151c:	ee07 3a90 	vmov	s15, r3
 8101520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101524:	edd7 6a07 	vldr	s13, [r7, #28]
 8101528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101530:	ee17 3a90 	vmov	r3, s15
 8101534:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101536:	e005      	b.n	8101544 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101538:	2300      	movs	r3, #0
 810153a:	61bb      	str	r3, [r7, #24]
    break;
 810153c:	e002      	b.n	8101544 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810153e:	4b07      	ldr	r3, [pc, #28]	; (810155c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101540:	61bb      	str	r3, [r7, #24]
    break;
 8101542:	bf00      	nop
  }

  return sysclockfreq;
 8101544:	69bb      	ldr	r3, [r7, #24]
}
 8101546:	4618      	mov	r0, r3
 8101548:	3724      	adds	r7, #36	; 0x24
 810154a:	46bd      	mov	sp, r7
 810154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101550:	4770      	bx	lr
 8101552:	bf00      	nop
 8101554:	58024400 	.word	0x58024400
 8101558:	03d09000 	.word	0x03d09000
 810155c:	003d0900 	.word	0x003d0900
 8101560:	007a1200 	.word	0x007a1200
 8101564:	46000000 	.word	0x46000000
 8101568:	4c742400 	.word	0x4c742400
 810156c:	4a742400 	.word	0x4a742400
 8101570:	4af42400 	.word	0x4af42400

08101574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101574:	b580      	push	{r7, lr}
 8101576:	b082      	sub	sp, #8
 8101578:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810157a:	f7ff fe81 	bl	8101280 <HAL_RCC_GetSysClockFreq>
 810157e:	4602      	mov	r2, r0
 8101580:	4b11      	ldr	r3, [pc, #68]	; (81015c8 <HAL_RCC_GetHCLKFreq+0x54>)
 8101582:	699b      	ldr	r3, [r3, #24]
 8101584:	0a1b      	lsrs	r3, r3, #8
 8101586:	f003 030f 	and.w	r3, r3, #15
 810158a:	4910      	ldr	r1, [pc, #64]	; (81015cc <HAL_RCC_GetHCLKFreq+0x58>)
 810158c:	5ccb      	ldrb	r3, [r1, r3]
 810158e:	f003 031f 	and.w	r3, r3, #31
 8101592:	fa22 f303 	lsr.w	r3, r2, r3
 8101596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101598:	4b0b      	ldr	r3, [pc, #44]	; (81015c8 <HAL_RCC_GetHCLKFreq+0x54>)
 810159a:	699b      	ldr	r3, [r3, #24]
 810159c:	f003 030f 	and.w	r3, r3, #15
 81015a0:	4a0a      	ldr	r2, [pc, #40]	; (81015cc <HAL_RCC_GetHCLKFreq+0x58>)
 81015a2:	5cd3      	ldrb	r3, [r2, r3]
 81015a4:	f003 031f 	and.w	r3, r3, #31
 81015a8:	687a      	ldr	r2, [r7, #4]
 81015aa:	fa22 f303 	lsr.w	r3, r2, r3
 81015ae:	4a08      	ldr	r2, [pc, #32]	; (81015d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81015b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015b2:	4b07      	ldr	r3, [pc, #28]	; (81015d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	4a07      	ldr	r2, [pc, #28]	; (81015d4 <HAL_RCC_GetHCLKFreq+0x60>)
 81015b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81015ba:	4b05      	ldr	r3, [pc, #20]	; (81015d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81015bc:	681b      	ldr	r3, [r3, #0]
}
 81015be:	4618      	mov	r0, r3
 81015c0:	3708      	adds	r7, #8
 81015c2:	46bd      	mov	sp, r7
 81015c4:	bd80      	pop	{r7, pc}
 81015c6:	bf00      	nop
 81015c8:	58024400 	.word	0x58024400
 81015cc:	08105530 	.word	0x08105530
 81015d0:	10000004 	.word	0x10000004
 81015d4:	10000000 	.word	0x10000000

081015d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81015d8:	b580      	push	{r7, lr}
 81015da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81015dc:	f7ff ffca 	bl	8101574 <HAL_RCC_GetHCLKFreq>
 81015e0:	4602      	mov	r2, r0
 81015e2:	4b06      	ldr	r3, [pc, #24]	; (81015fc <HAL_RCC_GetPCLK1Freq+0x24>)
 81015e4:	69db      	ldr	r3, [r3, #28]
 81015e6:	091b      	lsrs	r3, r3, #4
 81015e8:	f003 0307 	and.w	r3, r3, #7
 81015ec:	4904      	ldr	r1, [pc, #16]	; (8101600 <HAL_RCC_GetPCLK1Freq+0x28>)
 81015ee:	5ccb      	ldrb	r3, [r1, r3]
 81015f0:	f003 031f 	and.w	r3, r3, #31
 81015f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81015f8:	4618      	mov	r0, r3
 81015fa:	bd80      	pop	{r7, pc}
 81015fc:	58024400 	.word	0x58024400
 8101600:	08105530 	.word	0x08105530

08101604 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101604:	b480      	push	{r7}
 8101606:	b083      	sub	sp, #12
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]
 810160c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	223f      	movs	r2, #63	; 0x3f
 8101612:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101614:	4b1a      	ldr	r3, [pc, #104]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 8101616:	691b      	ldr	r3, [r3, #16]
 8101618:	f003 0207 	and.w	r2, r3, #7
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101620:	4b17      	ldr	r3, [pc, #92]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 8101622:	699b      	ldr	r3, [r3, #24]
 8101624:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101628:	687b      	ldr	r3, [r7, #4]
 810162a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810162c:	4b14      	ldr	r3, [pc, #80]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 810162e:	699b      	ldr	r3, [r3, #24]
 8101630:	f003 020f 	and.w	r2, r3, #15
 8101634:	687b      	ldr	r3, [r7, #4]
 8101636:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101638:	4b11      	ldr	r3, [pc, #68]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 810163a:	699b      	ldr	r3, [r3, #24]
 810163c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101644:	4b0e      	ldr	r3, [pc, #56]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 8101646:	69db      	ldr	r3, [r3, #28]
 8101648:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810164c:	687b      	ldr	r3, [r7, #4]
 810164e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101650:	4b0b      	ldr	r3, [pc, #44]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 8101652:	69db      	ldr	r3, [r3, #28]
 8101654:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101658:	687b      	ldr	r3, [r7, #4]
 810165a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810165c:	4b08      	ldr	r3, [pc, #32]	; (8101680 <HAL_RCC_GetClockConfig+0x7c>)
 810165e:	6a1b      	ldr	r3, [r3, #32]
 8101660:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101664:	687b      	ldr	r3, [r7, #4]
 8101666:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101668:	4b06      	ldr	r3, [pc, #24]	; (8101684 <HAL_RCC_GetClockConfig+0x80>)
 810166a:	681b      	ldr	r3, [r3, #0]
 810166c:	f003 020f 	and.w	r2, r3, #15
 8101670:	683b      	ldr	r3, [r7, #0]
 8101672:	601a      	str	r2, [r3, #0]
}
 8101674:	bf00      	nop
 8101676:	370c      	adds	r7, #12
 8101678:	46bd      	mov	sp, r7
 810167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810167e:	4770      	bx	lr
 8101680:	58024400 	.word	0x58024400
 8101684:	52002000 	.word	0x52002000

08101688 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101688:	b580      	push	{r7, lr}
 810168a:	b086      	sub	sp, #24
 810168c:	af00      	add	r7, sp, #0
 810168e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101690:	2300      	movs	r3, #0
 8101692:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101694:	2300      	movs	r3, #0
 8101696:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	681b      	ldr	r3, [r3, #0]
 810169c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81016a0:	2b00      	cmp	r3, #0
 81016a2:	d03f      	beq.n	8101724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81016a4:	687b      	ldr	r3, [r7, #4]
 81016a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81016a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81016ac:	d02a      	beq.n	8101704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81016ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81016b2:	d824      	bhi.n	81016fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 81016b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81016b8:	d018      	beq.n	81016ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 81016ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81016be:	d81e      	bhi.n	81016fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 81016c0:	2b00      	cmp	r3, #0
 81016c2:	d003      	beq.n	81016cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 81016c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81016c8:	d007      	beq.n	81016da <HAL_RCCEx_PeriphCLKConfig+0x52>
 81016ca:	e018      	b.n	81016fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016cc:	4bab      	ldr	r3, [pc, #684]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016d0:	4aaa      	ldr	r2, [pc, #680]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81016d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016d8:	e015      	b.n	8101706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	3304      	adds	r3, #4
 81016de:	2102      	movs	r1, #2
 81016e0:	4618      	mov	r0, r3
 81016e2:	f000 ff11 	bl	8102508 <RCCEx_PLL2_Config>
 81016e6:	4603      	mov	r3, r0
 81016e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016ea:	e00c      	b.n	8101706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81016ec:	687b      	ldr	r3, [r7, #4]
 81016ee:	3324      	adds	r3, #36	; 0x24
 81016f0:	2102      	movs	r1, #2
 81016f2:	4618      	mov	r0, r3
 81016f4:	f000 ffba 	bl	810266c <RCCEx_PLL3_Config>
 81016f8:	4603      	mov	r3, r0
 81016fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016fc:	e003      	b.n	8101706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81016fe:	2301      	movs	r3, #1
 8101700:	75fb      	strb	r3, [r7, #23]
      break;
 8101702:	e000      	b.n	8101706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101706:	7dfb      	ldrb	r3, [r7, #23]
 8101708:	2b00      	cmp	r3, #0
 810170a:	d109      	bne.n	8101720 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810170c:	4b9b      	ldr	r3, [pc, #620]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810170e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101718:	4998      	ldr	r1, [pc, #608]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810171a:	4313      	orrs	r3, r2
 810171c:	650b      	str	r3, [r1, #80]	; 0x50
 810171e:	e001      	b.n	8101724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101720:	7dfb      	ldrb	r3, [r7, #23]
 8101722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	681b      	ldr	r3, [r3, #0]
 8101728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810172c:	2b00      	cmp	r3, #0
 810172e:	d03d      	beq.n	81017ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101734:	2b04      	cmp	r3, #4
 8101736:	d826      	bhi.n	8101786 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101738:	a201      	add	r2, pc, #4	; (adr r2, 8101740 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810173e:	bf00      	nop
 8101740:	08101755 	.word	0x08101755
 8101744:	08101763 	.word	0x08101763
 8101748:	08101775 	.word	0x08101775
 810174c:	0810178d 	.word	0x0810178d
 8101750:	0810178d 	.word	0x0810178d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101754:	4b89      	ldr	r3, [pc, #548]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101758:	4a88      	ldr	r2, [pc, #544]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810175e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101760:	e015      	b.n	810178e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	3304      	adds	r3, #4
 8101766:	2100      	movs	r1, #0
 8101768:	4618      	mov	r0, r3
 810176a:	f000 fecd 	bl	8102508 <RCCEx_PLL2_Config>
 810176e:	4603      	mov	r3, r0
 8101770:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101772:	e00c      	b.n	810178e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	3324      	adds	r3, #36	; 0x24
 8101778:	2100      	movs	r1, #0
 810177a:	4618      	mov	r0, r3
 810177c:	f000 ff76 	bl	810266c <RCCEx_PLL3_Config>
 8101780:	4603      	mov	r3, r0
 8101782:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101784:	e003      	b.n	810178e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101786:	2301      	movs	r3, #1
 8101788:	75fb      	strb	r3, [r7, #23]
      break;
 810178a:	e000      	b.n	810178e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 810178c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810178e:	7dfb      	ldrb	r3, [r7, #23]
 8101790:	2b00      	cmp	r3, #0
 8101792:	d109      	bne.n	81017a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101794:	4b79      	ldr	r3, [pc, #484]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101798:	f023 0207 	bic.w	r2, r3, #7
 810179c:	687b      	ldr	r3, [r7, #4]
 810179e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81017a0:	4976      	ldr	r1, [pc, #472]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017a2:	4313      	orrs	r3, r2
 81017a4:	650b      	str	r3, [r1, #80]	; 0x50
 81017a6:	e001      	b.n	81017ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81017a8:	7dfb      	ldrb	r3, [r7, #23]
 81017aa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81017b4:	2b00      	cmp	r3, #0
 81017b6:	d042      	beq.n	810183e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81017b8:	687b      	ldr	r3, [r7, #4]
 81017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81017bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81017c0:	d02b      	beq.n	810181a <HAL_RCCEx_PeriphCLKConfig+0x192>
 81017c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81017c6:	d825      	bhi.n	8101814 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81017c8:	2bc0      	cmp	r3, #192	; 0xc0
 81017ca:	d028      	beq.n	810181e <HAL_RCCEx_PeriphCLKConfig+0x196>
 81017cc:	2bc0      	cmp	r3, #192	; 0xc0
 81017ce:	d821      	bhi.n	8101814 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81017d0:	2b80      	cmp	r3, #128	; 0x80
 81017d2:	d016      	beq.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81017d4:	2b80      	cmp	r3, #128	; 0x80
 81017d6:	d81d      	bhi.n	8101814 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d002      	beq.n	81017e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81017dc:	2b40      	cmp	r3, #64	; 0x40
 81017de:	d007      	beq.n	81017f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81017e0:	e018      	b.n	8101814 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017e2:	4b66      	ldr	r3, [pc, #408]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017e6:	4a65      	ldr	r2, [pc, #404]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017ee:	e017      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81017f0:	687b      	ldr	r3, [r7, #4]
 81017f2:	3304      	adds	r3, #4
 81017f4:	2100      	movs	r1, #0
 81017f6:	4618      	mov	r0, r3
 81017f8:	f000 fe86 	bl	8102508 <RCCEx_PLL2_Config>
 81017fc:	4603      	mov	r3, r0
 81017fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101800:	e00e      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	3324      	adds	r3, #36	; 0x24
 8101806:	2100      	movs	r1, #0
 8101808:	4618      	mov	r0, r3
 810180a:	f000 ff2f 	bl	810266c <RCCEx_PLL3_Config>
 810180e:	4603      	mov	r3, r0
 8101810:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101812:	e005      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101814:	2301      	movs	r3, #1
 8101816:	75fb      	strb	r3, [r7, #23]
      break;
 8101818:	e002      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810181a:	bf00      	nop
 810181c:	e000      	b.n	8101820 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810181e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101820:	7dfb      	ldrb	r3, [r7, #23]
 8101822:	2b00      	cmp	r3, #0
 8101824:	d109      	bne.n	810183a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101826:	4b55      	ldr	r3, [pc, #340]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810182a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101832:	4952      	ldr	r1, [pc, #328]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101834:	4313      	orrs	r3, r2
 8101836:	650b      	str	r3, [r1, #80]	; 0x50
 8101838:	e001      	b.n	810183e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810183a:	7dfb      	ldrb	r3, [r7, #23]
 810183c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	681b      	ldr	r3, [r3, #0]
 8101842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101846:	2b00      	cmp	r3, #0
 8101848:	d049      	beq.n	81018de <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810184a:	687b      	ldr	r3, [r7, #4]
 810184c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101854:	d030      	beq.n	81018b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810185a:	d82a      	bhi.n	81018b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810185c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101860:	d02c      	beq.n	81018bc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101862:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101866:	d824      	bhi.n	81018b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810186c:	d018      	beq.n	81018a0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810186e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101872:	d81e      	bhi.n	81018b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101874:	2b00      	cmp	r3, #0
 8101876:	d003      	beq.n	8101880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810187c:	d007      	beq.n	810188e <HAL_RCCEx_PeriphCLKConfig+0x206>
 810187e:	e018      	b.n	81018b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101880:	4b3e      	ldr	r3, [pc, #248]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101884:	4a3d      	ldr	r2, [pc, #244]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810188a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810188c:	e017      	b.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	3304      	adds	r3, #4
 8101892:	2100      	movs	r1, #0
 8101894:	4618      	mov	r0, r3
 8101896:	f000 fe37 	bl	8102508 <RCCEx_PLL2_Config>
 810189a:	4603      	mov	r3, r0
 810189c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810189e:	e00e      	b.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	3324      	adds	r3, #36	; 0x24
 81018a4:	2100      	movs	r1, #0
 81018a6:	4618      	mov	r0, r3
 81018a8:	f000 fee0 	bl	810266c <RCCEx_PLL3_Config>
 81018ac:	4603      	mov	r3, r0
 81018ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81018b0:	e005      	b.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81018b2:	2301      	movs	r3, #1
 81018b4:	75fb      	strb	r3, [r7, #23]
      break;
 81018b6:	e002      	b.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81018b8:	bf00      	nop
 81018ba:	e000      	b.n	81018be <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81018bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81018be:	7dfb      	ldrb	r3, [r7, #23]
 81018c0:	2b00      	cmp	r3, #0
 81018c2:	d10a      	bne.n	81018da <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81018c4:	4b2d      	ldr	r3, [pc, #180]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81018c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81018cc:	687b      	ldr	r3, [r7, #4]
 81018ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81018d2:	492a      	ldr	r1, [pc, #168]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018d4:	4313      	orrs	r3, r2
 81018d6:	658b      	str	r3, [r1, #88]	; 0x58
 81018d8:	e001      	b.n	81018de <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018da:	7dfb      	ldrb	r3, [r7, #23]
 81018dc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	681b      	ldr	r3, [r3, #0]
 81018e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81018e6:	2b00      	cmp	r3, #0
 81018e8:	d04c      	beq.n	8101984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81018f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018f4:	d030      	beq.n	8101958 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81018f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018fa:	d82a      	bhi.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101900:	d02c      	beq.n	810195c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8101902:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101906:	d824      	bhi.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810190c:	d018      	beq.n	8101940 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810190e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101912:	d81e      	bhi.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101914:	2b00      	cmp	r3, #0
 8101916:	d003      	beq.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810191c:	d007      	beq.n	810192e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810191e:	e018      	b.n	8101952 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101920:	4b16      	ldr	r3, [pc, #88]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101924:	4a15      	ldr	r2, [pc, #84]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810192a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810192c:	e017      	b.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	3304      	adds	r3, #4
 8101932:	2100      	movs	r1, #0
 8101934:	4618      	mov	r0, r3
 8101936:	f000 fde7 	bl	8102508 <RCCEx_PLL2_Config>
 810193a:	4603      	mov	r3, r0
 810193c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810193e:	e00e      	b.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	3324      	adds	r3, #36	; 0x24
 8101944:	2100      	movs	r1, #0
 8101946:	4618      	mov	r0, r3
 8101948:	f000 fe90 	bl	810266c <RCCEx_PLL3_Config>
 810194c:	4603      	mov	r3, r0
 810194e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101950:	e005      	b.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101952:	2301      	movs	r3, #1
 8101954:	75fb      	strb	r3, [r7, #23]
      break;
 8101956:	e002      	b.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101958:	bf00      	nop
 810195a:	e000      	b.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810195c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810195e:	7dfb      	ldrb	r3, [r7, #23]
 8101960:	2b00      	cmp	r3, #0
 8101962:	d10d      	bne.n	8101980 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101964:	4b05      	ldr	r3, [pc, #20]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101968:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101972:	4902      	ldr	r1, [pc, #8]	; (810197c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101974:	4313      	orrs	r3, r2
 8101976:	658b      	str	r3, [r1, #88]	; 0x58
 8101978:	e004      	b.n	8101984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810197a:	bf00      	nop
 810197c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101980:	7dfb      	ldrb	r3, [r7, #23]
 8101982:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	681b      	ldr	r3, [r3, #0]
 8101988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810198c:	2b00      	cmp	r3, #0
 810198e:	d032      	beq.n	81019f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101994:	2b30      	cmp	r3, #48	; 0x30
 8101996:	d01c      	beq.n	81019d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101998:	2b30      	cmp	r3, #48	; 0x30
 810199a:	d817      	bhi.n	81019cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 810199c:	2b20      	cmp	r3, #32
 810199e:	d00c      	beq.n	81019ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 81019a0:	2b20      	cmp	r3, #32
 81019a2:	d813      	bhi.n	81019cc <HAL_RCCEx_PeriphCLKConfig+0x344>
 81019a4:	2b00      	cmp	r3, #0
 81019a6:	d016      	beq.n	81019d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81019a8:	2b10      	cmp	r3, #16
 81019aa:	d10f      	bne.n	81019cc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019ac:	4baf      	ldr	r3, [pc, #700]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019b0:	4aae      	ldr	r2, [pc, #696]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81019b8:	e00e      	b.n	81019d8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	3304      	adds	r3, #4
 81019be:	2102      	movs	r1, #2
 81019c0:	4618      	mov	r0, r3
 81019c2:	f000 fda1 	bl	8102508 <RCCEx_PLL2_Config>
 81019c6:	4603      	mov	r3, r0
 81019c8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81019ca:	e005      	b.n	81019d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81019cc:	2301      	movs	r3, #1
 81019ce:	75fb      	strb	r3, [r7, #23]
      break;
 81019d0:	e002      	b.n	81019d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81019d2:	bf00      	nop
 81019d4:	e000      	b.n	81019d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81019d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81019d8:	7dfb      	ldrb	r3, [r7, #23]
 81019da:	2b00      	cmp	r3, #0
 81019dc:	d109      	bne.n	81019f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81019de:	4ba3      	ldr	r3, [pc, #652]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81019e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81019ea:	49a0      	ldr	r1, [pc, #640]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019ec:	4313      	orrs	r3, r2
 81019ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 81019f0:	e001      	b.n	81019f6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019f2:	7dfb      	ldrb	r3, [r7, #23]
 81019f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019fe:	2b00      	cmp	r3, #0
 8101a00:	d047      	beq.n	8101a92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a0a:	d030      	beq.n	8101a6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8101a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a10:	d82a      	bhi.n	8101a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8101a12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a16:	d02c      	beq.n	8101a72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8101a18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a1c:	d824      	bhi.n	8101a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8101a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a22:	d018      	beq.n	8101a56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8101a24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a28:	d81e      	bhi.n	8101a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8101a2a:	2b00      	cmp	r3, #0
 8101a2c:	d003      	beq.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8101a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101a32:	d007      	beq.n	8101a44 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8101a34:	e018      	b.n	8101a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a36:	4b8d      	ldr	r3, [pc, #564]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a3a:	4a8c      	ldr	r2, [pc, #560]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a42:	e017      	b.n	8101a74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	3304      	adds	r3, #4
 8101a48:	2100      	movs	r1, #0
 8101a4a:	4618      	mov	r0, r3
 8101a4c:	f000 fd5c 	bl	8102508 <RCCEx_PLL2_Config>
 8101a50:	4603      	mov	r3, r0
 8101a52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a54:	e00e      	b.n	8101a74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	3324      	adds	r3, #36	; 0x24
 8101a5a:	2100      	movs	r1, #0
 8101a5c:	4618      	mov	r0, r3
 8101a5e:	f000 fe05 	bl	810266c <RCCEx_PLL3_Config>
 8101a62:	4603      	mov	r3, r0
 8101a64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a66:	e005      	b.n	8101a74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a68:	2301      	movs	r3, #1
 8101a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8101a6c:	e002      	b.n	8101a74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a6e:	bf00      	nop
 8101a70:	e000      	b.n	8101a74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a74:	7dfb      	ldrb	r3, [r7, #23]
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d109      	bne.n	8101a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101a7a:	4b7c      	ldr	r3, [pc, #496]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a86:	4979      	ldr	r1, [pc, #484]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a88:	4313      	orrs	r3, r2
 8101a8a:	650b      	str	r3, [r1, #80]	; 0x50
 8101a8c:	e001      	b.n	8101a92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a8e:	7dfb      	ldrb	r3, [r7, #23]
 8101a90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	681b      	ldr	r3, [r3, #0]
 8101a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101a9a:	2b00      	cmp	r3, #0
 8101a9c:	d049      	beq.n	8101b32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101aa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101aa6:	d02e      	beq.n	8101b06 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8101aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101aac:	d828      	bhi.n	8101b00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101aae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101ab2:	d02a      	beq.n	8101b0a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8101ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101ab8:	d822      	bhi.n	8101b00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101abe:	d026      	beq.n	8101b0e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8101ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101ac4:	d81c      	bhi.n	8101b00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101aca:	d010      	beq.n	8101aee <HAL_RCCEx_PeriphCLKConfig+0x466>
 8101acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101ad0:	d816      	bhi.n	8101b00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101ad2:	2b00      	cmp	r3, #0
 8101ad4:	d01d      	beq.n	8101b12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8101ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101ada:	d111      	bne.n	8101b00 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	3304      	adds	r3, #4
 8101ae0:	2101      	movs	r1, #1
 8101ae2:	4618      	mov	r0, r3
 8101ae4:	f000 fd10 	bl	8102508 <RCCEx_PLL2_Config>
 8101ae8:	4603      	mov	r3, r0
 8101aea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101aec:	e012      	b.n	8101b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101aee:	687b      	ldr	r3, [r7, #4]
 8101af0:	3324      	adds	r3, #36	; 0x24
 8101af2:	2101      	movs	r1, #1
 8101af4:	4618      	mov	r0, r3
 8101af6:	f000 fdb9 	bl	810266c <RCCEx_PLL3_Config>
 8101afa:	4603      	mov	r3, r0
 8101afc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101afe:	e009      	b.n	8101b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101b00:	2301      	movs	r3, #1
 8101b02:	75fb      	strb	r3, [r7, #23]
      break;
 8101b04:	e006      	b.n	8101b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101b06:	bf00      	nop
 8101b08:	e004      	b.n	8101b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101b0a:	bf00      	nop
 8101b0c:	e002      	b.n	8101b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101b0e:	bf00      	nop
 8101b10:	e000      	b.n	8101b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b14:	7dfb      	ldrb	r3, [r7, #23]
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d109      	bne.n	8101b2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101b1a:	4b54      	ldr	r3, [pc, #336]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b1e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b26:	4951      	ldr	r1, [pc, #324]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b28:	4313      	orrs	r3, r2
 8101b2a:	650b      	str	r3, [r1, #80]	; 0x50
 8101b2c:	e001      	b.n	8101b32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b2e:	7dfb      	ldrb	r3, [r7, #23]
 8101b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	681b      	ldr	r3, [r3, #0]
 8101b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101b3a:	2b00      	cmp	r3, #0
 8101b3c:	d04b      	beq.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101b3e:	687b      	ldr	r3, [r7, #4]
 8101b40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b48:	d02e      	beq.n	8101ba8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8101b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b4e:	d828      	bhi.n	8101ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b54:	d02a      	beq.n	8101bac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8101b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b5a:	d822      	bhi.n	8101ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b60:	d026      	beq.n	8101bb0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8101b62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b66:	d81c      	bhi.n	8101ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b6c:	d010      	beq.n	8101b90 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8101b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b72:	d816      	bhi.n	8101ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b74:	2b00      	cmp	r3, #0
 8101b76:	d01d      	beq.n	8101bb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8101b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101b7c:	d111      	bne.n	8101ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101b7e:	687b      	ldr	r3, [r7, #4]
 8101b80:	3304      	adds	r3, #4
 8101b82:	2101      	movs	r1, #1
 8101b84:	4618      	mov	r0, r3
 8101b86:	f000 fcbf 	bl	8102508 <RCCEx_PLL2_Config>
 8101b8a:	4603      	mov	r3, r0
 8101b8c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b8e:	e012      	b.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101b90:	687b      	ldr	r3, [r7, #4]
 8101b92:	3324      	adds	r3, #36	; 0x24
 8101b94:	2101      	movs	r1, #1
 8101b96:	4618      	mov	r0, r3
 8101b98:	f000 fd68 	bl	810266c <RCCEx_PLL3_Config>
 8101b9c:	4603      	mov	r3, r0
 8101b9e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101ba0:	e009      	b.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101ba2:	2301      	movs	r3, #1
 8101ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8101ba6:	e006      	b.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101ba8:	bf00      	nop
 8101baa:	e004      	b.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101bac:	bf00      	nop
 8101bae:	e002      	b.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101bb0:	bf00      	nop
 8101bb2:	e000      	b.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101bb6:	7dfb      	ldrb	r3, [r7, #23]
 8101bb8:	2b00      	cmp	r3, #0
 8101bba:	d10a      	bne.n	8101bd2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101bbc:	4b2b      	ldr	r3, [pc, #172]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101bc0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101bc4:	687b      	ldr	r3, [r7, #4]
 8101bc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101bca:	4928      	ldr	r1, [pc, #160]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bcc:	4313      	orrs	r3, r2
 8101bce:	658b      	str	r3, [r1, #88]	; 0x58
 8101bd0:	e001      	b.n	8101bd6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bd2:	7dfb      	ldrb	r3, [r7, #23]
 8101bd4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101bde:	2b00      	cmp	r3, #0
 8101be0:	d02f      	beq.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101bea:	d00e      	beq.n	8101c0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8101bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101bf0:	d814      	bhi.n	8101c1c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8101bf2:	2b00      	cmp	r3, #0
 8101bf4:	d015      	beq.n	8101c22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101bfa:	d10f      	bne.n	8101c1c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101bfc:	4b1b      	ldr	r3, [pc, #108]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c00:	4a1a      	ldr	r2, [pc, #104]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101c08:	e00c      	b.n	8101c24 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	3304      	adds	r3, #4
 8101c0e:	2101      	movs	r1, #1
 8101c10:	4618      	mov	r0, r3
 8101c12:	f000 fc79 	bl	8102508 <RCCEx_PLL2_Config>
 8101c16:	4603      	mov	r3, r0
 8101c18:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101c1a:	e003      	b.n	8101c24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101c1c:	2301      	movs	r3, #1
 8101c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8101c20:	e000      	b.n	8101c24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8101c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c24:	7dfb      	ldrb	r3, [r7, #23]
 8101c26:	2b00      	cmp	r3, #0
 8101c28:	d109      	bne.n	8101c3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101c2a:	4b10      	ldr	r3, [pc, #64]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101c2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c36:	490d      	ldr	r1, [pc, #52]	; (8101c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101c38:	4313      	orrs	r3, r2
 8101c3a:	650b      	str	r3, [r1, #80]	; 0x50
 8101c3c:	e001      	b.n	8101c42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c3e:	7dfb      	ldrb	r3, [r7, #23]
 8101c40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	d033      	beq.n	8101cb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101c52:	2b03      	cmp	r3, #3
 8101c54:	d81c      	bhi.n	8101c90 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101c56:	a201      	add	r2, pc, #4	; (adr r2, 8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8101c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c5c:	08101c97 	.word	0x08101c97
 8101c60:	08101c71 	.word	0x08101c71
 8101c64:	08101c7f 	.word	0x08101c7f
 8101c68:	08101c97 	.word	0x08101c97
 8101c6c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c70:	4bb9      	ldr	r3, [pc, #740]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c74:	4ab8      	ldr	r2, [pc, #736]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c7c:	e00c      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	3304      	adds	r3, #4
 8101c82:	2102      	movs	r1, #2
 8101c84:	4618      	mov	r0, r3
 8101c86:	f000 fc3f 	bl	8102508 <RCCEx_PLL2_Config>
 8101c8a:	4603      	mov	r3, r0
 8101c8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c8e:	e003      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101c90:	2301      	movs	r3, #1
 8101c92:	75fb      	strb	r3, [r7, #23]
      break;
 8101c94:	e000      	b.n	8101c98 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101c96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c98:	7dfb      	ldrb	r3, [r7, #23]
 8101c9a:	2b00      	cmp	r3, #0
 8101c9c:	d109      	bne.n	8101cb2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101c9e:	4bae      	ldr	r3, [pc, #696]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101ca2:	f023 0203 	bic.w	r2, r3, #3
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101caa:	49ab      	ldr	r1, [pc, #684]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cac:	4313      	orrs	r3, r2
 8101cae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101cb0:	e001      	b.n	8101cb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101cb2:	7dfb      	ldrb	r3, [r7, #23]
 8101cb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	f000 8088 	beq.w	8101dd4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101cc4:	4ba5      	ldr	r3, [pc, #660]	; (8101f5c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cc6:	681b      	ldr	r3, [r3, #0]
 8101cc8:	4aa4      	ldr	r2, [pc, #656]	; (8101f5c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101cd0:	f7fe fe66 	bl	81009a0 <HAL_GetTick>
 8101cd4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101cd6:	e009      	b.n	8101cec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101cd8:	f7fe fe62 	bl	81009a0 <HAL_GetTick>
 8101cdc:	4602      	mov	r2, r0
 8101cde:	693b      	ldr	r3, [r7, #16]
 8101ce0:	1ad3      	subs	r3, r2, r3
 8101ce2:	2b64      	cmp	r3, #100	; 0x64
 8101ce4:	d902      	bls.n	8101cec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101ce6:	2303      	movs	r3, #3
 8101ce8:	75fb      	strb	r3, [r7, #23]
        break;
 8101cea:	e005      	b.n	8101cf8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101cec:	4b9b      	ldr	r3, [pc, #620]	; (8101f5c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101cf4:	2b00      	cmp	r3, #0
 8101cf6:	d0ef      	beq.n	8101cd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101cf8:	7dfb      	ldrb	r3, [r7, #23]
 8101cfa:	2b00      	cmp	r3, #0
 8101cfc:	d168      	bne.n	8101dd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101cfe:	4b96      	ldr	r3, [pc, #600]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d08:	4053      	eors	r3, r2
 8101d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101d0e:	2b00      	cmp	r3, #0
 8101d10:	d013      	beq.n	8101d3a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101d12:	4b91      	ldr	r3, [pc, #580]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101d1a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101d1c:	4b8e      	ldr	r3, [pc, #568]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d20:	4a8d      	ldr	r2, [pc, #564]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101d26:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101d28:	4b8b      	ldr	r3, [pc, #556]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d2c:	4a8a      	ldr	r2, [pc, #552]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101d32:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101d34:	4a88      	ldr	r2, [pc, #544]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d36:	68fb      	ldr	r3, [r7, #12]
 8101d38:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101d3a:	687b      	ldr	r3, [r7, #4]
 8101d3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101d44:	d115      	bne.n	8101d72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101d46:	f7fe fe2b 	bl	81009a0 <HAL_GetTick>
 8101d4a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d4c:	e00b      	b.n	8101d66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101d4e:	f7fe fe27 	bl	81009a0 <HAL_GetTick>
 8101d52:	4602      	mov	r2, r0
 8101d54:	693b      	ldr	r3, [r7, #16]
 8101d56:	1ad3      	subs	r3, r2, r3
 8101d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8101d5c:	4293      	cmp	r3, r2
 8101d5e:	d902      	bls.n	8101d66 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101d60:	2303      	movs	r3, #3
 8101d62:	75fb      	strb	r3, [r7, #23]
            break;
 8101d64:	e005      	b.n	8101d72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d66:	4b7c      	ldr	r3, [pc, #496]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d6a:	f003 0302 	and.w	r3, r3, #2
 8101d6e:	2b00      	cmp	r3, #0
 8101d70:	d0ed      	beq.n	8101d4e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101d72:	7dfb      	ldrb	r3, [r7, #23]
 8101d74:	2b00      	cmp	r3, #0
 8101d76:	d128      	bne.n	8101dca <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101d86:	d10f      	bne.n	8101da8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101d88:	4b73      	ldr	r3, [pc, #460]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d8a:	691b      	ldr	r3, [r3, #16]
 8101d8c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d96:	091b      	lsrs	r3, r3, #4
 8101d98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101d9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101da0:	496d      	ldr	r1, [pc, #436]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101da2:	4313      	orrs	r3, r2
 8101da4:	610b      	str	r3, [r1, #16]
 8101da6:	e005      	b.n	8101db4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101da8:	4b6b      	ldr	r3, [pc, #428]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101daa:	691b      	ldr	r3, [r3, #16]
 8101dac:	4a6a      	ldr	r2, [pc, #424]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101dae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101db2:	6113      	str	r3, [r2, #16]
 8101db4:	4b68      	ldr	r3, [pc, #416]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101db6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101db8:	687b      	ldr	r3, [r7, #4]
 8101dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101dc2:	4965      	ldr	r1, [pc, #404]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101dc4:	4313      	orrs	r3, r2
 8101dc6:	670b      	str	r3, [r1, #112]	; 0x70
 8101dc8:	e004      	b.n	8101dd4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101dca:	7dfb      	ldrb	r3, [r7, #23]
 8101dcc:	75bb      	strb	r3, [r7, #22]
 8101dce:	e001      	b.n	8101dd4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dd0:	7dfb      	ldrb	r3, [r7, #23]
 8101dd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	f003 0301 	and.w	r3, r3, #1
 8101ddc:	2b00      	cmp	r3, #0
 8101dde:	d07e      	beq.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101de4:	2b28      	cmp	r3, #40	; 0x28
 8101de6:	d867      	bhi.n	8101eb8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101de8:	a201      	add	r2, pc, #4	; (adr r2, 8101df0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101dee:	bf00      	nop
 8101df0:	08101ebf 	.word	0x08101ebf
 8101df4:	08101eb9 	.word	0x08101eb9
 8101df8:	08101eb9 	.word	0x08101eb9
 8101dfc:	08101eb9 	.word	0x08101eb9
 8101e00:	08101eb9 	.word	0x08101eb9
 8101e04:	08101eb9 	.word	0x08101eb9
 8101e08:	08101eb9 	.word	0x08101eb9
 8101e0c:	08101eb9 	.word	0x08101eb9
 8101e10:	08101e95 	.word	0x08101e95
 8101e14:	08101eb9 	.word	0x08101eb9
 8101e18:	08101eb9 	.word	0x08101eb9
 8101e1c:	08101eb9 	.word	0x08101eb9
 8101e20:	08101eb9 	.word	0x08101eb9
 8101e24:	08101eb9 	.word	0x08101eb9
 8101e28:	08101eb9 	.word	0x08101eb9
 8101e2c:	08101eb9 	.word	0x08101eb9
 8101e30:	08101ea7 	.word	0x08101ea7
 8101e34:	08101eb9 	.word	0x08101eb9
 8101e38:	08101eb9 	.word	0x08101eb9
 8101e3c:	08101eb9 	.word	0x08101eb9
 8101e40:	08101eb9 	.word	0x08101eb9
 8101e44:	08101eb9 	.word	0x08101eb9
 8101e48:	08101eb9 	.word	0x08101eb9
 8101e4c:	08101eb9 	.word	0x08101eb9
 8101e50:	08101ebf 	.word	0x08101ebf
 8101e54:	08101eb9 	.word	0x08101eb9
 8101e58:	08101eb9 	.word	0x08101eb9
 8101e5c:	08101eb9 	.word	0x08101eb9
 8101e60:	08101eb9 	.word	0x08101eb9
 8101e64:	08101eb9 	.word	0x08101eb9
 8101e68:	08101eb9 	.word	0x08101eb9
 8101e6c:	08101eb9 	.word	0x08101eb9
 8101e70:	08101ebf 	.word	0x08101ebf
 8101e74:	08101eb9 	.word	0x08101eb9
 8101e78:	08101eb9 	.word	0x08101eb9
 8101e7c:	08101eb9 	.word	0x08101eb9
 8101e80:	08101eb9 	.word	0x08101eb9
 8101e84:	08101eb9 	.word	0x08101eb9
 8101e88:	08101eb9 	.word	0x08101eb9
 8101e8c:	08101eb9 	.word	0x08101eb9
 8101e90:	08101ebf 	.word	0x08101ebf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101e94:	687b      	ldr	r3, [r7, #4]
 8101e96:	3304      	adds	r3, #4
 8101e98:	2101      	movs	r1, #1
 8101e9a:	4618      	mov	r0, r3
 8101e9c:	f000 fb34 	bl	8102508 <RCCEx_PLL2_Config>
 8101ea0:	4603      	mov	r3, r0
 8101ea2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101ea4:	e00c      	b.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	3324      	adds	r3, #36	; 0x24
 8101eaa:	2101      	movs	r1, #1
 8101eac:	4618      	mov	r0, r3
 8101eae:	f000 fbdd 	bl	810266c <RCCEx_PLL3_Config>
 8101eb2:	4603      	mov	r3, r0
 8101eb4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101eb6:	e003      	b.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101eb8:	2301      	movs	r3, #1
 8101eba:	75fb      	strb	r3, [r7, #23]
      break;
 8101ebc:	e000      	b.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8101ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ec0:	7dfb      	ldrb	r3, [r7, #23]
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	d109      	bne.n	8101eda <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101ec6:	4b24      	ldr	r3, [pc, #144]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101eca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101ed2:	4921      	ldr	r1, [pc, #132]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ed4:	4313      	orrs	r3, r2
 8101ed6:	654b      	str	r3, [r1, #84]	; 0x54
 8101ed8:	e001      	b.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101eda:	7dfb      	ldrb	r3, [r7, #23]
 8101edc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	681b      	ldr	r3, [r3, #0]
 8101ee2:	f003 0302 	and.w	r3, r3, #2
 8101ee6:	2b00      	cmp	r3, #0
 8101ee8:	d03c      	beq.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101eee:	2b05      	cmp	r3, #5
 8101ef0:	d820      	bhi.n	8101f34 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8101ef2:	a201      	add	r2, pc, #4	; (adr r2, 8101ef8 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8101ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ef8:	08101f3b 	.word	0x08101f3b
 8101efc:	08101f11 	.word	0x08101f11
 8101f00:	08101f23 	.word	0x08101f23
 8101f04:	08101f3b 	.word	0x08101f3b
 8101f08:	08101f3b 	.word	0x08101f3b
 8101f0c:	08101f3b 	.word	0x08101f3b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	3304      	adds	r3, #4
 8101f14:	2101      	movs	r1, #1
 8101f16:	4618      	mov	r0, r3
 8101f18:	f000 faf6 	bl	8102508 <RCCEx_PLL2_Config>
 8101f1c:	4603      	mov	r3, r0
 8101f1e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101f20:	e00c      	b.n	8101f3c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	3324      	adds	r3, #36	; 0x24
 8101f26:	2101      	movs	r1, #1
 8101f28:	4618      	mov	r0, r3
 8101f2a:	f000 fb9f 	bl	810266c <RCCEx_PLL3_Config>
 8101f2e:	4603      	mov	r3, r0
 8101f30:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101f32:	e003      	b.n	8101f3c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f34:	2301      	movs	r3, #1
 8101f36:	75fb      	strb	r3, [r7, #23]
      break;
 8101f38:	e000      	b.n	8101f3c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8101f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f3c:	7dfb      	ldrb	r3, [r7, #23]
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	d10e      	bne.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101f42:	4b05      	ldr	r3, [pc, #20]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f46:	f023 0207 	bic.w	r2, r3, #7
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101f4e:	4902      	ldr	r1, [pc, #8]	; (8101f58 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101f50:	4313      	orrs	r3, r2
 8101f52:	654b      	str	r3, [r1, #84]	; 0x54
 8101f54:	e006      	b.n	8101f64 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8101f56:	bf00      	nop
 8101f58:	58024400 	.word	0x58024400
 8101f5c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f60:	7dfb      	ldrb	r3, [r7, #23]
 8101f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101f64:	687b      	ldr	r3, [r7, #4]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	f003 0304 	and.w	r3, r3, #4
 8101f6c:	2b00      	cmp	r3, #0
 8101f6e:	d039      	beq.n	8101fe4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f76:	2b05      	cmp	r3, #5
 8101f78:	d820      	bhi.n	8101fbc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8101f7a:	a201      	add	r2, pc, #4	; (adr r2, 8101f80 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8101f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f80:	08101fc3 	.word	0x08101fc3
 8101f84:	08101f99 	.word	0x08101f99
 8101f88:	08101fab 	.word	0x08101fab
 8101f8c:	08101fc3 	.word	0x08101fc3
 8101f90:	08101fc3 	.word	0x08101fc3
 8101f94:	08101fc3 	.word	0x08101fc3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	3304      	adds	r3, #4
 8101f9c:	2101      	movs	r1, #1
 8101f9e:	4618      	mov	r0, r3
 8101fa0:	f000 fab2 	bl	8102508 <RCCEx_PLL2_Config>
 8101fa4:	4603      	mov	r3, r0
 8101fa6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101fa8:	e00c      	b.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101faa:	687b      	ldr	r3, [r7, #4]
 8101fac:	3324      	adds	r3, #36	; 0x24
 8101fae:	2101      	movs	r1, #1
 8101fb0:	4618      	mov	r0, r3
 8101fb2:	f000 fb5b 	bl	810266c <RCCEx_PLL3_Config>
 8101fb6:	4603      	mov	r3, r0
 8101fb8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101fba:	e003      	b.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101fbc:	2301      	movs	r3, #1
 8101fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8101fc0:	e000      	b.n	8101fc4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8101fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fc4:	7dfb      	ldrb	r3, [r7, #23]
 8101fc6:	2b00      	cmp	r3, #0
 8101fc8:	d10a      	bne.n	8101fe0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101fca:	4bb7      	ldr	r3, [pc, #732]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101fce:	f023 0207 	bic.w	r2, r3, #7
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101fd8:	49b3      	ldr	r1, [pc, #716]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101fda:	4313      	orrs	r3, r2
 8101fdc:	658b      	str	r3, [r1, #88]	; 0x58
 8101fde:	e001      	b.n	8101fe4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fe0:	7dfb      	ldrb	r3, [r7, #23]
 8101fe2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	f003 0320 	and.w	r3, r3, #32
 8101fec:	2b00      	cmp	r3, #0
 8101fee:	d04b      	beq.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101ff0:	687b      	ldr	r3, [r7, #4]
 8101ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101ffa:	d02e      	beq.n	810205a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8101ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102000:	d828      	bhi.n	8102054 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102006:	d02a      	beq.n	810205e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810200c:	d822      	bhi.n	8102054 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810200e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102012:	d026      	beq.n	8102062 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102014:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102018:	d81c      	bhi.n	8102054 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810201a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810201e:	d010      	beq.n	8102042 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102024:	d816      	bhi.n	8102054 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102026:	2b00      	cmp	r3, #0
 8102028:	d01d      	beq.n	8102066 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810202a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810202e:	d111      	bne.n	8102054 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102030:	687b      	ldr	r3, [r7, #4]
 8102032:	3304      	adds	r3, #4
 8102034:	2100      	movs	r1, #0
 8102036:	4618      	mov	r0, r3
 8102038:	f000 fa66 	bl	8102508 <RCCEx_PLL2_Config>
 810203c:	4603      	mov	r3, r0
 810203e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102040:	e012      	b.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	3324      	adds	r3, #36	; 0x24
 8102046:	2102      	movs	r1, #2
 8102048:	4618      	mov	r0, r3
 810204a:	f000 fb0f 	bl	810266c <RCCEx_PLL3_Config>
 810204e:	4603      	mov	r3, r0
 8102050:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102052:	e009      	b.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102054:	2301      	movs	r3, #1
 8102056:	75fb      	strb	r3, [r7, #23]
      break;
 8102058:	e006      	b.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810205a:	bf00      	nop
 810205c:	e004      	b.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810205e:	bf00      	nop
 8102060:	e002      	b.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102062:	bf00      	nop
 8102064:	e000      	b.n	8102068 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102066:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102068:	7dfb      	ldrb	r3, [r7, #23]
 810206a:	2b00      	cmp	r3, #0
 810206c:	d10a      	bne.n	8102084 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810206e:	4b8e      	ldr	r3, [pc, #568]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102072:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810207c:	498a      	ldr	r1, [pc, #552]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810207e:	4313      	orrs	r3, r2
 8102080:	654b      	str	r3, [r1, #84]	; 0x54
 8102082:	e001      	b.n	8102088 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102084:	7dfb      	ldrb	r3, [r7, #23]
 8102086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102090:	2b00      	cmp	r3, #0
 8102092:	d04b      	beq.n	810212c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810209a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810209e:	d02e      	beq.n	81020fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81020a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81020a4:	d828      	bhi.n	81020f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81020aa:	d02a      	beq.n	8102102 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81020b0:	d822      	bhi.n	81020f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81020b6:	d026      	beq.n	8102106 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81020b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81020bc:	d81c      	bhi.n	81020f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81020c2:	d010      	beq.n	81020e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81020c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81020c8:	d816      	bhi.n	81020f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d01d      	beq.n	810210a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81020ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81020d2:	d111      	bne.n	81020f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	3304      	adds	r3, #4
 81020d8:	2100      	movs	r1, #0
 81020da:	4618      	mov	r0, r3
 81020dc:	f000 fa14 	bl	8102508 <RCCEx_PLL2_Config>
 81020e0:	4603      	mov	r3, r0
 81020e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81020e4:	e012      	b.n	810210c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	3324      	adds	r3, #36	; 0x24
 81020ea:	2102      	movs	r1, #2
 81020ec:	4618      	mov	r0, r3
 81020ee:	f000 fabd 	bl	810266c <RCCEx_PLL3_Config>
 81020f2:	4603      	mov	r3, r0
 81020f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81020f6:	e009      	b.n	810210c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020f8:	2301      	movs	r3, #1
 81020fa:	75fb      	strb	r3, [r7, #23]
      break;
 81020fc:	e006      	b.n	810210c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020fe:	bf00      	nop
 8102100:	e004      	b.n	810210c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102102:	bf00      	nop
 8102104:	e002      	b.n	810210c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102106:	bf00      	nop
 8102108:	e000      	b.n	810210c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810210a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810210c:	7dfb      	ldrb	r3, [r7, #23]
 810210e:	2b00      	cmp	r3, #0
 8102110:	d10a      	bne.n	8102128 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102112:	4b65      	ldr	r3, [pc, #404]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102116:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102120:	4961      	ldr	r1, [pc, #388]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102122:	4313      	orrs	r3, r2
 8102124:	658b      	str	r3, [r1, #88]	; 0x58
 8102126:	e001      	b.n	810212c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102128:	7dfb      	ldrb	r3, [r7, #23]
 810212a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102134:	2b00      	cmp	r3, #0
 8102136:	d04b      	beq.n	81021d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810213e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102142:	d02e      	beq.n	81021a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102144:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102148:	d828      	bhi.n	810219c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810214a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810214e:	d02a      	beq.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102154:	d822      	bhi.n	810219c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102156:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810215a:	d026      	beq.n	81021aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810215c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102160:	d81c      	bhi.n	810219c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102166:	d010      	beq.n	810218a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8102168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810216c:	d816      	bhi.n	810219c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810216e:	2b00      	cmp	r3, #0
 8102170:	d01d      	beq.n	81021ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102176:	d111      	bne.n	810219c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	3304      	adds	r3, #4
 810217c:	2100      	movs	r1, #0
 810217e:	4618      	mov	r0, r3
 8102180:	f000 f9c2 	bl	8102508 <RCCEx_PLL2_Config>
 8102184:	4603      	mov	r3, r0
 8102186:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102188:	e012      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	3324      	adds	r3, #36	; 0x24
 810218e:	2102      	movs	r1, #2
 8102190:	4618      	mov	r0, r3
 8102192:	f000 fa6b 	bl	810266c <RCCEx_PLL3_Config>
 8102196:	4603      	mov	r3, r0
 8102198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810219a:	e009      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810219c:	2301      	movs	r3, #1
 810219e:	75fb      	strb	r3, [r7, #23]
      break;
 81021a0:	e006      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81021a2:	bf00      	nop
 81021a4:	e004      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81021a6:	bf00      	nop
 81021a8:	e002      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81021aa:	bf00      	nop
 81021ac:	e000      	b.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81021ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021b0:	7dfb      	ldrb	r3, [r7, #23]
 81021b2:	2b00      	cmp	r3, #0
 81021b4:	d10a      	bne.n	81021cc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81021b6:	4b3c      	ldr	r3, [pc, #240]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81021be:	687b      	ldr	r3, [r7, #4]
 81021c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81021c4:	4938      	ldr	r1, [pc, #224]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021c6:	4313      	orrs	r3, r2
 81021c8:	658b      	str	r3, [r1, #88]	; 0x58
 81021ca:	e001      	b.n	81021d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021cc:	7dfb      	ldrb	r3, [r7, #23]
 81021ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	681b      	ldr	r3, [r3, #0]
 81021d4:	f003 0308 	and.w	r3, r3, #8
 81021d8:	2b00      	cmp	r3, #0
 81021da:	d01a      	beq.n	8102212 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81021e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81021e6:	d10a      	bne.n	81021fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	3324      	adds	r3, #36	; 0x24
 81021ec:	2102      	movs	r1, #2
 81021ee:	4618      	mov	r0, r3
 81021f0:	f000 fa3c 	bl	810266c <RCCEx_PLL3_Config>
 81021f4:	4603      	mov	r3, r0
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d001      	beq.n	81021fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81021fa:	2301      	movs	r3, #1
 81021fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81021fe:	4b2a      	ldr	r3, [pc, #168]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102202:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102206:	687b      	ldr	r3, [r7, #4]
 8102208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810220c:	4926      	ldr	r1, [pc, #152]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810220e:	4313      	orrs	r3, r2
 8102210:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	f003 0310 	and.w	r3, r3, #16
 810221a:	2b00      	cmp	r3, #0
 810221c:	d01a      	beq.n	8102254 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102228:	d10a      	bne.n	8102240 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	3324      	adds	r3, #36	; 0x24
 810222e:	2102      	movs	r1, #2
 8102230:	4618      	mov	r0, r3
 8102232:	f000 fa1b 	bl	810266c <RCCEx_PLL3_Config>
 8102236:	4603      	mov	r3, r0
 8102238:	2b00      	cmp	r3, #0
 810223a:	d001      	beq.n	8102240 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810223c:	2301      	movs	r3, #1
 810223e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102240:	4b19      	ldr	r3, [pc, #100]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810224e:	4916      	ldr	r1, [pc, #88]	; (81022a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102250:	4313      	orrs	r3, r2
 8102252:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	681b      	ldr	r3, [r3, #0]
 8102258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810225c:	2b00      	cmp	r3, #0
 810225e:	d036      	beq.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810226a:	d01f      	beq.n	81022ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810226c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102270:	d817      	bhi.n	81022a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102272:	2b00      	cmp	r3, #0
 8102274:	d003      	beq.n	810227e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8102276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810227a:	d009      	beq.n	8102290 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810227c:	e011      	b.n	81022a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	3304      	adds	r3, #4
 8102282:	2100      	movs	r1, #0
 8102284:	4618      	mov	r0, r3
 8102286:	f000 f93f 	bl	8102508 <RCCEx_PLL2_Config>
 810228a:	4603      	mov	r3, r0
 810228c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810228e:	e00e      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	3324      	adds	r3, #36	; 0x24
 8102294:	2102      	movs	r1, #2
 8102296:	4618      	mov	r0, r3
 8102298:	f000 f9e8 	bl	810266c <RCCEx_PLL3_Config>
 810229c:	4603      	mov	r3, r0
 810229e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81022a0:	e005      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022a2:	2301      	movs	r3, #1
 81022a4:	75fb      	strb	r3, [r7, #23]
      break;
 81022a6:	e002      	b.n	81022ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81022a8:	58024400 	.word	0x58024400
      break;
 81022ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022ae:	7dfb      	ldrb	r3, [r7, #23]
 81022b0:	2b00      	cmp	r3, #0
 81022b2:	d10a      	bne.n	81022ca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81022b4:	4b93      	ldr	r3, [pc, #588]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81022c2:	4990      	ldr	r1, [pc, #576]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022c4:	4313      	orrs	r3, r2
 81022c6:	658b      	str	r3, [r1, #88]	; 0x58
 81022c8:	e001      	b.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022ca:	7dfb      	ldrb	r3, [r7, #23]
 81022cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81022ce:	687b      	ldr	r3, [r7, #4]
 81022d0:	681b      	ldr	r3, [r3, #0]
 81022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81022d6:	2b00      	cmp	r3, #0
 81022d8:	d033      	beq.n	8102342 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81022e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81022e4:	d01c      	beq.n	8102320 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81022e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81022ea:	d816      	bhi.n	810231a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81022ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81022f0:	d003      	beq.n	81022fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81022f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81022f6:	d007      	beq.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81022f8:	e00f      	b.n	810231a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022fa:	4b82      	ldr	r3, [pc, #520]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022fe:	4a81      	ldr	r2, [pc, #516]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102304:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102306:	e00c      	b.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	3324      	adds	r3, #36	; 0x24
 810230c:	2101      	movs	r1, #1
 810230e:	4618      	mov	r0, r3
 8102310:	f000 f9ac 	bl	810266c <RCCEx_PLL3_Config>
 8102314:	4603      	mov	r3, r0
 8102316:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102318:	e003      	b.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810231a:	2301      	movs	r3, #1
 810231c:	75fb      	strb	r3, [r7, #23]
      break;
 810231e:	e000      	b.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102322:	7dfb      	ldrb	r3, [r7, #23]
 8102324:	2b00      	cmp	r3, #0
 8102326:	d10a      	bne.n	810233e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102328:	4b76      	ldr	r3, [pc, #472]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810232c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102336:	4973      	ldr	r1, [pc, #460]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102338:	4313      	orrs	r3, r2
 810233a:	654b      	str	r3, [r1, #84]	; 0x54
 810233c:	e001      	b.n	8102342 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810233e:	7dfb      	ldrb	r3, [r7, #23]
 8102340:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810234a:	2b00      	cmp	r3, #0
 810234c:	d029      	beq.n	81023a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102352:	2b00      	cmp	r3, #0
 8102354:	d003      	beq.n	810235e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8102356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810235a:	d007      	beq.n	810236c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810235c:	e00f      	b.n	810237e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810235e:	4b69      	ldr	r3, [pc, #420]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102362:	4a68      	ldr	r2, [pc, #416]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810236a:	e00b      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	3304      	adds	r3, #4
 8102370:	2102      	movs	r1, #2
 8102372:	4618      	mov	r0, r3
 8102374:	f000 f8c8 	bl	8102508 <RCCEx_PLL2_Config>
 8102378:	4603      	mov	r3, r0
 810237a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810237c:	e002      	b.n	8102384 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810237e:	2301      	movs	r3, #1
 8102380:	75fb      	strb	r3, [r7, #23]
      break;
 8102382:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102384:	7dfb      	ldrb	r3, [r7, #23]
 8102386:	2b00      	cmp	r3, #0
 8102388:	d109      	bne.n	810239e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810238a:	4b5e      	ldr	r3, [pc, #376]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810238e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102396:	495b      	ldr	r1, [pc, #364]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102398:	4313      	orrs	r3, r2
 810239a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810239c:	e001      	b.n	81023a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810239e:	7dfb      	ldrb	r3, [r7, #23]
 81023a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	681b      	ldr	r3, [r3, #0]
 81023a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	d00a      	beq.n	81023c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	3324      	adds	r3, #36	; 0x24
 81023b2:	2102      	movs	r1, #2
 81023b4:	4618      	mov	r0, r3
 81023b6:	f000 f959 	bl	810266c <RCCEx_PLL3_Config>
 81023ba:	4603      	mov	r3, r0
 81023bc:	2b00      	cmp	r3, #0
 81023be:	d001      	beq.n	81023c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81023c0:	2301      	movs	r3, #1
 81023c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81023cc:	2b00      	cmp	r3, #0
 81023ce:	d030      	beq.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81023d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81023d8:	d017      	beq.n	810240a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81023da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81023de:	d811      	bhi.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81023e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81023e4:	d013      	beq.n	810240e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81023e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81023ea:	d80b      	bhi.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81023ec:	2b00      	cmp	r3, #0
 81023ee:	d010      	beq.n	8102412 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81023f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81023f4:	d106      	bne.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023f6:	4b43      	ldr	r3, [pc, #268]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023fa:	4a42      	ldr	r2, [pc, #264]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102402:	e007      	b.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102404:	2301      	movs	r3, #1
 8102406:	75fb      	strb	r3, [r7, #23]
      break;
 8102408:	e004      	b.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810240a:	bf00      	nop
 810240c:	e002      	b.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810240e:	bf00      	nop
 8102410:	e000      	b.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102414:	7dfb      	ldrb	r3, [r7, #23]
 8102416:	2b00      	cmp	r3, #0
 8102418:	d109      	bne.n	810242e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810241a:	4b3a      	ldr	r3, [pc, #232]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810241e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102426:	4937      	ldr	r1, [pc, #220]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102428:	4313      	orrs	r3, r2
 810242a:	654b      	str	r3, [r1, #84]	; 0x54
 810242c:	e001      	b.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810242e:	7dfb      	ldrb	r3, [r7, #23]
 8102430:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810243a:	2b00      	cmp	r3, #0
 810243c:	d008      	beq.n	8102450 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810243e:	4b31      	ldr	r3, [pc, #196]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810244a:	492e      	ldr	r1, [pc, #184]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810244c:	4313      	orrs	r3, r2
 810244e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102458:	2b00      	cmp	r3, #0
 810245a:	d009      	beq.n	8102470 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810245c:	4b29      	ldr	r3, [pc, #164]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810245e:	691b      	ldr	r3, [r3, #16]
 8102460:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810246a:	4926      	ldr	r1, [pc, #152]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810246c:	4313      	orrs	r3, r2
 810246e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102478:	2b00      	cmp	r3, #0
 810247a:	d008      	beq.n	810248e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810247c:	4b21      	ldr	r3, [pc, #132]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810247e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102480:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102488:	491e      	ldr	r1, [pc, #120]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810248a:	4313      	orrs	r3, r2
 810248c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102496:	2b00      	cmp	r3, #0
 8102498:	d00d      	beq.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810249a:	4b1a      	ldr	r3, [pc, #104]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810249c:	691b      	ldr	r3, [r3, #16]
 810249e:	4a19      	ldr	r2, [pc, #100]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81024a4:	6113      	str	r3, [r2, #16]
 81024a6:	4b17      	ldr	r3, [pc, #92]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024a8:	691a      	ldr	r2, [r3, #16]
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81024b0:	4914      	ldr	r1, [pc, #80]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024b2:	4313      	orrs	r3, r2
 81024b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	2b00      	cmp	r3, #0
 81024bc:	da08      	bge.n	81024d0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81024be:	4b11      	ldr	r3, [pc, #68]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81024c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024ca:	490e      	ldr	r1, [pc, #56]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024cc:	4313      	orrs	r3, r2
 81024ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	681b      	ldr	r3, [r3, #0]
 81024d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81024d8:	2b00      	cmp	r3, #0
 81024da:	d009      	beq.n	81024f0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81024dc:	4b09      	ldr	r3, [pc, #36]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81024ea:	4906      	ldr	r1, [pc, #24]	; (8102504 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024ec:	4313      	orrs	r3, r2
 81024ee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81024f0:	7dbb      	ldrb	r3, [r7, #22]
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d101      	bne.n	81024fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81024f6:	2300      	movs	r3, #0
 81024f8:	e000      	b.n	81024fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81024fa:	2301      	movs	r3, #1
}
 81024fc:	4618      	mov	r0, r3
 81024fe:	3718      	adds	r7, #24
 8102500:	46bd      	mov	sp, r7
 8102502:	bd80      	pop	{r7, pc}
 8102504:	58024400 	.word	0x58024400

08102508 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102508:	b580      	push	{r7, lr}
 810250a:	b084      	sub	sp, #16
 810250c:	af00      	add	r7, sp, #0
 810250e:	6078      	str	r0, [r7, #4]
 8102510:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102512:	2300      	movs	r3, #0
 8102514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102516:	4b54      	ldr	r3, [pc, #336]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810251a:	f003 0303 	and.w	r3, r3, #3
 810251e:	2b03      	cmp	r3, #3
 8102520:	d101      	bne.n	8102526 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102522:	2301      	movs	r3, #1
 8102524:	e09b      	b.n	810265e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102526:	4b50      	ldr	r3, [pc, #320]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	4a4f      	ldr	r2, [pc, #316]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 810252c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102532:	f7fe fa35 	bl	81009a0 <HAL_GetTick>
 8102536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102538:	e008      	b.n	810254c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810253a:	f7fe fa31 	bl	81009a0 <HAL_GetTick>
 810253e:	4602      	mov	r2, r0
 8102540:	68bb      	ldr	r3, [r7, #8]
 8102542:	1ad3      	subs	r3, r2, r3
 8102544:	2b02      	cmp	r3, #2
 8102546:	d901      	bls.n	810254c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102548:	2303      	movs	r3, #3
 810254a:	e088      	b.n	810265e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810254c:	4b46      	ldr	r3, [pc, #280]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102554:	2b00      	cmp	r3, #0
 8102556:	d1f0      	bne.n	810253a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102558:	4b43      	ldr	r3, [pc, #268]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 810255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810255c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	031b      	lsls	r3, r3, #12
 8102566:	4940      	ldr	r1, [pc, #256]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102568:	4313      	orrs	r3, r2
 810256a:	628b      	str	r3, [r1, #40]	; 0x28
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	685b      	ldr	r3, [r3, #4]
 8102570:	3b01      	subs	r3, #1
 8102572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102576:	687b      	ldr	r3, [r7, #4]
 8102578:	689b      	ldr	r3, [r3, #8]
 810257a:	3b01      	subs	r3, #1
 810257c:	025b      	lsls	r3, r3, #9
 810257e:	b29b      	uxth	r3, r3
 8102580:	431a      	orrs	r2, r3
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	68db      	ldr	r3, [r3, #12]
 8102586:	3b01      	subs	r3, #1
 8102588:	041b      	lsls	r3, r3, #16
 810258a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810258e:	431a      	orrs	r2, r3
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	691b      	ldr	r3, [r3, #16]
 8102594:	3b01      	subs	r3, #1
 8102596:	061b      	lsls	r3, r3, #24
 8102598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810259c:	4932      	ldr	r1, [pc, #200]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 810259e:	4313      	orrs	r3, r2
 81025a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81025a2:	4b31      	ldr	r3, [pc, #196]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	695b      	ldr	r3, [r3, #20]
 81025ae:	492e      	ldr	r1, [pc, #184]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025b0:	4313      	orrs	r3, r2
 81025b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81025b4:	4b2c      	ldr	r3, [pc, #176]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025b8:	f023 0220 	bic.w	r2, r3, #32
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	699b      	ldr	r3, [r3, #24]
 81025c0:	4929      	ldr	r1, [pc, #164]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025c2:	4313      	orrs	r3, r2
 81025c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81025c6:	4b28      	ldr	r3, [pc, #160]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025ca:	4a27      	ldr	r2, [pc, #156]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025cc:	f023 0310 	bic.w	r3, r3, #16
 81025d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81025d2:	4b25      	ldr	r3, [pc, #148]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81025d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81025da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81025de:	687a      	ldr	r2, [r7, #4]
 81025e0:	69d2      	ldr	r2, [r2, #28]
 81025e2:	00d2      	lsls	r2, r2, #3
 81025e4:	4920      	ldr	r1, [pc, #128]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025e6:	4313      	orrs	r3, r2
 81025e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81025ea:	4b1f      	ldr	r3, [pc, #124]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025ee:	4a1e      	ldr	r2, [pc, #120]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025f0:	f043 0310 	orr.w	r3, r3, #16
 81025f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81025f6:	683b      	ldr	r3, [r7, #0]
 81025f8:	2b00      	cmp	r3, #0
 81025fa:	d106      	bne.n	810260a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81025fc:	4b1a      	ldr	r3, [pc, #104]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 81025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102600:	4a19      	ldr	r2, [pc, #100]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102608:	e00f      	b.n	810262a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810260a:	683b      	ldr	r3, [r7, #0]
 810260c:	2b01      	cmp	r3, #1
 810260e:	d106      	bne.n	810261e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102610:	4b15      	ldr	r3, [pc, #84]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102614:	4a14      	ldr	r2, [pc, #80]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810261a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810261c:	e005      	b.n	810262a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810261e:	4b12      	ldr	r3, [pc, #72]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102622:	4a11      	ldr	r2, [pc, #68]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810262a:	4b0f      	ldr	r3, [pc, #60]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	4a0e      	ldr	r2, [pc, #56]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102636:	f7fe f9b3 	bl	81009a0 <HAL_GetTick>
 810263a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810263c:	e008      	b.n	8102650 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810263e:	f7fe f9af 	bl	81009a0 <HAL_GetTick>
 8102642:	4602      	mov	r2, r0
 8102644:	68bb      	ldr	r3, [r7, #8]
 8102646:	1ad3      	subs	r3, r2, r3
 8102648:	2b02      	cmp	r3, #2
 810264a:	d901      	bls.n	8102650 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810264c:	2303      	movs	r3, #3
 810264e:	e006      	b.n	810265e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102650:	4b05      	ldr	r3, [pc, #20]	; (8102668 <RCCEx_PLL2_Config+0x160>)
 8102652:	681b      	ldr	r3, [r3, #0]
 8102654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102658:	2b00      	cmp	r3, #0
 810265a:	d0f0      	beq.n	810263e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810265c:	7bfb      	ldrb	r3, [r7, #15]
}
 810265e:	4618      	mov	r0, r3
 8102660:	3710      	adds	r7, #16
 8102662:	46bd      	mov	sp, r7
 8102664:	bd80      	pop	{r7, pc}
 8102666:	bf00      	nop
 8102668:	58024400 	.word	0x58024400

0810266c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810266c:	b580      	push	{r7, lr}
 810266e:	b084      	sub	sp, #16
 8102670:	af00      	add	r7, sp, #0
 8102672:	6078      	str	r0, [r7, #4]
 8102674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102676:	2300      	movs	r3, #0
 8102678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810267a:	4b54      	ldr	r3, [pc, #336]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 810267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810267e:	f003 0303 	and.w	r3, r3, #3
 8102682:	2b03      	cmp	r3, #3
 8102684:	d101      	bne.n	810268a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102686:	2301      	movs	r3, #1
 8102688:	e09b      	b.n	81027c2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810268a:	4b50      	ldr	r3, [pc, #320]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	4a4f      	ldr	r2, [pc, #316]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102696:	f7fe f983 	bl	81009a0 <HAL_GetTick>
 810269a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810269c:	e008      	b.n	81026b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810269e:	f7fe f97f 	bl	81009a0 <HAL_GetTick>
 81026a2:	4602      	mov	r2, r0
 81026a4:	68bb      	ldr	r3, [r7, #8]
 81026a6:	1ad3      	subs	r3, r2, r3
 81026a8:	2b02      	cmp	r3, #2
 81026aa:	d901      	bls.n	81026b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81026ac:	2303      	movs	r3, #3
 81026ae:	e088      	b.n	81027c2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81026b0:	4b46      	ldr	r3, [pc, #280]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81026b8:	2b00      	cmp	r3, #0
 81026ba:	d1f0      	bne.n	810269e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81026bc:	4b43      	ldr	r3, [pc, #268]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 81026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81026c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	051b      	lsls	r3, r3, #20
 81026ca:	4940      	ldr	r1, [pc, #256]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 81026cc:	4313      	orrs	r3, r2
 81026ce:	628b      	str	r3, [r1, #40]	; 0x28
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	685b      	ldr	r3, [r3, #4]
 81026d4:	3b01      	subs	r3, #1
 81026d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	689b      	ldr	r3, [r3, #8]
 81026de:	3b01      	subs	r3, #1
 81026e0:	025b      	lsls	r3, r3, #9
 81026e2:	b29b      	uxth	r3, r3
 81026e4:	431a      	orrs	r2, r3
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	68db      	ldr	r3, [r3, #12]
 81026ea:	3b01      	subs	r3, #1
 81026ec:	041b      	lsls	r3, r3, #16
 81026ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81026f2:	431a      	orrs	r2, r3
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	691b      	ldr	r3, [r3, #16]
 81026f8:	3b01      	subs	r3, #1
 81026fa:	061b      	lsls	r3, r3, #24
 81026fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102700:	4932      	ldr	r1, [pc, #200]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102702:	4313      	orrs	r3, r2
 8102704:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102706:	4b31      	ldr	r3, [pc, #196]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810270a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	695b      	ldr	r3, [r3, #20]
 8102712:	492e      	ldr	r1, [pc, #184]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102714:	4313      	orrs	r3, r2
 8102716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102718:	4b2c      	ldr	r3, [pc, #176]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 810271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810271c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	699b      	ldr	r3, [r3, #24]
 8102724:	4929      	ldr	r1, [pc, #164]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102726:	4313      	orrs	r3, r2
 8102728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810272a:	4b28      	ldr	r3, [pc, #160]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 810272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810272e:	4a27      	ldr	r2, [pc, #156]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102736:	4b25      	ldr	r3, [pc, #148]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810273a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810273e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102742:	687a      	ldr	r2, [r7, #4]
 8102744:	69d2      	ldr	r2, [r2, #28]
 8102746:	00d2      	lsls	r2, r2, #3
 8102748:	4920      	ldr	r1, [pc, #128]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 810274a:	4313      	orrs	r3, r2
 810274c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810274e:	4b1f      	ldr	r3, [pc, #124]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102752:	4a1e      	ldr	r2, [pc, #120]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810275a:	683b      	ldr	r3, [r7, #0]
 810275c:	2b00      	cmp	r3, #0
 810275e:	d106      	bne.n	810276e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102760:	4b1a      	ldr	r3, [pc, #104]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102764:	4a19      	ldr	r2, [pc, #100]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810276a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810276c:	e00f      	b.n	810278e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810276e:	683b      	ldr	r3, [r7, #0]
 8102770:	2b01      	cmp	r3, #1
 8102772:	d106      	bne.n	8102782 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102774:	4b15      	ldr	r3, [pc, #84]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102778:	4a14      	ldr	r2, [pc, #80]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 810277a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810277e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102780:	e005      	b.n	810278e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102782:	4b12      	ldr	r3, [pc, #72]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102786:	4a11      	ldr	r2, [pc, #68]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810278c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810278e:	4b0f      	ldr	r3, [pc, #60]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102790:	681b      	ldr	r3, [r3, #0]
 8102792:	4a0e      	ldr	r2, [pc, #56]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 8102794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810279a:	f7fe f901 	bl	81009a0 <HAL_GetTick>
 810279e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81027a0:	e008      	b.n	81027b4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81027a2:	f7fe f8fd 	bl	81009a0 <HAL_GetTick>
 81027a6:	4602      	mov	r2, r0
 81027a8:	68bb      	ldr	r3, [r7, #8]
 81027aa:	1ad3      	subs	r3, r2, r3
 81027ac:	2b02      	cmp	r3, #2
 81027ae:	d901      	bls.n	81027b4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81027b0:	2303      	movs	r3, #3
 81027b2:	e006      	b.n	81027c2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81027b4:	4b05      	ldr	r3, [pc, #20]	; (81027cc <RCCEx_PLL3_Config+0x160>)
 81027b6:	681b      	ldr	r3, [r3, #0]
 81027b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81027bc:	2b00      	cmp	r3, #0
 81027be:	d0f0      	beq.n	81027a2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81027c2:	4618      	mov	r0, r3
 81027c4:	3710      	adds	r7, #16
 81027c6:	46bd      	mov	sp, r7
 81027c8:	bd80      	pop	{r7, pc}
 81027ca:	bf00      	nop
 81027cc:	58024400 	.word	0x58024400

081027d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81027d0:	b580      	push	{r7, lr}
 81027d2:	b082      	sub	sp, #8
 81027d4:	af00      	add	r7, sp, #0
 81027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	2b00      	cmp	r3, #0
 81027dc:	d101      	bne.n	81027e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81027de:	2301      	movs	r3, #1
 81027e0:	e049      	b.n	8102876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81027e8:	b2db      	uxtb	r3, r3
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	d106      	bne.n	81027fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	2200      	movs	r2, #0
 81027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81027f6:	6878      	ldr	r0, [r7, #4]
 81027f8:	f000 f841 	bl	810287e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	2202      	movs	r2, #2
 8102800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681a      	ldr	r2, [r3, #0]
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	3304      	adds	r3, #4
 810280c:	4619      	mov	r1, r3
 810280e:	4610      	mov	r0, r2
 8102810:	f000 f9f8 	bl	8102c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102814:	687b      	ldr	r3, [r7, #4]
 8102816:	2201      	movs	r2, #1
 8102818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810281c:	687b      	ldr	r3, [r7, #4]
 810281e:	2201      	movs	r2, #1
 8102820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	2201      	movs	r2, #1
 8102828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810282c:	687b      	ldr	r3, [r7, #4]
 810282e:	2201      	movs	r2, #1
 8102830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8102834:	687b      	ldr	r3, [r7, #4]
 8102836:	2201      	movs	r2, #1
 8102838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	2201      	movs	r2, #1
 8102840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102844:	687b      	ldr	r3, [r7, #4]
 8102846:	2201      	movs	r2, #1
 8102848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	2201      	movs	r2, #1
 8102850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	2201      	movs	r2, #1
 8102858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	2201      	movs	r2, #1
 8102860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	2201      	movs	r2, #1
 8102868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810286c:	687b      	ldr	r3, [r7, #4]
 810286e:	2201      	movs	r2, #1
 8102870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8102874:	2300      	movs	r3, #0
}
 8102876:	4618      	mov	r0, r3
 8102878:	3708      	adds	r7, #8
 810287a:	46bd      	mov	sp, r7
 810287c:	bd80      	pop	{r7, pc}

0810287e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810287e:	b480      	push	{r7}
 8102880:	b083      	sub	sp, #12
 8102882:	af00      	add	r7, sp, #0
 8102884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8102886:	bf00      	nop
 8102888:	370c      	adds	r7, #12
 810288a:	46bd      	mov	sp, r7
 810288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102890:	4770      	bx	lr
	...

08102894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8102894:	b480      	push	{r7}
 8102896:	b085      	sub	sp, #20
 8102898:	af00      	add	r7, sp, #0
 810289a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810289c:	687b      	ldr	r3, [r7, #4]
 810289e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81028a2:	b2db      	uxtb	r3, r3
 81028a4:	2b01      	cmp	r3, #1
 81028a6:	d001      	beq.n	81028ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81028a8:	2301      	movs	r3, #1
 81028aa:	e04f      	b.n	810294c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	2202      	movs	r2, #2
 81028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81028b4:	687b      	ldr	r3, [r7, #4]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	68da      	ldr	r2, [r3, #12]
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	681b      	ldr	r3, [r3, #0]
 81028be:	f042 0201 	orr.w	r2, r2, #1
 81028c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	681b      	ldr	r3, [r3, #0]
 81028c8:	4a23      	ldr	r2, [pc, #140]	; (8102958 <HAL_TIM_Base_Start_IT+0xc4>)
 81028ca:	4293      	cmp	r3, r2
 81028cc:	d01d      	beq.n	810290a <HAL_TIM_Base_Start_IT+0x76>
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81028d6:	d018      	beq.n	810290a <HAL_TIM_Base_Start_IT+0x76>
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	4a1f      	ldr	r2, [pc, #124]	; (810295c <HAL_TIM_Base_Start_IT+0xc8>)
 81028de:	4293      	cmp	r3, r2
 81028e0:	d013      	beq.n	810290a <HAL_TIM_Base_Start_IT+0x76>
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	681b      	ldr	r3, [r3, #0]
 81028e6:	4a1e      	ldr	r2, [pc, #120]	; (8102960 <HAL_TIM_Base_Start_IT+0xcc>)
 81028e8:	4293      	cmp	r3, r2
 81028ea:	d00e      	beq.n	810290a <HAL_TIM_Base_Start_IT+0x76>
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	4a1c      	ldr	r2, [pc, #112]	; (8102964 <HAL_TIM_Base_Start_IT+0xd0>)
 81028f2:	4293      	cmp	r3, r2
 81028f4:	d009      	beq.n	810290a <HAL_TIM_Base_Start_IT+0x76>
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	681b      	ldr	r3, [r3, #0]
 81028fa:	4a1b      	ldr	r2, [pc, #108]	; (8102968 <HAL_TIM_Base_Start_IT+0xd4>)
 81028fc:	4293      	cmp	r3, r2
 81028fe:	d004      	beq.n	810290a <HAL_TIM_Base_Start_IT+0x76>
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	4a19      	ldr	r2, [pc, #100]	; (810296c <HAL_TIM_Base_Start_IT+0xd8>)
 8102906:	4293      	cmp	r3, r2
 8102908:	d115      	bne.n	8102936 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	689a      	ldr	r2, [r3, #8]
 8102910:	4b17      	ldr	r3, [pc, #92]	; (8102970 <HAL_TIM_Base_Start_IT+0xdc>)
 8102912:	4013      	ands	r3, r2
 8102914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102916:	68fb      	ldr	r3, [r7, #12]
 8102918:	2b06      	cmp	r3, #6
 810291a:	d015      	beq.n	8102948 <HAL_TIM_Base_Start_IT+0xb4>
 810291c:	68fb      	ldr	r3, [r7, #12]
 810291e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102922:	d011      	beq.n	8102948 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	681a      	ldr	r2, [r3, #0]
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	f042 0201 	orr.w	r2, r2, #1
 8102932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102934:	e008      	b.n	8102948 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8102936:	687b      	ldr	r3, [r7, #4]
 8102938:	681b      	ldr	r3, [r3, #0]
 810293a:	681a      	ldr	r2, [r3, #0]
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	681b      	ldr	r3, [r3, #0]
 8102940:	f042 0201 	orr.w	r2, r2, #1
 8102944:	601a      	str	r2, [r3, #0]
 8102946:	e000      	b.n	810294a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810294a:	2300      	movs	r3, #0
}
 810294c:	4618      	mov	r0, r3
 810294e:	3714      	adds	r7, #20
 8102950:	46bd      	mov	sp, r7
 8102952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102956:	4770      	bx	lr
 8102958:	40010000 	.word	0x40010000
 810295c:	40000400 	.word	0x40000400
 8102960:	40000800 	.word	0x40000800
 8102964:	40000c00 	.word	0x40000c00
 8102968:	40010400 	.word	0x40010400
 810296c:	40001800 	.word	0x40001800
 8102970:	00010007 	.word	0x00010007

08102974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8102974:	b580      	push	{r7, lr}
 8102976:	b082      	sub	sp, #8
 8102978:	af00      	add	r7, sp, #0
 810297a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810297c:	687b      	ldr	r3, [r7, #4]
 810297e:	681b      	ldr	r3, [r3, #0]
 8102980:	691b      	ldr	r3, [r3, #16]
 8102982:	f003 0302 	and.w	r3, r3, #2
 8102986:	2b02      	cmp	r3, #2
 8102988:	d122      	bne.n	81029d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810298a:	687b      	ldr	r3, [r7, #4]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	68db      	ldr	r3, [r3, #12]
 8102990:	f003 0302 	and.w	r3, r3, #2
 8102994:	2b02      	cmp	r3, #2
 8102996:	d11b      	bne.n	81029d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	f06f 0202 	mvn.w	r2, #2
 81029a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	2201      	movs	r2, #1
 81029a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	699b      	ldr	r3, [r3, #24]
 81029ae:	f003 0303 	and.w	r3, r3, #3
 81029b2:	2b00      	cmp	r3, #0
 81029b4:	d003      	beq.n	81029be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81029b6:	6878      	ldr	r0, [r7, #4]
 81029b8:	f000 f905 	bl	8102bc6 <HAL_TIM_IC_CaptureCallback>
 81029bc:	e005      	b.n	81029ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 81029be:	6878      	ldr	r0, [r7, #4]
 81029c0:	f000 f8f7 	bl	8102bb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 81029c4:	6878      	ldr	r0, [r7, #4]
 81029c6:	f000 f908 	bl	8102bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	2200      	movs	r2, #0
 81029ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 81029d0:	687b      	ldr	r3, [r7, #4]
 81029d2:	681b      	ldr	r3, [r3, #0]
 81029d4:	691b      	ldr	r3, [r3, #16]
 81029d6:	f003 0304 	and.w	r3, r3, #4
 81029da:	2b04      	cmp	r3, #4
 81029dc:	d122      	bne.n	8102a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	68db      	ldr	r3, [r3, #12]
 81029e4:	f003 0304 	and.w	r3, r3, #4
 81029e8:	2b04      	cmp	r3, #4
 81029ea:	d11b      	bne.n	8102a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 81029ec:	687b      	ldr	r3, [r7, #4]
 81029ee:	681b      	ldr	r3, [r3, #0]
 81029f0:	f06f 0204 	mvn.w	r2, #4
 81029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	2202      	movs	r2, #2
 81029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	681b      	ldr	r3, [r3, #0]
 8102a00:	699b      	ldr	r3, [r3, #24]
 8102a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102a06:	2b00      	cmp	r3, #0
 8102a08:	d003      	beq.n	8102a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102a0a:	6878      	ldr	r0, [r7, #4]
 8102a0c:	f000 f8db 	bl	8102bc6 <HAL_TIM_IC_CaptureCallback>
 8102a10:	e005      	b.n	8102a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102a12:	6878      	ldr	r0, [r7, #4]
 8102a14:	f000 f8cd 	bl	8102bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102a18:	6878      	ldr	r0, [r7, #4]
 8102a1a:	f000 f8de 	bl	8102bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	2200      	movs	r2, #0
 8102a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	681b      	ldr	r3, [r3, #0]
 8102a28:	691b      	ldr	r3, [r3, #16]
 8102a2a:	f003 0308 	and.w	r3, r3, #8
 8102a2e:	2b08      	cmp	r3, #8
 8102a30:	d122      	bne.n	8102a78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	68db      	ldr	r3, [r3, #12]
 8102a38:	f003 0308 	and.w	r3, r3, #8
 8102a3c:	2b08      	cmp	r3, #8
 8102a3e:	d11b      	bne.n	8102a78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	f06f 0208 	mvn.w	r2, #8
 8102a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	2204      	movs	r2, #4
 8102a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	69db      	ldr	r3, [r3, #28]
 8102a56:	f003 0303 	and.w	r3, r3, #3
 8102a5a:	2b00      	cmp	r3, #0
 8102a5c:	d003      	beq.n	8102a66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102a5e:	6878      	ldr	r0, [r7, #4]
 8102a60:	f000 f8b1 	bl	8102bc6 <HAL_TIM_IC_CaptureCallback>
 8102a64:	e005      	b.n	8102a72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102a66:	6878      	ldr	r0, [r7, #4]
 8102a68:	f000 f8a3 	bl	8102bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102a6c:	6878      	ldr	r0, [r7, #4]
 8102a6e:	f000 f8b4 	bl	8102bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	2200      	movs	r2, #0
 8102a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	691b      	ldr	r3, [r3, #16]
 8102a7e:	f003 0310 	and.w	r3, r3, #16
 8102a82:	2b10      	cmp	r3, #16
 8102a84:	d122      	bne.n	8102acc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681b      	ldr	r3, [r3, #0]
 8102a8a:	68db      	ldr	r3, [r3, #12]
 8102a8c:	f003 0310 	and.w	r3, r3, #16
 8102a90:	2b10      	cmp	r3, #16
 8102a92:	d11b      	bne.n	8102acc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	f06f 0210 	mvn.w	r2, #16
 8102a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	2208      	movs	r2, #8
 8102aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	69db      	ldr	r3, [r3, #28]
 8102aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102aae:	2b00      	cmp	r3, #0
 8102ab0:	d003      	beq.n	8102aba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102ab2:	6878      	ldr	r0, [r7, #4]
 8102ab4:	f000 f887 	bl	8102bc6 <HAL_TIM_IC_CaptureCallback>
 8102ab8:	e005      	b.n	8102ac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102aba:	6878      	ldr	r0, [r7, #4]
 8102abc:	f000 f879 	bl	8102bb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102ac0:	6878      	ldr	r0, [r7, #4]
 8102ac2:	f000 f88a 	bl	8102bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	2200      	movs	r2, #0
 8102aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	691b      	ldr	r3, [r3, #16]
 8102ad2:	f003 0301 	and.w	r3, r3, #1
 8102ad6:	2b01      	cmp	r3, #1
 8102ad8:	d10e      	bne.n	8102af8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	68db      	ldr	r3, [r3, #12]
 8102ae0:	f003 0301 	and.w	r3, r3, #1
 8102ae4:	2b01      	cmp	r3, #1
 8102ae6:	d107      	bne.n	8102af8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	681b      	ldr	r3, [r3, #0]
 8102aec:	f06f 0201 	mvn.w	r2, #1
 8102af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8102af2:	6878      	ldr	r0, [r7, #4]
 8102af4:	f7fd fd96 	bl	8100624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	681b      	ldr	r3, [r3, #0]
 8102afc:	691b      	ldr	r3, [r3, #16]
 8102afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102b02:	2b80      	cmp	r3, #128	; 0x80
 8102b04:	d10e      	bne.n	8102b24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102b06:	687b      	ldr	r3, [r7, #4]
 8102b08:	681b      	ldr	r3, [r3, #0]
 8102b0a:	68db      	ldr	r3, [r3, #12]
 8102b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102b10:	2b80      	cmp	r3, #128	; 0x80
 8102b12:	d107      	bne.n	8102b24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8102b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8102b1e:	6878      	ldr	r0, [r7, #4]
 8102b20:	f000 f914 	bl	8102d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	691b      	ldr	r3, [r3, #16]
 8102b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102b32:	d10e      	bne.n	8102b52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	681b      	ldr	r3, [r3, #0]
 8102b38:	68db      	ldr	r3, [r3, #12]
 8102b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102b3e:	2b80      	cmp	r3, #128	; 0x80
 8102b40:	d107      	bne.n	8102b52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8102b42:	687b      	ldr	r3, [r7, #4]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8102b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8102b4c:	6878      	ldr	r0, [r7, #4]
 8102b4e:	f000 f907 	bl	8102d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8102b52:	687b      	ldr	r3, [r7, #4]
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	691b      	ldr	r3, [r3, #16]
 8102b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102b5c:	2b40      	cmp	r3, #64	; 0x40
 8102b5e:	d10e      	bne.n	8102b7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8102b60:	687b      	ldr	r3, [r7, #4]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	68db      	ldr	r3, [r3, #12]
 8102b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102b6a:	2b40      	cmp	r3, #64	; 0x40
 8102b6c:	d107      	bne.n	8102b7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8102b6e:	687b      	ldr	r3, [r7, #4]
 8102b70:	681b      	ldr	r3, [r3, #0]
 8102b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8102b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8102b78:	6878      	ldr	r0, [r7, #4]
 8102b7a:	f000 f838 	bl	8102bee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	681b      	ldr	r3, [r3, #0]
 8102b82:	691b      	ldr	r3, [r3, #16]
 8102b84:	f003 0320 	and.w	r3, r3, #32
 8102b88:	2b20      	cmp	r3, #32
 8102b8a:	d10e      	bne.n	8102baa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	68db      	ldr	r3, [r3, #12]
 8102b92:	f003 0320 	and.w	r3, r3, #32
 8102b96:	2b20      	cmp	r3, #32
 8102b98:	d107      	bne.n	8102baa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	f06f 0220 	mvn.w	r2, #32
 8102ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8102ba4:	6878      	ldr	r0, [r7, #4]
 8102ba6:	f000 f8c7 	bl	8102d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8102baa:	bf00      	nop
 8102bac:	3708      	adds	r7, #8
 8102bae:	46bd      	mov	sp, r7
 8102bb0:	bd80      	pop	{r7, pc}

08102bb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102bb2:	b480      	push	{r7}
 8102bb4:	b083      	sub	sp, #12
 8102bb6:	af00      	add	r7, sp, #0
 8102bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8102bba:	bf00      	nop
 8102bbc:	370c      	adds	r7, #12
 8102bbe:	46bd      	mov	sp, r7
 8102bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc4:	4770      	bx	lr

08102bc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102bc6:	b480      	push	{r7}
 8102bc8:	b083      	sub	sp, #12
 8102bca:	af00      	add	r7, sp, #0
 8102bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102bce:	bf00      	nop
 8102bd0:	370c      	adds	r7, #12
 8102bd2:	46bd      	mov	sp, r7
 8102bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bd8:	4770      	bx	lr

08102bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8102bda:	b480      	push	{r7}
 8102bdc:	b083      	sub	sp, #12
 8102bde:	af00      	add	r7, sp, #0
 8102be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8102be2:	bf00      	nop
 8102be4:	370c      	adds	r7, #12
 8102be6:	46bd      	mov	sp, r7
 8102be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bec:	4770      	bx	lr

08102bee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8102bee:	b480      	push	{r7}
 8102bf0:	b083      	sub	sp, #12
 8102bf2:	af00      	add	r7, sp, #0
 8102bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8102bf6:	bf00      	nop
 8102bf8:	370c      	adds	r7, #12
 8102bfa:	46bd      	mov	sp, r7
 8102bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c00:	4770      	bx	lr
	...

08102c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8102c04:	b480      	push	{r7}
 8102c06:	b085      	sub	sp, #20
 8102c08:	af00      	add	r7, sp, #0
 8102c0a:	6078      	str	r0, [r7, #4]
 8102c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	4a40      	ldr	r2, [pc, #256]	; (8102d18 <TIM_Base_SetConfig+0x114>)
 8102c18:	4293      	cmp	r3, r2
 8102c1a:	d013      	beq.n	8102c44 <TIM_Base_SetConfig+0x40>
 8102c1c:	687b      	ldr	r3, [r7, #4]
 8102c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102c22:	d00f      	beq.n	8102c44 <TIM_Base_SetConfig+0x40>
 8102c24:	687b      	ldr	r3, [r7, #4]
 8102c26:	4a3d      	ldr	r2, [pc, #244]	; (8102d1c <TIM_Base_SetConfig+0x118>)
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d00b      	beq.n	8102c44 <TIM_Base_SetConfig+0x40>
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	4a3c      	ldr	r2, [pc, #240]	; (8102d20 <TIM_Base_SetConfig+0x11c>)
 8102c30:	4293      	cmp	r3, r2
 8102c32:	d007      	beq.n	8102c44 <TIM_Base_SetConfig+0x40>
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	4a3b      	ldr	r2, [pc, #236]	; (8102d24 <TIM_Base_SetConfig+0x120>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d003      	beq.n	8102c44 <TIM_Base_SetConfig+0x40>
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	4a3a      	ldr	r2, [pc, #232]	; (8102d28 <TIM_Base_SetConfig+0x124>)
 8102c40:	4293      	cmp	r3, r2
 8102c42:	d108      	bne.n	8102c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8102c44:	68fb      	ldr	r3, [r7, #12]
 8102c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8102c4c:	683b      	ldr	r3, [r7, #0]
 8102c4e:	685b      	ldr	r3, [r3, #4]
 8102c50:	68fa      	ldr	r2, [r7, #12]
 8102c52:	4313      	orrs	r3, r2
 8102c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	4a2f      	ldr	r2, [pc, #188]	; (8102d18 <TIM_Base_SetConfig+0x114>)
 8102c5a:	4293      	cmp	r3, r2
 8102c5c:	d01f      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102c64:	d01b      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	4a2c      	ldr	r2, [pc, #176]	; (8102d1c <TIM_Base_SetConfig+0x118>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d017      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	4a2b      	ldr	r2, [pc, #172]	; (8102d20 <TIM_Base_SetConfig+0x11c>)
 8102c72:	4293      	cmp	r3, r2
 8102c74:	d013      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	4a2a      	ldr	r2, [pc, #168]	; (8102d24 <TIM_Base_SetConfig+0x120>)
 8102c7a:	4293      	cmp	r3, r2
 8102c7c:	d00f      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	4a29      	ldr	r2, [pc, #164]	; (8102d28 <TIM_Base_SetConfig+0x124>)
 8102c82:	4293      	cmp	r3, r2
 8102c84:	d00b      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	4a28      	ldr	r2, [pc, #160]	; (8102d2c <TIM_Base_SetConfig+0x128>)
 8102c8a:	4293      	cmp	r3, r2
 8102c8c:	d007      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c8e:	687b      	ldr	r3, [r7, #4]
 8102c90:	4a27      	ldr	r2, [pc, #156]	; (8102d30 <TIM_Base_SetConfig+0x12c>)
 8102c92:	4293      	cmp	r3, r2
 8102c94:	d003      	beq.n	8102c9e <TIM_Base_SetConfig+0x9a>
 8102c96:	687b      	ldr	r3, [r7, #4]
 8102c98:	4a26      	ldr	r2, [pc, #152]	; (8102d34 <TIM_Base_SetConfig+0x130>)
 8102c9a:	4293      	cmp	r3, r2
 8102c9c:	d108      	bne.n	8102cb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8102ca6:	683b      	ldr	r3, [r7, #0]
 8102ca8:	68db      	ldr	r3, [r3, #12]
 8102caa:	68fa      	ldr	r2, [r7, #12]
 8102cac:	4313      	orrs	r3, r2
 8102cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102cb0:	68fb      	ldr	r3, [r7, #12]
 8102cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8102cb6:	683b      	ldr	r3, [r7, #0]
 8102cb8:	695b      	ldr	r3, [r3, #20]
 8102cba:	4313      	orrs	r3, r2
 8102cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	68fa      	ldr	r2, [r7, #12]
 8102cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102cc4:	683b      	ldr	r3, [r7, #0]
 8102cc6:	689a      	ldr	r2, [r3, #8]
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102ccc:	683b      	ldr	r3, [r7, #0]
 8102cce:	681a      	ldr	r2, [r3, #0]
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8102cd4:	687b      	ldr	r3, [r7, #4]
 8102cd6:	4a10      	ldr	r2, [pc, #64]	; (8102d18 <TIM_Base_SetConfig+0x114>)
 8102cd8:	4293      	cmp	r3, r2
 8102cda:	d00f      	beq.n	8102cfc <TIM_Base_SetConfig+0xf8>
 8102cdc:	687b      	ldr	r3, [r7, #4]
 8102cde:	4a12      	ldr	r2, [pc, #72]	; (8102d28 <TIM_Base_SetConfig+0x124>)
 8102ce0:	4293      	cmp	r3, r2
 8102ce2:	d00b      	beq.n	8102cfc <TIM_Base_SetConfig+0xf8>
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	4a11      	ldr	r2, [pc, #68]	; (8102d2c <TIM_Base_SetConfig+0x128>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d007      	beq.n	8102cfc <TIM_Base_SetConfig+0xf8>
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	4a10      	ldr	r2, [pc, #64]	; (8102d30 <TIM_Base_SetConfig+0x12c>)
 8102cf0:	4293      	cmp	r3, r2
 8102cf2:	d003      	beq.n	8102cfc <TIM_Base_SetConfig+0xf8>
 8102cf4:	687b      	ldr	r3, [r7, #4]
 8102cf6:	4a0f      	ldr	r2, [pc, #60]	; (8102d34 <TIM_Base_SetConfig+0x130>)
 8102cf8:	4293      	cmp	r3, r2
 8102cfa:	d103      	bne.n	8102d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8102cfc:	683b      	ldr	r3, [r7, #0]
 8102cfe:	691a      	ldr	r2, [r3, #16]
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	2201      	movs	r2, #1
 8102d08:	615a      	str	r2, [r3, #20]
}
 8102d0a:	bf00      	nop
 8102d0c:	3714      	adds	r7, #20
 8102d0e:	46bd      	mov	sp, r7
 8102d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d14:	4770      	bx	lr
 8102d16:	bf00      	nop
 8102d18:	40010000 	.word	0x40010000
 8102d1c:	40000400 	.word	0x40000400
 8102d20:	40000800 	.word	0x40000800
 8102d24:	40000c00 	.word	0x40000c00
 8102d28:	40010400 	.word	0x40010400
 8102d2c:	40014000 	.word	0x40014000
 8102d30:	40014400 	.word	0x40014400
 8102d34:	40014800 	.word	0x40014800

08102d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8102d38:	b480      	push	{r7}
 8102d3a:	b083      	sub	sp, #12
 8102d3c:	af00      	add	r7, sp, #0
 8102d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8102d40:	bf00      	nop
 8102d42:	370c      	adds	r7, #12
 8102d44:	46bd      	mov	sp, r7
 8102d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d4a:	4770      	bx	lr

08102d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8102d4c:	b480      	push	{r7}
 8102d4e:	b083      	sub	sp, #12
 8102d50:	af00      	add	r7, sp, #0
 8102d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8102d54:	bf00      	nop
 8102d56:	370c      	adds	r7, #12
 8102d58:	46bd      	mov	sp, r7
 8102d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d5e:	4770      	bx	lr

08102d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8102d60:	b480      	push	{r7}
 8102d62:	b083      	sub	sp, #12
 8102d64:	af00      	add	r7, sp, #0
 8102d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8102d68:	bf00      	nop
 8102d6a:	370c      	adds	r7, #12
 8102d6c:	46bd      	mov	sp, r7
 8102d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d72:	4770      	bx	lr

08102d74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8102d74:	b480      	push	{r7}
 8102d76:	b085      	sub	sp, #20
 8102d78:	af00      	add	r7, sp, #0
 8102d7a:	4603      	mov	r3, r0
 8102d7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8102d7e:	2300      	movs	r3, #0
 8102d80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8102d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d86:	2b84      	cmp	r3, #132	; 0x84
 8102d88:	d005      	beq.n	8102d96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8102d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8102d8e:	68fb      	ldr	r3, [r7, #12]
 8102d90:	4413      	add	r3, r2
 8102d92:	3303      	adds	r3, #3
 8102d94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8102d96:	68fb      	ldr	r3, [r7, #12]
}
 8102d98:	4618      	mov	r0, r3
 8102d9a:	3714      	adds	r7, #20
 8102d9c:	46bd      	mov	sp, r7
 8102d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102da2:	4770      	bx	lr

08102da4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8102da4:	b480      	push	{r7}
 8102da6:	b083      	sub	sp, #12
 8102da8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8102daa:	f3ef 8305 	mrs	r3, IPSR
 8102dae:	607b      	str	r3, [r7, #4]
  return(result);
 8102db0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8102db2:	2b00      	cmp	r3, #0
 8102db4:	bf14      	ite	ne
 8102db6:	2301      	movne	r3, #1
 8102db8:	2300      	moveq	r3, #0
 8102dba:	b2db      	uxtb	r3, r3
}
 8102dbc:	4618      	mov	r0, r3
 8102dbe:	370c      	adds	r7, #12
 8102dc0:	46bd      	mov	sp, r7
 8102dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dc6:	4770      	bx	lr

08102dc8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8102dc8:	b580      	push	{r7, lr}
 8102dca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8102dcc:	f001 fd38 	bl	8104840 <vTaskStartScheduler>
  
  return osOK;
 8102dd0:	2300      	movs	r3, #0
}
 8102dd2:	4618      	mov	r0, r3
 8102dd4:	bd80      	pop	{r7, pc}

08102dd6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8102dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102dd8:	b089      	sub	sp, #36	; 0x24
 8102dda:	af04      	add	r7, sp, #16
 8102ddc:	6078      	str	r0, [r7, #4]
 8102dde:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	695b      	ldr	r3, [r3, #20]
 8102de4:	2b00      	cmp	r3, #0
 8102de6:	d020      	beq.n	8102e2a <osThreadCreate+0x54>
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	699b      	ldr	r3, [r3, #24]
 8102dec:	2b00      	cmp	r3, #0
 8102dee:	d01c      	beq.n	8102e2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	685c      	ldr	r4, [r3, #4]
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	681d      	ldr	r5, [r3, #0]
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	691e      	ldr	r6, [r3, #16]
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8102e02:	4618      	mov	r0, r3
 8102e04:	f7ff ffb6 	bl	8102d74 <makeFreeRtosPriority>
 8102e08:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	695b      	ldr	r3, [r3, #20]
 8102e0e:	687a      	ldr	r2, [r7, #4]
 8102e10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8102e12:	9202      	str	r2, [sp, #8]
 8102e14:	9301      	str	r3, [sp, #4]
 8102e16:	9100      	str	r1, [sp, #0]
 8102e18:	683b      	ldr	r3, [r7, #0]
 8102e1a:	4632      	mov	r2, r6
 8102e1c:	4629      	mov	r1, r5
 8102e1e:	4620      	mov	r0, r4
 8102e20:	f001 fb46 	bl	81044b0 <xTaskCreateStatic>
 8102e24:	4603      	mov	r3, r0
 8102e26:	60fb      	str	r3, [r7, #12]
 8102e28:	e01c      	b.n	8102e64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	685c      	ldr	r4, [r3, #4]
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8102e36:	b29e      	uxth	r6, r3
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8102e3e:	4618      	mov	r0, r3
 8102e40:	f7ff ff98 	bl	8102d74 <makeFreeRtosPriority>
 8102e44:	4602      	mov	r2, r0
 8102e46:	f107 030c 	add.w	r3, r7, #12
 8102e4a:	9301      	str	r3, [sp, #4]
 8102e4c:	9200      	str	r2, [sp, #0]
 8102e4e:	683b      	ldr	r3, [r7, #0]
 8102e50:	4632      	mov	r2, r6
 8102e52:	4629      	mov	r1, r5
 8102e54:	4620      	mov	r0, r4
 8102e56:	f001 fb88 	bl	810456a <xTaskCreate>
 8102e5a:	4603      	mov	r3, r0
 8102e5c:	2b01      	cmp	r3, #1
 8102e5e:	d001      	beq.n	8102e64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8102e60:	2300      	movs	r3, #0
 8102e62:	e000      	b.n	8102e66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8102e64:	68fb      	ldr	r3, [r7, #12]
}
 8102e66:	4618      	mov	r0, r3
 8102e68:	3714      	adds	r7, #20
 8102e6a:	46bd      	mov	sp, r7
 8102e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102e6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8102e6e:	b580      	push	{r7, lr}
 8102e70:	b084      	sub	sp, #16
 8102e72:	af00      	add	r7, sp, #0
 8102e74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	2b00      	cmp	r3, #0
 8102e7e:	d001      	beq.n	8102e84 <osDelay+0x16>
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	e000      	b.n	8102e86 <osDelay+0x18>
 8102e84:	2301      	movs	r3, #1
 8102e86:	4618      	mov	r0, r3
 8102e88:	f001 fca6 	bl	81047d8 <vTaskDelay>
  
  return osOK;
 8102e8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8102e8e:	4618      	mov	r0, r3
 8102e90:	3710      	adds	r7, #16
 8102e92:	46bd      	mov	sp, r7
 8102e94:	bd80      	pop	{r7, pc}

08102e96 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8102e96:	b590      	push	{r4, r7, lr}
 8102e98:	b085      	sub	sp, #20
 8102e9a:	af02      	add	r7, sp, #8
 8102e9c:	6078      	str	r0, [r7, #4]
 8102e9e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	689b      	ldr	r3, [r3, #8]
 8102ea4:	2b00      	cmp	r3, #0
 8102ea6:	d011      	beq.n	8102ecc <osMessageCreate+0x36>
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	68db      	ldr	r3, [r3, #12]
 8102eac:	2b00      	cmp	r3, #0
 8102eae:	d00d      	beq.n	8102ecc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	6818      	ldr	r0, [r3, #0]
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	6859      	ldr	r1, [r3, #4]
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	689a      	ldr	r2, [r3, #8]
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	68db      	ldr	r3, [r3, #12]
 8102ec0:	2400      	movs	r4, #0
 8102ec2:	9400      	str	r4, [sp, #0]
 8102ec4:	f000 fe18 	bl	8103af8 <xQueueGenericCreateStatic>
 8102ec8:	4603      	mov	r3, r0
 8102eca:	e008      	b.n	8102ede <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	6818      	ldr	r0, [r3, #0]
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	685b      	ldr	r3, [r3, #4]
 8102ed4:	2200      	movs	r2, #0
 8102ed6:	4619      	mov	r1, r3
 8102ed8:	f000 fe86 	bl	8103be8 <xQueueGenericCreate>
 8102edc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8102ede:	4618      	mov	r0, r3
 8102ee0:	370c      	adds	r7, #12
 8102ee2:	46bd      	mov	sp, r7
 8102ee4:	bd90      	pop	{r4, r7, pc}
	...

08102ee8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8102ee8:	b580      	push	{r7, lr}
 8102eea:	b086      	sub	sp, #24
 8102eec:	af00      	add	r7, sp, #0
 8102eee:	60f8      	str	r0, [r7, #12]
 8102ef0:	60b9      	str	r1, [r7, #8]
 8102ef2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8102ef4:	2300      	movs	r3, #0
 8102ef6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8102efc:	697b      	ldr	r3, [r7, #20]
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	d101      	bne.n	8102f06 <osMessagePut+0x1e>
    ticks = 1;
 8102f02:	2301      	movs	r3, #1
 8102f04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8102f06:	f7ff ff4d 	bl	8102da4 <inHandlerMode>
 8102f0a:	4603      	mov	r3, r0
 8102f0c:	2b00      	cmp	r3, #0
 8102f0e:	d018      	beq.n	8102f42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8102f10:	f107 0210 	add.w	r2, r7, #16
 8102f14:	f107 0108 	add.w	r1, r7, #8
 8102f18:	2300      	movs	r3, #0
 8102f1a:	68f8      	ldr	r0, [r7, #12]
 8102f1c:	f000 ffbc 	bl	8103e98 <xQueueGenericSendFromISR>
 8102f20:	4603      	mov	r3, r0
 8102f22:	2b01      	cmp	r3, #1
 8102f24:	d001      	beq.n	8102f2a <osMessagePut+0x42>
      return osErrorOS;
 8102f26:	23ff      	movs	r3, #255	; 0xff
 8102f28:	e018      	b.n	8102f5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8102f2a:	693b      	ldr	r3, [r7, #16]
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d014      	beq.n	8102f5a <osMessagePut+0x72>
 8102f30:	4b0c      	ldr	r3, [pc, #48]	; (8102f64 <osMessagePut+0x7c>)
 8102f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102f36:	601a      	str	r2, [r3, #0]
 8102f38:	f3bf 8f4f 	dsb	sy
 8102f3c:	f3bf 8f6f 	isb	sy
 8102f40:	e00b      	b.n	8102f5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8102f42:	f107 0108 	add.w	r1, r7, #8
 8102f46:	2300      	movs	r3, #0
 8102f48:	697a      	ldr	r2, [r7, #20]
 8102f4a:	68f8      	ldr	r0, [r7, #12]
 8102f4c:	f000 fea6 	bl	8103c9c <xQueueGenericSend>
 8102f50:	4603      	mov	r3, r0
 8102f52:	2b01      	cmp	r3, #1
 8102f54:	d001      	beq.n	8102f5a <osMessagePut+0x72>
      return osErrorOS;
 8102f56:	23ff      	movs	r3, #255	; 0xff
 8102f58:	e000      	b.n	8102f5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8102f5a:	2300      	movs	r3, #0
}
 8102f5c:	4618      	mov	r0, r3
 8102f5e:	3718      	adds	r7, #24
 8102f60:	46bd      	mov	sp, r7
 8102f62:	bd80      	pop	{r7, pc}
 8102f64:	e000ed04 	.word	0xe000ed04

08102f68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8102f68:	b590      	push	{r4, r7, lr}
 8102f6a:	b08b      	sub	sp, #44	; 0x2c
 8102f6c:	af00      	add	r7, sp, #0
 8102f6e:	60f8      	str	r0, [r7, #12]
 8102f70:	60b9      	str	r1, [r7, #8]
 8102f72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8102f74:	68bb      	ldr	r3, [r7, #8]
 8102f76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8102f78:	2300      	movs	r3, #0
 8102f7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8102f7c:	68bb      	ldr	r3, [r7, #8]
 8102f7e:	2b00      	cmp	r3, #0
 8102f80:	d10a      	bne.n	8102f98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8102f82:	2380      	movs	r3, #128	; 0x80
 8102f84:	617b      	str	r3, [r7, #20]
    return event;
 8102f86:	68fb      	ldr	r3, [r7, #12]
 8102f88:	461c      	mov	r4, r3
 8102f8a:	f107 0314 	add.w	r3, r7, #20
 8102f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8102f92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8102f96:	e054      	b.n	8103042 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8102f98:	2300      	movs	r3, #0
 8102f9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8102f9c:	2300      	movs	r3, #0
 8102f9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102fa6:	d103      	bne.n	8102fb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8102fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8102fac:	627b      	str	r3, [r7, #36]	; 0x24
 8102fae:	e009      	b.n	8102fc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	2b00      	cmp	r3, #0
 8102fb4:	d006      	beq.n	8102fc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8102fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102fbc:	2b00      	cmp	r3, #0
 8102fbe:	d101      	bne.n	8102fc4 <osMessageGet+0x5c>
      ticks = 1;
 8102fc0:	2301      	movs	r3, #1
 8102fc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8102fc4:	f7ff feee 	bl	8102da4 <inHandlerMode>
 8102fc8:	4603      	mov	r3, r0
 8102fca:	2b00      	cmp	r3, #0
 8102fcc:	d01c      	beq.n	8103008 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8102fce:	f107 0220 	add.w	r2, r7, #32
 8102fd2:	f107 0314 	add.w	r3, r7, #20
 8102fd6:	3304      	adds	r3, #4
 8102fd8:	4619      	mov	r1, r3
 8102fda:	68b8      	ldr	r0, [r7, #8]
 8102fdc:	f001 f8d8 	bl	8104190 <xQueueReceiveFromISR>
 8102fe0:	4603      	mov	r3, r0
 8102fe2:	2b01      	cmp	r3, #1
 8102fe4:	d102      	bne.n	8102fec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8102fe6:	2310      	movs	r3, #16
 8102fe8:	617b      	str	r3, [r7, #20]
 8102fea:	e001      	b.n	8102ff0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8102fec:	2300      	movs	r3, #0
 8102fee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8102ff0:	6a3b      	ldr	r3, [r7, #32]
 8102ff2:	2b00      	cmp	r3, #0
 8102ff4:	d01d      	beq.n	8103032 <osMessageGet+0xca>
 8102ff6:	4b15      	ldr	r3, [pc, #84]	; (810304c <osMessageGet+0xe4>)
 8102ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102ffc:	601a      	str	r2, [r3, #0]
 8102ffe:	f3bf 8f4f 	dsb	sy
 8103002:	f3bf 8f6f 	isb	sy
 8103006:	e014      	b.n	8103032 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8103008:	f107 0314 	add.w	r3, r7, #20
 810300c:	3304      	adds	r3, #4
 810300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103010:	4619      	mov	r1, r3
 8103012:	68b8      	ldr	r0, [r7, #8]
 8103014:	f000 ffdc 	bl	8103fd0 <xQueueReceive>
 8103018:	4603      	mov	r3, r0
 810301a:	2b01      	cmp	r3, #1
 810301c:	d102      	bne.n	8103024 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 810301e:	2310      	movs	r3, #16
 8103020:	617b      	str	r3, [r7, #20]
 8103022:	e006      	b.n	8103032 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8103024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103026:	2b00      	cmp	r3, #0
 8103028:	d101      	bne.n	810302e <osMessageGet+0xc6>
 810302a:	2300      	movs	r3, #0
 810302c:	e000      	b.n	8103030 <osMessageGet+0xc8>
 810302e:	2340      	movs	r3, #64	; 0x40
 8103030:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	461c      	mov	r4, r3
 8103036:	f107 0314 	add.w	r3, r7, #20
 810303a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810303e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8103042:	68f8      	ldr	r0, [r7, #12]
 8103044:	372c      	adds	r7, #44	; 0x2c
 8103046:	46bd      	mov	sp, r7
 8103048:	bd90      	pop	{r4, r7, pc}
 810304a:	bf00      	nop
 810304c:	e000ed04 	.word	0xe000ed04

08103050 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8103050:	b580      	push	{r7, lr}
 8103052:	b08a      	sub	sp, #40	; 0x28
 8103054:	af00      	add	r7, sp, #0
 8103056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8103058:	2300      	movs	r3, #0
 810305a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810305c:	f001 fc50 	bl	8104900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8103060:	4b5b      	ldr	r3, [pc, #364]	; (81031d0 <pvPortMalloc+0x180>)
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	2b00      	cmp	r3, #0
 8103066:	d101      	bne.n	810306c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8103068:	f000 f920 	bl	81032ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810306c:	4b59      	ldr	r3, [pc, #356]	; (81031d4 <pvPortMalloc+0x184>)
 810306e:	681a      	ldr	r2, [r3, #0]
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	4013      	ands	r3, r2
 8103074:	2b00      	cmp	r3, #0
 8103076:	f040 8093 	bne.w	81031a0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	2b00      	cmp	r3, #0
 810307e:	d01d      	beq.n	81030bc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8103080:	2208      	movs	r2, #8
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	4413      	add	r3, r2
 8103086:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	f003 0307 	and.w	r3, r3, #7
 810308e:	2b00      	cmp	r3, #0
 8103090:	d014      	beq.n	81030bc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	f023 0307 	bic.w	r3, r3, #7
 8103098:	3308      	adds	r3, #8
 810309a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	f003 0307 	and.w	r3, r3, #7
 81030a2:	2b00      	cmp	r3, #0
 81030a4:	d00a      	beq.n	81030bc <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 81030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81030aa:	f383 8811 	msr	BASEPRI, r3
 81030ae:	f3bf 8f6f 	isb	sy
 81030b2:	f3bf 8f4f 	dsb	sy
 81030b6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 81030b8:	bf00      	nop
 81030ba:	e7fe      	b.n	81030ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	2b00      	cmp	r3, #0
 81030c0:	d06e      	beq.n	81031a0 <pvPortMalloc+0x150>
 81030c2:	4b45      	ldr	r3, [pc, #276]	; (81031d8 <pvPortMalloc+0x188>)
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	687a      	ldr	r2, [r7, #4]
 81030c8:	429a      	cmp	r2, r3
 81030ca:	d869      	bhi.n	81031a0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81030cc:	4b43      	ldr	r3, [pc, #268]	; (81031dc <pvPortMalloc+0x18c>)
 81030ce:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81030d0:	4b42      	ldr	r3, [pc, #264]	; (81031dc <pvPortMalloc+0x18c>)
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81030d6:	e004      	b.n	81030e2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 81030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81030da:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81030e4:	685b      	ldr	r3, [r3, #4]
 81030e6:	687a      	ldr	r2, [r7, #4]
 81030e8:	429a      	cmp	r2, r3
 81030ea:	d903      	bls.n	81030f4 <pvPortMalloc+0xa4>
 81030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d1f1      	bne.n	81030d8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81030f4:	4b36      	ldr	r3, [pc, #216]	; (81031d0 <pvPortMalloc+0x180>)
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81030fa:	429a      	cmp	r2, r3
 81030fc:	d050      	beq.n	81031a0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81030fe:	6a3b      	ldr	r3, [r7, #32]
 8103100:	681b      	ldr	r3, [r3, #0]
 8103102:	2208      	movs	r2, #8
 8103104:	4413      	add	r3, r2
 8103106:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8103108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810310a:	681a      	ldr	r2, [r3, #0]
 810310c:	6a3b      	ldr	r3, [r7, #32]
 810310e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8103110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103112:	685a      	ldr	r2, [r3, #4]
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	1ad2      	subs	r2, r2, r3
 8103118:	2308      	movs	r3, #8
 810311a:	005b      	lsls	r3, r3, #1
 810311c:	429a      	cmp	r2, r3
 810311e:	d91f      	bls.n	8103160 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8103120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	4413      	add	r3, r2
 8103126:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8103128:	69bb      	ldr	r3, [r7, #24]
 810312a:	f003 0307 	and.w	r3, r3, #7
 810312e:	2b00      	cmp	r3, #0
 8103130:	d00a      	beq.n	8103148 <pvPortMalloc+0xf8>
	__asm volatile
 8103132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103136:	f383 8811 	msr	BASEPRI, r3
 810313a:	f3bf 8f6f 	isb	sy
 810313e:	f3bf 8f4f 	dsb	sy
 8103142:	613b      	str	r3, [r7, #16]
}
 8103144:	bf00      	nop
 8103146:	e7fe      	b.n	8103146 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8103148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810314a:	685a      	ldr	r2, [r3, #4]
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	1ad2      	subs	r2, r2, r3
 8103150:	69bb      	ldr	r3, [r7, #24]
 8103152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8103154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103156:	687a      	ldr	r2, [r7, #4]
 8103158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810315a:	69b8      	ldr	r0, [r7, #24]
 810315c:	f000 f908 	bl	8103370 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8103160:	4b1d      	ldr	r3, [pc, #116]	; (81031d8 <pvPortMalloc+0x188>)
 8103162:	681a      	ldr	r2, [r3, #0]
 8103164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103166:	685b      	ldr	r3, [r3, #4]
 8103168:	1ad3      	subs	r3, r2, r3
 810316a:	4a1b      	ldr	r2, [pc, #108]	; (81031d8 <pvPortMalloc+0x188>)
 810316c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810316e:	4b1a      	ldr	r3, [pc, #104]	; (81031d8 <pvPortMalloc+0x188>)
 8103170:	681a      	ldr	r2, [r3, #0]
 8103172:	4b1b      	ldr	r3, [pc, #108]	; (81031e0 <pvPortMalloc+0x190>)
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	429a      	cmp	r2, r3
 8103178:	d203      	bcs.n	8103182 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810317a:	4b17      	ldr	r3, [pc, #92]	; (81031d8 <pvPortMalloc+0x188>)
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	4a18      	ldr	r2, [pc, #96]	; (81031e0 <pvPortMalloc+0x190>)
 8103180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8103182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103184:	685a      	ldr	r2, [r3, #4]
 8103186:	4b13      	ldr	r3, [pc, #76]	; (81031d4 <pvPortMalloc+0x184>)
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	431a      	orrs	r2, r3
 810318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810318e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8103190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103192:	2200      	movs	r2, #0
 8103194:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8103196:	4b13      	ldr	r3, [pc, #76]	; (81031e4 <pvPortMalloc+0x194>)
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	3301      	adds	r3, #1
 810319c:	4a11      	ldr	r2, [pc, #68]	; (81031e4 <pvPortMalloc+0x194>)
 810319e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81031a0:	f001 fbbc 	bl	810491c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81031a4:	69fb      	ldr	r3, [r7, #28]
 81031a6:	f003 0307 	and.w	r3, r3, #7
 81031aa:	2b00      	cmp	r3, #0
 81031ac:	d00a      	beq.n	81031c4 <pvPortMalloc+0x174>
	__asm volatile
 81031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81031b2:	f383 8811 	msr	BASEPRI, r3
 81031b6:	f3bf 8f6f 	isb	sy
 81031ba:	f3bf 8f4f 	dsb	sy
 81031be:	60fb      	str	r3, [r7, #12]
}
 81031c0:	bf00      	nop
 81031c2:	e7fe      	b.n	81031c2 <pvPortMalloc+0x172>
	return pvReturn;
 81031c4:	69fb      	ldr	r3, [r7, #28]
}
 81031c6:	4618      	mov	r0, r3
 81031c8:	3728      	adds	r7, #40	; 0x28
 81031ca:	46bd      	mov	sp, r7
 81031cc:	bd80      	pop	{r7, pc}
 81031ce:	bf00      	nop
 81031d0:	10003e98 	.word	0x10003e98
 81031d4:	10003eac 	.word	0x10003eac
 81031d8:	10003e9c 	.word	0x10003e9c
 81031dc:	10003e90 	.word	0x10003e90
 81031e0:	10003ea0 	.word	0x10003ea0
 81031e4:	10003ea4 	.word	0x10003ea4

081031e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81031e8:	b580      	push	{r7, lr}
 81031ea:	b086      	sub	sp, #24
 81031ec:	af00      	add	r7, sp, #0
 81031ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	2b00      	cmp	r3, #0
 81031f8:	d04d      	beq.n	8103296 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81031fa:	2308      	movs	r3, #8
 81031fc:	425b      	negs	r3, r3
 81031fe:	697a      	ldr	r2, [r7, #20]
 8103200:	4413      	add	r3, r2
 8103202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8103204:	697b      	ldr	r3, [r7, #20]
 8103206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8103208:	693b      	ldr	r3, [r7, #16]
 810320a:	685a      	ldr	r2, [r3, #4]
 810320c:	4b24      	ldr	r3, [pc, #144]	; (81032a0 <vPortFree+0xb8>)
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	4013      	ands	r3, r2
 8103212:	2b00      	cmp	r3, #0
 8103214:	d10a      	bne.n	810322c <vPortFree+0x44>
	__asm volatile
 8103216:	f04f 0350 	mov.w	r3, #80	; 0x50
 810321a:	f383 8811 	msr	BASEPRI, r3
 810321e:	f3bf 8f6f 	isb	sy
 8103222:	f3bf 8f4f 	dsb	sy
 8103226:	60fb      	str	r3, [r7, #12]
}
 8103228:	bf00      	nop
 810322a:	e7fe      	b.n	810322a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810322c:	693b      	ldr	r3, [r7, #16]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	2b00      	cmp	r3, #0
 8103232:	d00a      	beq.n	810324a <vPortFree+0x62>
	__asm volatile
 8103234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103238:	f383 8811 	msr	BASEPRI, r3
 810323c:	f3bf 8f6f 	isb	sy
 8103240:	f3bf 8f4f 	dsb	sy
 8103244:	60bb      	str	r3, [r7, #8]
}
 8103246:	bf00      	nop
 8103248:	e7fe      	b.n	8103248 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810324a:	693b      	ldr	r3, [r7, #16]
 810324c:	685a      	ldr	r2, [r3, #4]
 810324e:	4b14      	ldr	r3, [pc, #80]	; (81032a0 <vPortFree+0xb8>)
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	4013      	ands	r3, r2
 8103254:	2b00      	cmp	r3, #0
 8103256:	d01e      	beq.n	8103296 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8103258:	693b      	ldr	r3, [r7, #16]
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	2b00      	cmp	r3, #0
 810325e:	d11a      	bne.n	8103296 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8103260:	693b      	ldr	r3, [r7, #16]
 8103262:	685a      	ldr	r2, [r3, #4]
 8103264:	4b0e      	ldr	r3, [pc, #56]	; (81032a0 <vPortFree+0xb8>)
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	43db      	mvns	r3, r3
 810326a:	401a      	ands	r2, r3
 810326c:	693b      	ldr	r3, [r7, #16]
 810326e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8103270:	f001 fb46 	bl	8104900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8103274:	693b      	ldr	r3, [r7, #16]
 8103276:	685a      	ldr	r2, [r3, #4]
 8103278:	4b0a      	ldr	r3, [pc, #40]	; (81032a4 <vPortFree+0xbc>)
 810327a:	681b      	ldr	r3, [r3, #0]
 810327c:	4413      	add	r3, r2
 810327e:	4a09      	ldr	r2, [pc, #36]	; (81032a4 <vPortFree+0xbc>)
 8103280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8103282:	6938      	ldr	r0, [r7, #16]
 8103284:	f000 f874 	bl	8103370 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8103288:	4b07      	ldr	r3, [pc, #28]	; (81032a8 <vPortFree+0xc0>)
 810328a:	681b      	ldr	r3, [r3, #0]
 810328c:	3301      	adds	r3, #1
 810328e:	4a06      	ldr	r2, [pc, #24]	; (81032a8 <vPortFree+0xc0>)
 8103290:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8103292:	f001 fb43 	bl	810491c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8103296:	bf00      	nop
 8103298:	3718      	adds	r7, #24
 810329a:	46bd      	mov	sp, r7
 810329c:	bd80      	pop	{r7, pc}
 810329e:	bf00      	nop
 81032a0:	10003eac 	.word	0x10003eac
 81032a4:	10003e9c 	.word	0x10003e9c
 81032a8:	10003ea8 	.word	0x10003ea8

081032ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81032ac:	b480      	push	{r7}
 81032ae:	b085      	sub	sp, #20
 81032b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81032b2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81032b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81032b8:	4b27      	ldr	r3, [pc, #156]	; (8103358 <prvHeapInit+0xac>)
 81032ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81032bc:	68fb      	ldr	r3, [r7, #12]
 81032be:	f003 0307 	and.w	r3, r3, #7
 81032c2:	2b00      	cmp	r3, #0
 81032c4:	d00c      	beq.n	81032e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81032c6:	68fb      	ldr	r3, [r7, #12]
 81032c8:	3307      	adds	r3, #7
 81032ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81032cc:	68fb      	ldr	r3, [r7, #12]
 81032ce:	f023 0307 	bic.w	r3, r3, #7
 81032d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81032d4:	68ba      	ldr	r2, [r7, #8]
 81032d6:	68fb      	ldr	r3, [r7, #12]
 81032d8:	1ad3      	subs	r3, r2, r3
 81032da:	4a1f      	ldr	r2, [pc, #124]	; (8103358 <prvHeapInit+0xac>)
 81032dc:	4413      	add	r3, r2
 81032de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81032e0:	68fb      	ldr	r3, [r7, #12]
 81032e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81032e4:	4a1d      	ldr	r2, [pc, #116]	; (810335c <prvHeapInit+0xb0>)
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81032ea:	4b1c      	ldr	r3, [pc, #112]	; (810335c <prvHeapInit+0xb0>)
 81032ec:	2200      	movs	r2, #0
 81032ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	68ba      	ldr	r2, [r7, #8]
 81032f4:	4413      	add	r3, r2
 81032f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81032f8:	2208      	movs	r2, #8
 81032fa:	68fb      	ldr	r3, [r7, #12]
 81032fc:	1a9b      	subs	r3, r3, r2
 81032fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8103300:	68fb      	ldr	r3, [r7, #12]
 8103302:	f023 0307 	bic.w	r3, r3, #7
 8103306:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8103308:	68fb      	ldr	r3, [r7, #12]
 810330a:	4a15      	ldr	r2, [pc, #84]	; (8103360 <prvHeapInit+0xb4>)
 810330c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810330e:	4b14      	ldr	r3, [pc, #80]	; (8103360 <prvHeapInit+0xb4>)
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	2200      	movs	r2, #0
 8103314:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8103316:	4b12      	ldr	r3, [pc, #72]	; (8103360 <prvHeapInit+0xb4>)
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	2200      	movs	r2, #0
 810331c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8103322:	683b      	ldr	r3, [r7, #0]
 8103324:	68fa      	ldr	r2, [r7, #12]
 8103326:	1ad2      	subs	r2, r2, r3
 8103328:	683b      	ldr	r3, [r7, #0]
 810332a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810332c:	4b0c      	ldr	r3, [pc, #48]	; (8103360 <prvHeapInit+0xb4>)
 810332e:	681a      	ldr	r2, [r3, #0]
 8103330:	683b      	ldr	r3, [r7, #0]
 8103332:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8103334:	683b      	ldr	r3, [r7, #0]
 8103336:	685b      	ldr	r3, [r3, #4]
 8103338:	4a0a      	ldr	r2, [pc, #40]	; (8103364 <prvHeapInit+0xb8>)
 810333a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810333c:	683b      	ldr	r3, [r7, #0]
 810333e:	685b      	ldr	r3, [r3, #4]
 8103340:	4a09      	ldr	r2, [pc, #36]	; (8103368 <prvHeapInit+0xbc>)
 8103342:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8103344:	4b09      	ldr	r3, [pc, #36]	; (810336c <prvHeapInit+0xc0>)
 8103346:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810334a:	601a      	str	r2, [r3, #0]
}
 810334c:	bf00      	nop
 810334e:	3714      	adds	r7, #20
 8103350:	46bd      	mov	sp, r7
 8103352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103356:	4770      	bx	lr
 8103358:	10000290 	.word	0x10000290
 810335c:	10003e90 	.word	0x10003e90
 8103360:	10003e98 	.word	0x10003e98
 8103364:	10003ea0 	.word	0x10003ea0
 8103368:	10003e9c 	.word	0x10003e9c
 810336c:	10003eac 	.word	0x10003eac

08103370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8103370:	b480      	push	{r7}
 8103372:	b085      	sub	sp, #20
 8103374:	af00      	add	r7, sp, #0
 8103376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8103378:	4b28      	ldr	r3, [pc, #160]	; (810341c <prvInsertBlockIntoFreeList+0xac>)
 810337a:	60fb      	str	r3, [r7, #12]
 810337c:	e002      	b.n	8103384 <prvInsertBlockIntoFreeList+0x14>
 810337e:	68fb      	ldr	r3, [r7, #12]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	60fb      	str	r3, [r7, #12]
 8103384:	68fb      	ldr	r3, [r7, #12]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	687a      	ldr	r2, [r7, #4]
 810338a:	429a      	cmp	r2, r3
 810338c:	d8f7      	bhi.n	810337e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810338e:	68fb      	ldr	r3, [r7, #12]
 8103390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8103392:	68fb      	ldr	r3, [r7, #12]
 8103394:	685b      	ldr	r3, [r3, #4]
 8103396:	68ba      	ldr	r2, [r7, #8]
 8103398:	4413      	add	r3, r2
 810339a:	687a      	ldr	r2, [r7, #4]
 810339c:	429a      	cmp	r2, r3
 810339e:	d108      	bne.n	81033b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81033a0:	68fb      	ldr	r3, [r7, #12]
 81033a2:	685a      	ldr	r2, [r3, #4]
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	685b      	ldr	r3, [r3, #4]
 81033a8:	441a      	add	r2, r3
 81033aa:	68fb      	ldr	r3, [r7, #12]
 81033ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81033ae:	68fb      	ldr	r3, [r7, #12]
 81033b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	685b      	ldr	r3, [r3, #4]
 81033ba:	68ba      	ldr	r2, [r7, #8]
 81033bc:	441a      	add	r2, r3
 81033be:	68fb      	ldr	r3, [r7, #12]
 81033c0:	681b      	ldr	r3, [r3, #0]
 81033c2:	429a      	cmp	r2, r3
 81033c4:	d118      	bne.n	81033f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81033c6:	68fb      	ldr	r3, [r7, #12]
 81033c8:	681a      	ldr	r2, [r3, #0]
 81033ca:	4b15      	ldr	r3, [pc, #84]	; (8103420 <prvInsertBlockIntoFreeList+0xb0>)
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	429a      	cmp	r2, r3
 81033d0:	d00d      	beq.n	81033ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	685a      	ldr	r2, [r3, #4]
 81033d6:	68fb      	ldr	r3, [r7, #12]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	685b      	ldr	r3, [r3, #4]
 81033dc:	441a      	add	r2, r3
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81033e2:	68fb      	ldr	r3, [r7, #12]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	681a      	ldr	r2, [r3, #0]
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	601a      	str	r2, [r3, #0]
 81033ec:	e008      	b.n	8103400 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81033ee:	4b0c      	ldr	r3, [pc, #48]	; (8103420 <prvInsertBlockIntoFreeList+0xb0>)
 81033f0:	681a      	ldr	r2, [r3, #0]
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	601a      	str	r2, [r3, #0]
 81033f6:	e003      	b.n	8103400 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81033f8:	68fb      	ldr	r3, [r7, #12]
 81033fa:	681a      	ldr	r2, [r3, #0]
 81033fc:	687b      	ldr	r3, [r7, #4]
 81033fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8103400:	68fa      	ldr	r2, [r7, #12]
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	429a      	cmp	r2, r3
 8103406:	d002      	beq.n	810340e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8103408:	68fb      	ldr	r3, [r7, #12]
 810340a:	687a      	ldr	r2, [r7, #4]
 810340c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810340e:	bf00      	nop
 8103410:	3714      	adds	r7, #20
 8103412:	46bd      	mov	sp, r7
 8103414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103418:	4770      	bx	lr
 810341a:	bf00      	nop
 810341c:	10003e90 	.word	0x10003e90
 8103420:	10003e98 	.word	0x10003e98

08103424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8103424:	b480      	push	{r7}
 8103426:	b083      	sub	sp, #12
 8103428:	af00      	add	r7, sp, #0
 810342a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	f103 0208 	add.w	r2, r3, #8
 8103432:	687b      	ldr	r3, [r7, #4]
 8103434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810343c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	f103 0208 	add.w	r2, r3, #8
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	f103 0208 	add.w	r2, r3, #8
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	2200      	movs	r2, #0
 8103456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8103458:	bf00      	nop
 810345a:	370c      	adds	r7, #12
 810345c:	46bd      	mov	sp, r7
 810345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103462:	4770      	bx	lr

08103464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8103464:	b480      	push	{r7}
 8103466:	b083      	sub	sp, #12
 8103468:	af00      	add	r7, sp, #0
 810346a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	2200      	movs	r2, #0
 8103470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8103472:	bf00      	nop
 8103474:	370c      	adds	r7, #12
 8103476:	46bd      	mov	sp, r7
 8103478:	f85d 7b04 	ldr.w	r7, [sp], #4
 810347c:	4770      	bx	lr

0810347e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810347e:	b480      	push	{r7}
 8103480:	b085      	sub	sp, #20
 8103482:	af00      	add	r7, sp, #0
 8103484:	6078      	str	r0, [r7, #4]
 8103486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	685b      	ldr	r3, [r3, #4]
 810348c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810348e:	683b      	ldr	r3, [r7, #0]
 8103490:	68fa      	ldr	r2, [r7, #12]
 8103492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8103494:	68fb      	ldr	r3, [r7, #12]
 8103496:	689a      	ldr	r2, [r3, #8]
 8103498:	683b      	ldr	r3, [r7, #0]
 810349a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810349c:	68fb      	ldr	r3, [r7, #12]
 810349e:	689b      	ldr	r3, [r3, #8]
 81034a0:	683a      	ldr	r2, [r7, #0]
 81034a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 81034a4:	68fb      	ldr	r3, [r7, #12]
 81034a6:	683a      	ldr	r2, [r7, #0]
 81034a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 81034aa:	683b      	ldr	r3, [r7, #0]
 81034ac:	687a      	ldr	r2, [r7, #4]
 81034ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	681b      	ldr	r3, [r3, #0]
 81034b4:	1c5a      	adds	r2, r3, #1
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	601a      	str	r2, [r3, #0]
}
 81034ba:	bf00      	nop
 81034bc:	3714      	adds	r7, #20
 81034be:	46bd      	mov	sp, r7
 81034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034c4:	4770      	bx	lr

081034c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 81034c6:	b480      	push	{r7}
 81034c8:	b085      	sub	sp, #20
 81034ca:	af00      	add	r7, sp, #0
 81034cc:	6078      	str	r0, [r7, #4]
 81034ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 81034d0:	683b      	ldr	r3, [r7, #0]
 81034d2:	681b      	ldr	r3, [r3, #0]
 81034d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81034d6:	68bb      	ldr	r3, [r7, #8]
 81034d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81034dc:	d103      	bne.n	81034e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	691b      	ldr	r3, [r3, #16]
 81034e2:	60fb      	str	r3, [r7, #12]
 81034e4:	e00c      	b.n	8103500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	3308      	adds	r3, #8
 81034ea:	60fb      	str	r3, [r7, #12]
 81034ec:	e002      	b.n	81034f4 <vListInsert+0x2e>
 81034ee:	68fb      	ldr	r3, [r7, #12]
 81034f0:	685b      	ldr	r3, [r3, #4]
 81034f2:	60fb      	str	r3, [r7, #12]
 81034f4:	68fb      	ldr	r3, [r7, #12]
 81034f6:	685b      	ldr	r3, [r3, #4]
 81034f8:	681b      	ldr	r3, [r3, #0]
 81034fa:	68ba      	ldr	r2, [r7, #8]
 81034fc:	429a      	cmp	r2, r3
 81034fe:	d2f6      	bcs.n	81034ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8103500:	68fb      	ldr	r3, [r7, #12]
 8103502:	685a      	ldr	r2, [r3, #4]
 8103504:	683b      	ldr	r3, [r7, #0]
 8103506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8103508:	683b      	ldr	r3, [r7, #0]
 810350a:	685b      	ldr	r3, [r3, #4]
 810350c:	683a      	ldr	r2, [r7, #0]
 810350e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8103510:	683b      	ldr	r3, [r7, #0]
 8103512:	68fa      	ldr	r2, [r7, #12]
 8103514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8103516:	68fb      	ldr	r3, [r7, #12]
 8103518:	683a      	ldr	r2, [r7, #0]
 810351a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810351c:	683b      	ldr	r3, [r7, #0]
 810351e:	687a      	ldr	r2, [r7, #4]
 8103520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	1c5a      	adds	r2, r3, #1
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	601a      	str	r2, [r3, #0]
}
 810352c:	bf00      	nop
 810352e:	3714      	adds	r7, #20
 8103530:	46bd      	mov	sp, r7
 8103532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103536:	4770      	bx	lr

08103538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8103538:	b480      	push	{r7}
 810353a:	b085      	sub	sp, #20
 810353c:	af00      	add	r7, sp, #0
 810353e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	691b      	ldr	r3, [r3, #16]
 8103544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	685b      	ldr	r3, [r3, #4]
 810354a:	687a      	ldr	r2, [r7, #4]
 810354c:	6892      	ldr	r2, [r2, #8]
 810354e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	689b      	ldr	r3, [r3, #8]
 8103554:	687a      	ldr	r2, [r7, #4]
 8103556:	6852      	ldr	r2, [r2, #4]
 8103558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810355a:	68fb      	ldr	r3, [r7, #12]
 810355c:	685b      	ldr	r3, [r3, #4]
 810355e:	687a      	ldr	r2, [r7, #4]
 8103560:	429a      	cmp	r2, r3
 8103562:	d103      	bne.n	810356c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	689a      	ldr	r2, [r3, #8]
 8103568:	68fb      	ldr	r3, [r7, #12]
 810356a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	2200      	movs	r2, #0
 8103570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8103572:	68fb      	ldr	r3, [r7, #12]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	1e5a      	subs	r2, r3, #1
 8103578:	68fb      	ldr	r3, [r7, #12]
 810357a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810357c:	68fb      	ldr	r3, [r7, #12]
 810357e:	681b      	ldr	r3, [r3, #0]
}
 8103580:	4618      	mov	r0, r3
 8103582:	3714      	adds	r7, #20
 8103584:	46bd      	mov	sp, r7
 8103586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810358a:	4770      	bx	lr

0810358c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810358c:	b480      	push	{r7}
 810358e:	b085      	sub	sp, #20
 8103590:	af00      	add	r7, sp, #0
 8103592:	60f8      	str	r0, [r7, #12]
 8103594:	60b9      	str	r1, [r7, #8]
 8103596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8103598:	68fb      	ldr	r3, [r7, #12]
 810359a:	3b04      	subs	r3, #4
 810359c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810359e:	68fb      	ldr	r3, [r7, #12]
 81035a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81035a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81035a6:	68fb      	ldr	r3, [r7, #12]
 81035a8:	3b04      	subs	r3, #4
 81035aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 81035ac:	68bb      	ldr	r3, [r7, #8]
 81035ae:	f023 0201 	bic.w	r2, r3, #1
 81035b2:	68fb      	ldr	r3, [r7, #12]
 81035b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 81035b6:	68fb      	ldr	r3, [r7, #12]
 81035b8:	3b04      	subs	r3, #4
 81035ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 81035bc:	4a0c      	ldr	r2, [pc, #48]	; (81035f0 <pxPortInitialiseStack+0x64>)
 81035be:	68fb      	ldr	r3, [r7, #12]
 81035c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 81035c2:	68fb      	ldr	r3, [r7, #12]
 81035c4:	3b14      	subs	r3, #20
 81035c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 81035c8:	687a      	ldr	r2, [r7, #4]
 81035ca:	68fb      	ldr	r3, [r7, #12]
 81035cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 81035ce:	68fb      	ldr	r3, [r7, #12]
 81035d0:	3b04      	subs	r3, #4
 81035d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81035d4:	68fb      	ldr	r3, [r7, #12]
 81035d6:	f06f 0202 	mvn.w	r2, #2
 81035da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81035dc:	68fb      	ldr	r3, [r7, #12]
 81035de:	3b20      	subs	r3, #32
 81035e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81035e2:	68fb      	ldr	r3, [r7, #12]
}
 81035e4:	4618      	mov	r0, r3
 81035e6:	3714      	adds	r7, #20
 81035e8:	46bd      	mov	sp, r7
 81035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035ee:	4770      	bx	lr
 81035f0:	081035f5 	.word	0x081035f5

081035f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81035f4:	b480      	push	{r7}
 81035f6:	b085      	sub	sp, #20
 81035f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81035fa:	2300      	movs	r3, #0
 81035fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81035fe:	4b12      	ldr	r3, [pc, #72]	; (8103648 <prvTaskExitError+0x54>)
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103606:	d00a      	beq.n	810361e <prvTaskExitError+0x2a>
	__asm volatile
 8103608:	f04f 0350 	mov.w	r3, #80	; 0x50
 810360c:	f383 8811 	msr	BASEPRI, r3
 8103610:	f3bf 8f6f 	isb	sy
 8103614:	f3bf 8f4f 	dsb	sy
 8103618:	60fb      	str	r3, [r7, #12]
}
 810361a:	bf00      	nop
 810361c:	e7fe      	b.n	810361c <prvTaskExitError+0x28>
	__asm volatile
 810361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103622:	f383 8811 	msr	BASEPRI, r3
 8103626:	f3bf 8f6f 	isb	sy
 810362a:	f3bf 8f4f 	dsb	sy
 810362e:	60bb      	str	r3, [r7, #8]
}
 8103630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8103632:	bf00      	nop
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	2b00      	cmp	r3, #0
 8103638:	d0fc      	beq.n	8103634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810363a:	bf00      	nop
 810363c:	bf00      	nop
 810363e:	3714      	adds	r7, #20
 8103640:	46bd      	mov	sp, r7
 8103642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103646:	4770      	bx	lr
 8103648:	10000018 	.word	0x10000018
 810364c:	00000000 	.word	0x00000000

08103650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8103650:	4b07      	ldr	r3, [pc, #28]	; (8103670 <pxCurrentTCBConst2>)
 8103652:	6819      	ldr	r1, [r3, #0]
 8103654:	6808      	ldr	r0, [r1, #0]
 8103656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810365a:	f380 8809 	msr	PSP, r0
 810365e:	f3bf 8f6f 	isb	sy
 8103662:	f04f 0000 	mov.w	r0, #0
 8103666:	f380 8811 	msr	BASEPRI, r0
 810366a:	4770      	bx	lr
 810366c:	f3af 8000 	nop.w

08103670 <pxCurrentTCBConst2>:
 8103670:	10003eb8 	.word	0x10003eb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8103674:	bf00      	nop
 8103676:	bf00      	nop

08103678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8103678:	4808      	ldr	r0, [pc, #32]	; (810369c <prvPortStartFirstTask+0x24>)
 810367a:	6800      	ldr	r0, [r0, #0]
 810367c:	6800      	ldr	r0, [r0, #0]
 810367e:	f380 8808 	msr	MSP, r0
 8103682:	f04f 0000 	mov.w	r0, #0
 8103686:	f380 8814 	msr	CONTROL, r0
 810368a:	b662      	cpsie	i
 810368c:	b661      	cpsie	f
 810368e:	f3bf 8f4f 	dsb	sy
 8103692:	f3bf 8f6f 	isb	sy
 8103696:	df00      	svc	0
 8103698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810369a:	bf00      	nop
 810369c:	e000ed08 	.word	0xe000ed08

081036a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 81036a0:	b580      	push	{r7, lr}
 81036a2:	b086      	sub	sp, #24
 81036a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 81036a6:	4b46      	ldr	r3, [pc, #280]	; (81037c0 <xPortStartScheduler+0x120>)
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	4a46      	ldr	r2, [pc, #280]	; (81037c4 <xPortStartScheduler+0x124>)
 81036ac:	4293      	cmp	r3, r2
 81036ae:	d10a      	bne.n	81036c6 <xPortStartScheduler+0x26>
	__asm volatile
 81036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81036b4:	f383 8811 	msr	BASEPRI, r3
 81036b8:	f3bf 8f6f 	isb	sy
 81036bc:	f3bf 8f4f 	dsb	sy
 81036c0:	613b      	str	r3, [r7, #16]
}
 81036c2:	bf00      	nop
 81036c4:	e7fe      	b.n	81036c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 81036c6:	4b3e      	ldr	r3, [pc, #248]	; (81037c0 <xPortStartScheduler+0x120>)
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	4a3f      	ldr	r2, [pc, #252]	; (81037c8 <xPortStartScheduler+0x128>)
 81036cc:	4293      	cmp	r3, r2
 81036ce:	d10a      	bne.n	81036e6 <xPortStartScheduler+0x46>
	__asm volatile
 81036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81036d4:	f383 8811 	msr	BASEPRI, r3
 81036d8:	f3bf 8f6f 	isb	sy
 81036dc:	f3bf 8f4f 	dsb	sy
 81036e0:	60fb      	str	r3, [r7, #12]
}
 81036e2:	bf00      	nop
 81036e4:	e7fe      	b.n	81036e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81036e6:	4b39      	ldr	r3, [pc, #228]	; (81037cc <xPortStartScheduler+0x12c>)
 81036e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81036ea:	697b      	ldr	r3, [r7, #20]
 81036ec:	781b      	ldrb	r3, [r3, #0]
 81036ee:	b2db      	uxtb	r3, r3
 81036f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81036f2:	697b      	ldr	r3, [r7, #20]
 81036f4:	22ff      	movs	r2, #255	; 0xff
 81036f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81036f8:	697b      	ldr	r3, [r7, #20]
 81036fa:	781b      	ldrb	r3, [r3, #0]
 81036fc:	b2db      	uxtb	r3, r3
 81036fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8103700:	78fb      	ldrb	r3, [r7, #3]
 8103702:	b2db      	uxtb	r3, r3
 8103704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8103708:	b2da      	uxtb	r2, r3
 810370a:	4b31      	ldr	r3, [pc, #196]	; (81037d0 <xPortStartScheduler+0x130>)
 810370c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810370e:	4b31      	ldr	r3, [pc, #196]	; (81037d4 <xPortStartScheduler+0x134>)
 8103710:	2207      	movs	r2, #7
 8103712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8103714:	e009      	b.n	810372a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8103716:	4b2f      	ldr	r3, [pc, #188]	; (81037d4 <xPortStartScheduler+0x134>)
 8103718:	681b      	ldr	r3, [r3, #0]
 810371a:	3b01      	subs	r3, #1
 810371c:	4a2d      	ldr	r2, [pc, #180]	; (81037d4 <xPortStartScheduler+0x134>)
 810371e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8103720:	78fb      	ldrb	r3, [r7, #3]
 8103722:	b2db      	uxtb	r3, r3
 8103724:	005b      	lsls	r3, r3, #1
 8103726:	b2db      	uxtb	r3, r3
 8103728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810372a:	78fb      	ldrb	r3, [r7, #3]
 810372c:	b2db      	uxtb	r3, r3
 810372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103732:	2b80      	cmp	r3, #128	; 0x80
 8103734:	d0ef      	beq.n	8103716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8103736:	4b27      	ldr	r3, [pc, #156]	; (81037d4 <xPortStartScheduler+0x134>)
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	f1c3 0307 	rsb	r3, r3, #7
 810373e:	2b04      	cmp	r3, #4
 8103740:	d00a      	beq.n	8103758 <xPortStartScheduler+0xb8>
	__asm volatile
 8103742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103746:	f383 8811 	msr	BASEPRI, r3
 810374a:	f3bf 8f6f 	isb	sy
 810374e:	f3bf 8f4f 	dsb	sy
 8103752:	60bb      	str	r3, [r7, #8]
}
 8103754:	bf00      	nop
 8103756:	e7fe      	b.n	8103756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8103758:	4b1e      	ldr	r3, [pc, #120]	; (81037d4 <xPortStartScheduler+0x134>)
 810375a:	681b      	ldr	r3, [r3, #0]
 810375c:	021b      	lsls	r3, r3, #8
 810375e:	4a1d      	ldr	r2, [pc, #116]	; (81037d4 <xPortStartScheduler+0x134>)
 8103760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8103762:	4b1c      	ldr	r3, [pc, #112]	; (81037d4 <xPortStartScheduler+0x134>)
 8103764:	681b      	ldr	r3, [r3, #0]
 8103766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 810376a:	4a1a      	ldr	r2, [pc, #104]	; (81037d4 <xPortStartScheduler+0x134>)
 810376c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	b2da      	uxtb	r2, r3
 8103772:	697b      	ldr	r3, [r7, #20]
 8103774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8103776:	4b18      	ldr	r3, [pc, #96]	; (81037d8 <xPortStartScheduler+0x138>)
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	4a17      	ldr	r2, [pc, #92]	; (81037d8 <xPortStartScheduler+0x138>)
 810377c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8103780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8103782:	4b15      	ldr	r3, [pc, #84]	; (81037d8 <xPortStartScheduler+0x138>)
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	4a14      	ldr	r2, [pc, #80]	; (81037d8 <xPortStartScheduler+0x138>)
 8103788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 810378c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810378e:	f000 f8dd 	bl	810394c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8103792:	4b12      	ldr	r3, [pc, #72]	; (81037dc <xPortStartScheduler+0x13c>)
 8103794:	2200      	movs	r2, #0
 8103796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8103798:	f000 f8fc 	bl	8103994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810379c:	4b10      	ldr	r3, [pc, #64]	; (81037e0 <xPortStartScheduler+0x140>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a0f      	ldr	r2, [pc, #60]	; (81037e0 <xPortStartScheduler+0x140>)
 81037a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81037a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81037a8:	f7ff ff66 	bl	8103678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81037ac:	f001 fa0a 	bl	8104bc4 <vTaskSwitchContext>
	prvTaskExitError();
 81037b0:	f7ff ff20 	bl	81035f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81037b4:	2300      	movs	r3, #0
}
 81037b6:	4618      	mov	r0, r3
 81037b8:	3718      	adds	r7, #24
 81037ba:	46bd      	mov	sp, r7
 81037bc:	bd80      	pop	{r7, pc}
 81037be:	bf00      	nop
 81037c0:	e000ed00 	.word	0xe000ed00
 81037c4:	410fc271 	.word	0x410fc271
 81037c8:	410fc270 	.word	0x410fc270
 81037cc:	e000e400 	.word	0xe000e400
 81037d0:	10003eb0 	.word	0x10003eb0
 81037d4:	10003eb4 	.word	0x10003eb4
 81037d8:	e000ed20 	.word	0xe000ed20
 81037dc:	10000018 	.word	0x10000018
 81037e0:	e000ef34 	.word	0xe000ef34

081037e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 81037e4:	b480      	push	{r7}
 81037e6:	b083      	sub	sp, #12
 81037e8:	af00      	add	r7, sp, #0
	__asm volatile
 81037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 81037ee:	f383 8811 	msr	BASEPRI, r3
 81037f2:	f3bf 8f6f 	isb	sy
 81037f6:	f3bf 8f4f 	dsb	sy
 81037fa:	607b      	str	r3, [r7, #4]
}
 81037fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81037fe:	4b0f      	ldr	r3, [pc, #60]	; (810383c <vPortEnterCritical+0x58>)
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	3301      	adds	r3, #1
 8103804:	4a0d      	ldr	r2, [pc, #52]	; (810383c <vPortEnterCritical+0x58>)
 8103806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8103808:	4b0c      	ldr	r3, [pc, #48]	; (810383c <vPortEnterCritical+0x58>)
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	2b01      	cmp	r3, #1
 810380e:	d10f      	bne.n	8103830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8103810:	4b0b      	ldr	r3, [pc, #44]	; (8103840 <vPortEnterCritical+0x5c>)
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	b2db      	uxtb	r3, r3
 8103816:	2b00      	cmp	r3, #0
 8103818:	d00a      	beq.n	8103830 <vPortEnterCritical+0x4c>
	__asm volatile
 810381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810381e:	f383 8811 	msr	BASEPRI, r3
 8103822:	f3bf 8f6f 	isb	sy
 8103826:	f3bf 8f4f 	dsb	sy
 810382a:	603b      	str	r3, [r7, #0]
}
 810382c:	bf00      	nop
 810382e:	e7fe      	b.n	810382e <vPortEnterCritical+0x4a>
	}
}
 8103830:	bf00      	nop
 8103832:	370c      	adds	r7, #12
 8103834:	46bd      	mov	sp, r7
 8103836:	f85d 7b04 	ldr.w	r7, [sp], #4
 810383a:	4770      	bx	lr
 810383c:	10000018 	.word	0x10000018
 8103840:	e000ed04 	.word	0xe000ed04

08103844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8103844:	b480      	push	{r7}
 8103846:	b083      	sub	sp, #12
 8103848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810384a:	4b12      	ldr	r3, [pc, #72]	; (8103894 <vPortExitCritical+0x50>)
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	2b00      	cmp	r3, #0
 8103850:	d10a      	bne.n	8103868 <vPortExitCritical+0x24>
	__asm volatile
 8103852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103856:	f383 8811 	msr	BASEPRI, r3
 810385a:	f3bf 8f6f 	isb	sy
 810385e:	f3bf 8f4f 	dsb	sy
 8103862:	607b      	str	r3, [r7, #4]
}
 8103864:	bf00      	nop
 8103866:	e7fe      	b.n	8103866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8103868:	4b0a      	ldr	r3, [pc, #40]	; (8103894 <vPortExitCritical+0x50>)
 810386a:	681b      	ldr	r3, [r3, #0]
 810386c:	3b01      	subs	r3, #1
 810386e:	4a09      	ldr	r2, [pc, #36]	; (8103894 <vPortExitCritical+0x50>)
 8103870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8103872:	4b08      	ldr	r3, [pc, #32]	; (8103894 <vPortExitCritical+0x50>)
 8103874:	681b      	ldr	r3, [r3, #0]
 8103876:	2b00      	cmp	r3, #0
 8103878:	d105      	bne.n	8103886 <vPortExitCritical+0x42>
 810387a:	2300      	movs	r3, #0
 810387c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810387e:	683b      	ldr	r3, [r7, #0]
 8103880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8103884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8103886:	bf00      	nop
 8103888:	370c      	adds	r7, #12
 810388a:	46bd      	mov	sp, r7
 810388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103890:	4770      	bx	lr
 8103892:	bf00      	nop
 8103894:	10000018 	.word	0x10000018
	...

081038a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81038a0:	f3ef 8009 	mrs	r0, PSP
 81038a4:	f3bf 8f6f 	isb	sy
 81038a8:	4b15      	ldr	r3, [pc, #84]	; (8103900 <pxCurrentTCBConst>)
 81038aa:	681a      	ldr	r2, [r3, #0]
 81038ac:	f01e 0f10 	tst.w	lr, #16
 81038b0:	bf08      	it	eq
 81038b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81038b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81038ba:	6010      	str	r0, [r2, #0]
 81038bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81038c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81038c4:	f380 8811 	msr	BASEPRI, r0
 81038c8:	f3bf 8f4f 	dsb	sy
 81038cc:	f3bf 8f6f 	isb	sy
 81038d0:	f001 f978 	bl	8104bc4 <vTaskSwitchContext>
 81038d4:	f04f 0000 	mov.w	r0, #0
 81038d8:	f380 8811 	msr	BASEPRI, r0
 81038dc:	bc09      	pop	{r0, r3}
 81038de:	6819      	ldr	r1, [r3, #0]
 81038e0:	6808      	ldr	r0, [r1, #0]
 81038e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81038e6:	f01e 0f10 	tst.w	lr, #16
 81038ea:	bf08      	it	eq
 81038ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81038f0:	f380 8809 	msr	PSP, r0
 81038f4:	f3bf 8f6f 	isb	sy
 81038f8:	4770      	bx	lr
 81038fa:	bf00      	nop
 81038fc:	f3af 8000 	nop.w

08103900 <pxCurrentTCBConst>:
 8103900:	10003eb8 	.word	0x10003eb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8103904:	bf00      	nop
 8103906:	bf00      	nop

08103908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8103908:	b580      	push	{r7, lr}
 810390a:	b082      	sub	sp, #8
 810390c:	af00      	add	r7, sp, #0
	__asm volatile
 810390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103912:	f383 8811 	msr	BASEPRI, r3
 8103916:	f3bf 8f6f 	isb	sy
 810391a:	f3bf 8f4f 	dsb	sy
 810391e:	607b      	str	r3, [r7, #4]
}
 8103920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8103922:	f001 f897 	bl	8104a54 <xTaskIncrementTick>
 8103926:	4603      	mov	r3, r0
 8103928:	2b00      	cmp	r3, #0
 810392a:	d003      	beq.n	8103934 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810392c:	4b06      	ldr	r3, [pc, #24]	; (8103948 <SysTick_Handler+0x40>)
 810392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103932:	601a      	str	r2, [r3, #0]
 8103934:	2300      	movs	r3, #0
 8103936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8103938:	683b      	ldr	r3, [r7, #0]
 810393a:	f383 8811 	msr	BASEPRI, r3
}
 810393e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8103940:	bf00      	nop
 8103942:	3708      	adds	r7, #8
 8103944:	46bd      	mov	sp, r7
 8103946:	bd80      	pop	{r7, pc}
 8103948:	e000ed04 	.word	0xe000ed04

0810394c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810394c:	b480      	push	{r7}
 810394e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8103950:	4b0b      	ldr	r3, [pc, #44]	; (8103980 <vPortSetupTimerInterrupt+0x34>)
 8103952:	2200      	movs	r2, #0
 8103954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8103956:	4b0b      	ldr	r3, [pc, #44]	; (8103984 <vPortSetupTimerInterrupt+0x38>)
 8103958:	2200      	movs	r2, #0
 810395a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810395c:	4b0a      	ldr	r3, [pc, #40]	; (8103988 <vPortSetupTimerInterrupt+0x3c>)
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a0a      	ldr	r2, [pc, #40]	; (810398c <vPortSetupTimerInterrupt+0x40>)
 8103962:	fba2 2303 	umull	r2, r3, r2, r3
 8103966:	099b      	lsrs	r3, r3, #6
 8103968:	4a09      	ldr	r2, [pc, #36]	; (8103990 <vPortSetupTimerInterrupt+0x44>)
 810396a:	3b01      	subs	r3, #1
 810396c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810396e:	4b04      	ldr	r3, [pc, #16]	; (8103980 <vPortSetupTimerInterrupt+0x34>)
 8103970:	2207      	movs	r2, #7
 8103972:	601a      	str	r2, [r3, #0]
}
 8103974:	bf00      	nop
 8103976:	46bd      	mov	sp, r7
 8103978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810397c:	4770      	bx	lr
 810397e:	bf00      	nop
 8103980:	e000e010 	.word	0xe000e010
 8103984:	e000e018 	.word	0xe000e018
 8103988:	10000004 	.word	0x10000004
 810398c:	10624dd3 	.word	0x10624dd3
 8103990:	e000e014 	.word	0xe000e014

08103994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8103994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81039a4 <vPortEnableVFP+0x10>
 8103998:	6801      	ldr	r1, [r0, #0]
 810399a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810399e:	6001      	str	r1, [r0, #0]
 81039a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81039a2:	bf00      	nop
 81039a4:	e000ed88 	.word	0xe000ed88

081039a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81039a8:	b480      	push	{r7}
 81039aa:	b085      	sub	sp, #20
 81039ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81039ae:	f3ef 8305 	mrs	r3, IPSR
 81039b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81039b4:	68fb      	ldr	r3, [r7, #12]
 81039b6:	2b0f      	cmp	r3, #15
 81039b8:	d914      	bls.n	81039e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81039ba:	4a17      	ldr	r2, [pc, #92]	; (8103a18 <vPortValidateInterruptPriority+0x70>)
 81039bc:	68fb      	ldr	r3, [r7, #12]
 81039be:	4413      	add	r3, r2
 81039c0:	781b      	ldrb	r3, [r3, #0]
 81039c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81039c4:	4b15      	ldr	r3, [pc, #84]	; (8103a1c <vPortValidateInterruptPriority+0x74>)
 81039c6:	781b      	ldrb	r3, [r3, #0]
 81039c8:	7afa      	ldrb	r2, [r7, #11]
 81039ca:	429a      	cmp	r2, r3
 81039cc:	d20a      	bcs.n	81039e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 81039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039d2:	f383 8811 	msr	BASEPRI, r3
 81039d6:	f3bf 8f6f 	isb	sy
 81039da:	f3bf 8f4f 	dsb	sy
 81039de:	607b      	str	r3, [r7, #4]
}
 81039e0:	bf00      	nop
 81039e2:	e7fe      	b.n	81039e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81039e4:	4b0e      	ldr	r3, [pc, #56]	; (8103a20 <vPortValidateInterruptPriority+0x78>)
 81039e6:	681b      	ldr	r3, [r3, #0]
 81039e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81039ec:	4b0d      	ldr	r3, [pc, #52]	; (8103a24 <vPortValidateInterruptPriority+0x7c>)
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	429a      	cmp	r2, r3
 81039f2:	d90a      	bls.n	8103a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 81039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81039f8:	f383 8811 	msr	BASEPRI, r3
 81039fc:	f3bf 8f6f 	isb	sy
 8103a00:	f3bf 8f4f 	dsb	sy
 8103a04:	603b      	str	r3, [r7, #0]
}
 8103a06:	bf00      	nop
 8103a08:	e7fe      	b.n	8103a08 <vPortValidateInterruptPriority+0x60>
	}
 8103a0a:	bf00      	nop
 8103a0c:	3714      	adds	r7, #20
 8103a0e:	46bd      	mov	sp, r7
 8103a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a14:	4770      	bx	lr
 8103a16:	bf00      	nop
 8103a18:	e000e3f0 	.word	0xe000e3f0
 8103a1c:	10003eb0 	.word	0x10003eb0
 8103a20:	e000ed0c 	.word	0xe000ed0c
 8103a24:	10003eb4 	.word	0x10003eb4

08103a28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8103a28:	b580      	push	{r7, lr}
 8103a2a:	b084      	sub	sp, #16
 8103a2c:	af00      	add	r7, sp, #0
 8103a2e:	6078      	str	r0, [r7, #4]
 8103a30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8103a32:	687b      	ldr	r3, [r7, #4]
 8103a34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8103a36:	68fb      	ldr	r3, [r7, #12]
 8103a38:	2b00      	cmp	r3, #0
 8103a3a:	d10a      	bne.n	8103a52 <xQueueGenericReset+0x2a>
	__asm volatile
 8103a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103a40:	f383 8811 	msr	BASEPRI, r3
 8103a44:	f3bf 8f6f 	isb	sy
 8103a48:	f3bf 8f4f 	dsb	sy
 8103a4c:	60bb      	str	r3, [r7, #8]
}
 8103a4e:	bf00      	nop
 8103a50:	e7fe      	b.n	8103a50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8103a52:	f7ff fec7 	bl	81037e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8103a56:	68fb      	ldr	r3, [r7, #12]
 8103a58:	681a      	ldr	r2, [r3, #0]
 8103a5a:	68fb      	ldr	r3, [r7, #12]
 8103a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103a5e:	68f9      	ldr	r1, [r7, #12]
 8103a60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8103a62:	fb01 f303 	mul.w	r3, r1, r3
 8103a66:	441a      	add	r2, r3
 8103a68:	68fb      	ldr	r3, [r7, #12]
 8103a6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8103a6c:	68fb      	ldr	r3, [r7, #12]
 8103a6e:	2200      	movs	r2, #0
 8103a70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8103a72:	68fb      	ldr	r3, [r7, #12]
 8103a74:	681a      	ldr	r2, [r3, #0]
 8103a76:	68fb      	ldr	r3, [r7, #12]
 8103a78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8103a7a:	68fb      	ldr	r3, [r7, #12]
 8103a7c:	681a      	ldr	r2, [r3, #0]
 8103a7e:	68fb      	ldr	r3, [r7, #12]
 8103a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103a82:	3b01      	subs	r3, #1
 8103a84:	68f9      	ldr	r1, [r7, #12]
 8103a86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8103a88:	fb01 f303 	mul.w	r3, r1, r3
 8103a8c:	441a      	add	r2, r3
 8103a8e:	68fb      	ldr	r3, [r7, #12]
 8103a90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	22ff      	movs	r2, #255	; 0xff
 8103a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8103a9a:	68fb      	ldr	r3, [r7, #12]
 8103a9c:	22ff      	movs	r2, #255	; 0xff
 8103a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8103aa2:	683b      	ldr	r3, [r7, #0]
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d114      	bne.n	8103ad2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8103aa8:	68fb      	ldr	r3, [r7, #12]
 8103aaa:	691b      	ldr	r3, [r3, #16]
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	d01a      	beq.n	8103ae6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8103ab0:	68fb      	ldr	r3, [r7, #12]
 8103ab2:	3310      	adds	r3, #16
 8103ab4:	4618      	mov	r0, r3
 8103ab6:	f001 f905 	bl	8104cc4 <xTaskRemoveFromEventList>
 8103aba:	4603      	mov	r3, r0
 8103abc:	2b00      	cmp	r3, #0
 8103abe:	d012      	beq.n	8103ae6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8103ac0:	4b0c      	ldr	r3, [pc, #48]	; (8103af4 <xQueueGenericReset+0xcc>)
 8103ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103ac6:	601a      	str	r2, [r3, #0]
 8103ac8:	f3bf 8f4f 	dsb	sy
 8103acc:	f3bf 8f6f 	isb	sy
 8103ad0:	e009      	b.n	8103ae6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8103ad2:	68fb      	ldr	r3, [r7, #12]
 8103ad4:	3310      	adds	r3, #16
 8103ad6:	4618      	mov	r0, r3
 8103ad8:	f7ff fca4 	bl	8103424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8103adc:	68fb      	ldr	r3, [r7, #12]
 8103ade:	3324      	adds	r3, #36	; 0x24
 8103ae0:	4618      	mov	r0, r3
 8103ae2:	f7ff fc9f 	bl	8103424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8103ae6:	f7ff fead 	bl	8103844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8103aea:	2301      	movs	r3, #1
}
 8103aec:	4618      	mov	r0, r3
 8103aee:	3710      	adds	r7, #16
 8103af0:	46bd      	mov	sp, r7
 8103af2:	bd80      	pop	{r7, pc}
 8103af4:	e000ed04 	.word	0xe000ed04

08103af8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8103af8:	b580      	push	{r7, lr}
 8103afa:	b08e      	sub	sp, #56	; 0x38
 8103afc:	af02      	add	r7, sp, #8
 8103afe:	60f8      	str	r0, [r7, #12]
 8103b00:	60b9      	str	r1, [r7, #8]
 8103b02:	607a      	str	r2, [r7, #4]
 8103b04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8103b06:	68fb      	ldr	r3, [r7, #12]
 8103b08:	2b00      	cmp	r3, #0
 8103b0a:	d10a      	bne.n	8103b22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8103b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b10:	f383 8811 	msr	BASEPRI, r3
 8103b14:	f3bf 8f6f 	isb	sy
 8103b18:	f3bf 8f4f 	dsb	sy
 8103b1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8103b1e:	bf00      	nop
 8103b20:	e7fe      	b.n	8103b20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8103b22:	683b      	ldr	r3, [r7, #0]
 8103b24:	2b00      	cmp	r3, #0
 8103b26:	d10a      	bne.n	8103b3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8103b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b2c:	f383 8811 	msr	BASEPRI, r3
 8103b30:	f3bf 8f6f 	isb	sy
 8103b34:	f3bf 8f4f 	dsb	sy
 8103b38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8103b3a:	bf00      	nop
 8103b3c:	e7fe      	b.n	8103b3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	2b00      	cmp	r3, #0
 8103b42:	d002      	beq.n	8103b4a <xQueueGenericCreateStatic+0x52>
 8103b44:	68bb      	ldr	r3, [r7, #8]
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d001      	beq.n	8103b4e <xQueueGenericCreateStatic+0x56>
 8103b4a:	2301      	movs	r3, #1
 8103b4c:	e000      	b.n	8103b50 <xQueueGenericCreateStatic+0x58>
 8103b4e:	2300      	movs	r3, #0
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d10a      	bne.n	8103b6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8103b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b58:	f383 8811 	msr	BASEPRI, r3
 8103b5c:	f3bf 8f6f 	isb	sy
 8103b60:	f3bf 8f4f 	dsb	sy
 8103b64:	623b      	str	r3, [r7, #32]
}
 8103b66:	bf00      	nop
 8103b68:	e7fe      	b.n	8103b68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	d102      	bne.n	8103b76 <xQueueGenericCreateStatic+0x7e>
 8103b70:	68bb      	ldr	r3, [r7, #8]
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d101      	bne.n	8103b7a <xQueueGenericCreateStatic+0x82>
 8103b76:	2301      	movs	r3, #1
 8103b78:	e000      	b.n	8103b7c <xQueueGenericCreateStatic+0x84>
 8103b7a:	2300      	movs	r3, #0
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d10a      	bne.n	8103b96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8103b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103b84:	f383 8811 	msr	BASEPRI, r3
 8103b88:	f3bf 8f6f 	isb	sy
 8103b8c:	f3bf 8f4f 	dsb	sy
 8103b90:	61fb      	str	r3, [r7, #28]
}
 8103b92:	bf00      	nop
 8103b94:	e7fe      	b.n	8103b94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8103b96:	2348      	movs	r3, #72	; 0x48
 8103b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8103b9a:	697b      	ldr	r3, [r7, #20]
 8103b9c:	2b48      	cmp	r3, #72	; 0x48
 8103b9e:	d00a      	beq.n	8103bb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8103ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ba4:	f383 8811 	msr	BASEPRI, r3
 8103ba8:	f3bf 8f6f 	isb	sy
 8103bac:	f3bf 8f4f 	dsb	sy
 8103bb0:	61bb      	str	r3, [r7, #24]
}
 8103bb2:	bf00      	nop
 8103bb4:	e7fe      	b.n	8103bb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8103bb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8103bb8:	683b      	ldr	r3, [r7, #0]
 8103bba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8103bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103bbe:	2b00      	cmp	r3, #0
 8103bc0:	d00d      	beq.n	8103bde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8103bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103bc4:	2201      	movs	r2, #1
 8103bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8103bca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8103bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103bd0:	9300      	str	r3, [sp, #0]
 8103bd2:	4613      	mov	r3, r2
 8103bd4:	687a      	ldr	r2, [r7, #4]
 8103bd6:	68b9      	ldr	r1, [r7, #8]
 8103bd8:	68f8      	ldr	r0, [r7, #12]
 8103bda:	f000 f83f 	bl	8103c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8103bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8103be0:	4618      	mov	r0, r3
 8103be2:	3730      	adds	r7, #48	; 0x30
 8103be4:	46bd      	mov	sp, r7
 8103be6:	bd80      	pop	{r7, pc}

08103be8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8103be8:	b580      	push	{r7, lr}
 8103bea:	b08a      	sub	sp, #40	; 0x28
 8103bec:	af02      	add	r7, sp, #8
 8103bee:	60f8      	str	r0, [r7, #12]
 8103bf0:	60b9      	str	r1, [r7, #8]
 8103bf2:	4613      	mov	r3, r2
 8103bf4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8103bf6:	68fb      	ldr	r3, [r7, #12]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d10a      	bne.n	8103c12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8103bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103c00:	f383 8811 	msr	BASEPRI, r3
 8103c04:	f3bf 8f6f 	isb	sy
 8103c08:	f3bf 8f4f 	dsb	sy
 8103c0c:	613b      	str	r3, [r7, #16]
}
 8103c0e:	bf00      	nop
 8103c10:	e7fe      	b.n	8103c10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8103c12:	68fb      	ldr	r3, [r7, #12]
 8103c14:	68ba      	ldr	r2, [r7, #8]
 8103c16:	fb02 f303 	mul.w	r3, r2, r3
 8103c1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8103c1c:	69fb      	ldr	r3, [r7, #28]
 8103c1e:	3348      	adds	r3, #72	; 0x48
 8103c20:	4618      	mov	r0, r3
 8103c22:	f7ff fa15 	bl	8103050 <pvPortMalloc>
 8103c26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8103c28:	69bb      	ldr	r3, [r7, #24]
 8103c2a:	2b00      	cmp	r3, #0
 8103c2c:	d011      	beq.n	8103c52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8103c2e:	69bb      	ldr	r3, [r7, #24]
 8103c30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8103c32:	697b      	ldr	r3, [r7, #20]
 8103c34:	3348      	adds	r3, #72	; 0x48
 8103c36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8103c38:	69bb      	ldr	r3, [r7, #24]
 8103c3a:	2200      	movs	r2, #0
 8103c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8103c40:	79fa      	ldrb	r2, [r7, #7]
 8103c42:	69bb      	ldr	r3, [r7, #24]
 8103c44:	9300      	str	r3, [sp, #0]
 8103c46:	4613      	mov	r3, r2
 8103c48:	697a      	ldr	r2, [r7, #20]
 8103c4a:	68b9      	ldr	r1, [r7, #8]
 8103c4c:	68f8      	ldr	r0, [r7, #12]
 8103c4e:	f000 f805 	bl	8103c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8103c52:	69bb      	ldr	r3, [r7, #24]
	}
 8103c54:	4618      	mov	r0, r3
 8103c56:	3720      	adds	r7, #32
 8103c58:	46bd      	mov	sp, r7
 8103c5a:	bd80      	pop	{r7, pc}

08103c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8103c5c:	b580      	push	{r7, lr}
 8103c5e:	b084      	sub	sp, #16
 8103c60:	af00      	add	r7, sp, #0
 8103c62:	60f8      	str	r0, [r7, #12]
 8103c64:	60b9      	str	r1, [r7, #8]
 8103c66:	607a      	str	r2, [r7, #4]
 8103c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8103c6a:	68bb      	ldr	r3, [r7, #8]
 8103c6c:	2b00      	cmp	r3, #0
 8103c6e:	d103      	bne.n	8103c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8103c70:	69bb      	ldr	r3, [r7, #24]
 8103c72:	69ba      	ldr	r2, [r7, #24]
 8103c74:	601a      	str	r2, [r3, #0]
 8103c76:	e002      	b.n	8103c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8103c78:	69bb      	ldr	r3, [r7, #24]
 8103c7a:	687a      	ldr	r2, [r7, #4]
 8103c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8103c7e:	69bb      	ldr	r3, [r7, #24]
 8103c80:	68fa      	ldr	r2, [r7, #12]
 8103c82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8103c84:	69bb      	ldr	r3, [r7, #24]
 8103c86:	68ba      	ldr	r2, [r7, #8]
 8103c88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8103c8a:	2101      	movs	r1, #1
 8103c8c:	69b8      	ldr	r0, [r7, #24]
 8103c8e:	f7ff fecb 	bl	8103a28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8103c92:	bf00      	nop
 8103c94:	3710      	adds	r7, #16
 8103c96:	46bd      	mov	sp, r7
 8103c98:	bd80      	pop	{r7, pc}
	...

08103c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8103c9c:	b580      	push	{r7, lr}
 8103c9e:	b08e      	sub	sp, #56	; 0x38
 8103ca0:	af00      	add	r7, sp, #0
 8103ca2:	60f8      	str	r0, [r7, #12]
 8103ca4:	60b9      	str	r1, [r7, #8]
 8103ca6:	607a      	str	r2, [r7, #4]
 8103ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8103caa:	2300      	movs	r3, #0
 8103cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103cae:	68fb      	ldr	r3, [r7, #12]
 8103cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8103cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d10a      	bne.n	8103cce <xQueueGenericSend+0x32>
	__asm volatile
 8103cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cbc:	f383 8811 	msr	BASEPRI, r3
 8103cc0:	f3bf 8f6f 	isb	sy
 8103cc4:	f3bf 8f4f 	dsb	sy
 8103cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8103cca:	bf00      	nop
 8103ccc:	e7fe      	b.n	8103ccc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103cce:	68bb      	ldr	r3, [r7, #8]
 8103cd0:	2b00      	cmp	r3, #0
 8103cd2:	d103      	bne.n	8103cdc <xQueueGenericSend+0x40>
 8103cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	d101      	bne.n	8103ce0 <xQueueGenericSend+0x44>
 8103cdc:	2301      	movs	r3, #1
 8103cde:	e000      	b.n	8103ce2 <xQueueGenericSend+0x46>
 8103ce0:	2300      	movs	r3, #0
 8103ce2:	2b00      	cmp	r3, #0
 8103ce4:	d10a      	bne.n	8103cfc <xQueueGenericSend+0x60>
	__asm volatile
 8103ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103cea:	f383 8811 	msr	BASEPRI, r3
 8103cee:	f3bf 8f6f 	isb	sy
 8103cf2:	f3bf 8f4f 	dsb	sy
 8103cf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8103cf8:	bf00      	nop
 8103cfa:	e7fe      	b.n	8103cfa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8103cfc:	683b      	ldr	r3, [r7, #0]
 8103cfe:	2b02      	cmp	r3, #2
 8103d00:	d103      	bne.n	8103d0a <xQueueGenericSend+0x6e>
 8103d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d06:	2b01      	cmp	r3, #1
 8103d08:	d101      	bne.n	8103d0e <xQueueGenericSend+0x72>
 8103d0a:	2301      	movs	r3, #1
 8103d0c:	e000      	b.n	8103d10 <xQueueGenericSend+0x74>
 8103d0e:	2300      	movs	r3, #0
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d10a      	bne.n	8103d2a <xQueueGenericSend+0x8e>
	__asm volatile
 8103d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d18:	f383 8811 	msr	BASEPRI, r3
 8103d1c:	f3bf 8f6f 	isb	sy
 8103d20:	f3bf 8f4f 	dsb	sy
 8103d24:	623b      	str	r3, [r7, #32]
}
 8103d26:	bf00      	nop
 8103d28:	e7fe      	b.n	8103d28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8103d2a:	f001 f987 	bl	810503c <xTaskGetSchedulerState>
 8103d2e:	4603      	mov	r3, r0
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d102      	bne.n	8103d3a <xQueueGenericSend+0x9e>
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	2b00      	cmp	r3, #0
 8103d38:	d101      	bne.n	8103d3e <xQueueGenericSend+0xa2>
 8103d3a:	2301      	movs	r3, #1
 8103d3c:	e000      	b.n	8103d40 <xQueueGenericSend+0xa4>
 8103d3e:	2300      	movs	r3, #0
 8103d40:	2b00      	cmp	r3, #0
 8103d42:	d10a      	bne.n	8103d5a <xQueueGenericSend+0xbe>
	__asm volatile
 8103d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103d48:	f383 8811 	msr	BASEPRI, r3
 8103d4c:	f3bf 8f6f 	isb	sy
 8103d50:	f3bf 8f4f 	dsb	sy
 8103d54:	61fb      	str	r3, [r7, #28]
}
 8103d56:	bf00      	nop
 8103d58:	e7fe      	b.n	8103d58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8103d5a:	f7ff fd43 	bl	81037e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8103d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d66:	429a      	cmp	r2, r3
 8103d68:	d302      	bcc.n	8103d70 <xQueueGenericSend+0xd4>
 8103d6a:	683b      	ldr	r3, [r7, #0]
 8103d6c:	2b02      	cmp	r3, #2
 8103d6e:	d129      	bne.n	8103dc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103d70:	683a      	ldr	r2, [r7, #0]
 8103d72:	68b9      	ldr	r1, [r7, #8]
 8103d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103d76:	f000 fa8b 	bl	8104290 <prvCopyDataToQueue>
 8103d7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d010      	beq.n	8103da6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8103d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103d86:	3324      	adds	r3, #36	; 0x24
 8103d88:	4618      	mov	r0, r3
 8103d8a:	f000 ff9b 	bl	8104cc4 <xTaskRemoveFromEventList>
 8103d8e:	4603      	mov	r3, r0
 8103d90:	2b00      	cmp	r3, #0
 8103d92:	d013      	beq.n	8103dbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8103d94:	4b3f      	ldr	r3, [pc, #252]	; (8103e94 <xQueueGenericSend+0x1f8>)
 8103d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103d9a:	601a      	str	r2, [r3, #0]
 8103d9c:	f3bf 8f4f 	dsb	sy
 8103da0:	f3bf 8f6f 	isb	sy
 8103da4:	e00a      	b.n	8103dbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8103da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	d007      	beq.n	8103dbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8103dac:	4b39      	ldr	r3, [pc, #228]	; (8103e94 <xQueueGenericSend+0x1f8>)
 8103dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103db2:	601a      	str	r2, [r3, #0]
 8103db4:	f3bf 8f4f 	dsb	sy
 8103db8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8103dbc:	f7ff fd42 	bl	8103844 <vPortExitCritical>
				return pdPASS;
 8103dc0:	2301      	movs	r3, #1
 8103dc2:	e063      	b.n	8103e8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	2b00      	cmp	r3, #0
 8103dc8:	d103      	bne.n	8103dd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8103dca:	f7ff fd3b 	bl	8103844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8103dce:	2300      	movs	r3, #0
 8103dd0:	e05c      	b.n	8103e8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8103dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103dd4:	2b00      	cmp	r3, #0
 8103dd6:	d106      	bne.n	8103de6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8103dd8:	f107 0314 	add.w	r3, r7, #20
 8103ddc:	4618      	mov	r0, r3
 8103dde:	f000 ffd3 	bl	8104d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8103de2:	2301      	movs	r3, #1
 8103de4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8103de6:	f7ff fd2d 	bl	8103844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8103dea:	f000 fd89 	bl	8104900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8103dee:	f7ff fcf9 	bl	81037e4 <vPortEnterCritical>
 8103df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103df4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8103df8:	b25b      	sxtb	r3, r3
 8103dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103dfe:	d103      	bne.n	8103e08 <xQueueGenericSend+0x16c>
 8103e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e02:	2200      	movs	r2, #0
 8103e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103e0e:	b25b      	sxtb	r3, r3
 8103e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103e14:	d103      	bne.n	8103e1e <xQueueGenericSend+0x182>
 8103e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e18:	2200      	movs	r2, #0
 8103e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103e1e:	f7ff fd11 	bl	8103844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8103e22:	1d3a      	adds	r2, r7, #4
 8103e24:	f107 0314 	add.w	r3, r7, #20
 8103e28:	4611      	mov	r1, r2
 8103e2a:	4618      	mov	r0, r3
 8103e2c:	f000 ffc2 	bl	8104db4 <xTaskCheckForTimeOut>
 8103e30:	4603      	mov	r3, r0
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	d124      	bne.n	8103e80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8103e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103e38:	f000 fb22 	bl	8104480 <prvIsQueueFull>
 8103e3c:	4603      	mov	r3, r0
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d018      	beq.n	8103e74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8103e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103e44:	3310      	adds	r3, #16
 8103e46:	687a      	ldr	r2, [r7, #4]
 8103e48:	4611      	mov	r1, r2
 8103e4a:	4618      	mov	r0, r3
 8103e4c:	f000 ff16 	bl	8104c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8103e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103e52:	f000 faad 	bl	81043b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8103e56:	f000 fd61 	bl	810491c <xTaskResumeAll>
 8103e5a:	4603      	mov	r3, r0
 8103e5c:	2b00      	cmp	r3, #0
 8103e5e:	f47f af7c 	bne.w	8103d5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8103e62:	4b0c      	ldr	r3, [pc, #48]	; (8103e94 <xQueueGenericSend+0x1f8>)
 8103e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8103e68:	601a      	str	r2, [r3, #0]
 8103e6a:	f3bf 8f4f 	dsb	sy
 8103e6e:	f3bf 8f6f 	isb	sy
 8103e72:	e772      	b.n	8103d5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8103e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103e76:	f000 fa9b 	bl	81043b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8103e7a:	f000 fd4f 	bl	810491c <xTaskResumeAll>
 8103e7e:	e76c      	b.n	8103d5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8103e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103e82:	f000 fa95 	bl	81043b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8103e86:	f000 fd49 	bl	810491c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8103e8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8103e8c:	4618      	mov	r0, r3
 8103e8e:	3738      	adds	r7, #56	; 0x38
 8103e90:	46bd      	mov	sp, r7
 8103e92:	bd80      	pop	{r7, pc}
 8103e94:	e000ed04 	.word	0xe000ed04

08103e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8103e98:	b580      	push	{r7, lr}
 8103e9a:	b090      	sub	sp, #64	; 0x40
 8103e9c:	af00      	add	r7, sp, #0
 8103e9e:	60f8      	str	r0, [r7, #12]
 8103ea0:	60b9      	str	r1, [r7, #8]
 8103ea2:	607a      	str	r2, [r7, #4]
 8103ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8103eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	d10a      	bne.n	8103ec6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8103eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103eb4:	f383 8811 	msr	BASEPRI, r3
 8103eb8:	f3bf 8f6f 	isb	sy
 8103ebc:	f3bf 8f4f 	dsb	sy
 8103ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8103ec2:	bf00      	nop
 8103ec4:	e7fe      	b.n	8103ec4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8103ec6:	68bb      	ldr	r3, [r7, #8]
 8103ec8:	2b00      	cmp	r3, #0
 8103eca:	d103      	bne.n	8103ed4 <xQueueGenericSendFromISR+0x3c>
 8103ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ed0:	2b00      	cmp	r3, #0
 8103ed2:	d101      	bne.n	8103ed8 <xQueueGenericSendFromISR+0x40>
 8103ed4:	2301      	movs	r3, #1
 8103ed6:	e000      	b.n	8103eda <xQueueGenericSendFromISR+0x42>
 8103ed8:	2300      	movs	r3, #0
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d10a      	bne.n	8103ef4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8103ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103ee2:	f383 8811 	msr	BASEPRI, r3
 8103ee6:	f3bf 8f6f 	isb	sy
 8103eea:	f3bf 8f4f 	dsb	sy
 8103eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8103ef0:	bf00      	nop
 8103ef2:	e7fe      	b.n	8103ef2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8103ef4:	683b      	ldr	r3, [r7, #0]
 8103ef6:	2b02      	cmp	r3, #2
 8103ef8:	d103      	bne.n	8103f02 <xQueueGenericSendFromISR+0x6a>
 8103efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103efe:	2b01      	cmp	r3, #1
 8103f00:	d101      	bne.n	8103f06 <xQueueGenericSendFromISR+0x6e>
 8103f02:	2301      	movs	r3, #1
 8103f04:	e000      	b.n	8103f08 <xQueueGenericSendFromISR+0x70>
 8103f06:	2300      	movs	r3, #0
 8103f08:	2b00      	cmp	r3, #0
 8103f0a:	d10a      	bne.n	8103f22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8103f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103f10:	f383 8811 	msr	BASEPRI, r3
 8103f14:	f3bf 8f6f 	isb	sy
 8103f18:	f3bf 8f4f 	dsb	sy
 8103f1c:	623b      	str	r3, [r7, #32]
}
 8103f1e:	bf00      	nop
 8103f20:	e7fe      	b.n	8103f20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8103f22:	f7ff fd41 	bl	81039a8 <vPortValidateInterruptPriority>
	__asm volatile
 8103f26:	f3ef 8211 	mrs	r2, BASEPRI
 8103f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103f2e:	f383 8811 	msr	BASEPRI, r3
 8103f32:	f3bf 8f6f 	isb	sy
 8103f36:	f3bf 8f4f 	dsb	sy
 8103f3a:	61fa      	str	r2, [r7, #28]
 8103f3c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8103f3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8103f40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8103f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f4a:	429a      	cmp	r2, r3
 8103f4c:	d302      	bcc.n	8103f54 <xQueueGenericSendFromISR+0xbc>
 8103f4e:	683b      	ldr	r3, [r7, #0]
 8103f50:	2b02      	cmp	r3, #2
 8103f52:	d12f      	bne.n	8103fb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8103f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8103f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8103f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103f62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8103f64:	683a      	ldr	r2, [r7, #0]
 8103f66:	68b9      	ldr	r1, [r7, #8]
 8103f68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8103f6a:	f000 f991 	bl	8104290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8103f6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8103f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8103f76:	d112      	bne.n	8103f9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8103f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f7c:	2b00      	cmp	r3, #0
 8103f7e:	d016      	beq.n	8103fae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8103f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f82:	3324      	adds	r3, #36	; 0x24
 8103f84:	4618      	mov	r0, r3
 8103f86:	f000 fe9d 	bl	8104cc4 <xTaskRemoveFromEventList>
 8103f8a:	4603      	mov	r3, r0
 8103f8c:	2b00      	cmp	r3, #0
 8103f8e:	d00e      	beq.n	8103fae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	d00b      	beq.n	8103fae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	2201      	movs	r2, #1
 8103f9a:	601a      	str	r2, [r3, #0]
 8103f9c:	e007      	b.n	8103fae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8103f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103fa2:	3301      	adds	r3, #1
 8103fa4:	b2db      	uxtb	r3, r3
 8103fa6:	b25a      	sxtb	r2, r3
 8103fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8103fae:	2301      	movs	r3, #1
 8103fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8103fb2:	e001      	b.n	8103fb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8103fb4:	2300      	movs	r3, #0
 8103fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103fba:	617b      	str	r3, [r7, #20]
	__asm volatile
 8103fbc:	697b      	ldr	r3, [r7, #20]
 8103fbe:	f383 8811 	msr	BASEPRI, r3
}
 8103fc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8103fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8103fc6:	4618      	mov	r0, r3
 8103fc8:	3740      	adds	r7, #64	; 0x40
 8103fca:	46bd      	mov	sp, r7
 8103fcc:	bd80      	pop	{r7, pc}
	...

08103fd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8103fd0:	b580      	push	{r7, lr}
 8103fd2:	b08c      	sub	sp, #48	; 0x30
 8103fd4:	af00      	add	r7, sp, #0
 8103fd6:	60f8      	str	r0, [r7, #12]
 8103fd8:	60b9      	str	r1, [r7, #8]
 8103fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8103fdc:	2300      	movs	r3, #0
 8103fde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8103fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103fe6:	2b00      	cmp	r3, #0
 8103fe8:	d10a      	bne.n	8104000 <xQueueReceive+0x30>
	__asm volatile
 8103fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8103fee:	f383 8811 	msr	BASEPRI, r3
 8103ff2:	f3bf 8f6f 	isb	sy
 8103ff6:	f3bf 8f4f 	dsb	sy
 8103ffa:	623b      	str	r3, [r7, #32]
}
 8103ffc:	bf00      	nop
 8103ffe:	e7fe      	b.n	8103ffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8104000:	68bb      	ldr	r3, [r7, #8]
 8104002:	2b00      	cmp	r3, #0
 8104004:	d103      	bne.n	810400e <xQueueReceive+0x3e>
 8104006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810400a:	2b00      	cmp	r3, #0
 810400c:	d101      	bne.n	8104012 <xQueueReceive+0x42>
 810400e:	2301      	movs	r3, #1
 8104010:	e000      	b.n	8104014 <xQueueReceive+0x44>
 8104012:	2300      	movs	r3, #0
 8104014:	2b00      	cmp	r3, #0
 8104016:	d10a      	bne.n	810402e <xQueueReceive+0x5e>
	__asm volatile
 8104018:	f04f 0350 	mov.w	r3, #80	; 0x50
 810401c:	f383 8811 	msr	BASEPRI, r3
 8104020:	f3bf 8f6f 	isb	sy
 8104024:	f3bf 8f4f 	dsb	sy
 8104028:	61fb      	str	r3, [r7, #28]
}
 810402a:	bf00      	nop
 810402c:	e7fe      	b.n	810402c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810402e:	f001 f805 	bl	810503c <xTaskGetSchedulerState>
 8104032:	4603      	mov	r3, r0
 8104034:	2b00      	cmp	r3, #0
 8104036:	d102      	bne.n	810403e <xQueueReceive+0x6e>
 8104038:	687b      	ldr	r3, [r7, #4]
 810403a:	2b00      	cmp	r3, #0
 810403c:	d101      	bne.n	8104042 <xQueueReceive+0x72>
 810403e:	2301      	movs	r3, #1
 8104040:	e000      	b.n	8104044 <xQueueReceive+0x74>
 8104042:	2300      	movs	r3, #0
 8104044:	2b00      	cmp	r3, #0
 8104046:	d10a      	bne.n	810405e <xQueueReceive+0x8e>
	__asm volatile
 8104048:	f04f 0350 	mov.w	r3, #80	; 0x50
 810404c:	f383 8811 	msr	BASEPRI, r3
 8104050:	f3bf 8f6f 	isb	sy
 8104054:	f3bf 8f4f 	dsb	sy
 8104058:	61bb      	str	r3, [r7, #24]
}
 810405a:	bf00      	nop
 810405c:	e7fe      	b.n	810405c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810405e:	f7ff fbc1 	bl	81037e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8104062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104066:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8104068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810406a:	2b00      	cmp	r3, #0
 810406c:	d01f      	beq.n	81040ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810406e:	68b9      	ldr	r1, [r7, #8]
 8104070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104072:	f000 f977 	bl	8104364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8104076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104078:	1e5a      	subs	r2, r3, #1
 810407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810407c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104080:	691b      	ldr	r3, [r3, #16]
 8104082:	2b00      	cmp	r3, #0
 8104084:	d00f      	beq.n	81040a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104088:	3310      	adds	r3, #16
 810408a:	4618      	mov	r0, r3
 810408c:	f000 fe1a 	bl	8104cc4 <xTaskRemoveFromEventList>
 8104090:	4603      	mov	r3, r0
 8104092:	2b00      	cmp	r3, #0
 8104094:	d007      	beq.n	81040a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8104096:	4b3d      	ldr	r3, [pc, #244]	; (810418c <xQueueReceive+0x1bc>)
 8104098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810409c:	601a      	str	r2, [r3, #0]
 810409e:	f3bf 8f4f 	dsb	sy
 81040a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81040a6:	f7ff fbcd 	bl	8103844 <vPortExitCritical>
				return pdPASS;
 81040aa:	2301      	movs	r3, #1
 81040ac:	e069      	b.n	8104182 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	d103      	bne.n	81040bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81040b4:	f7ff fbc6 	bl	8103844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81040b8:	2300      	movs	r3, #0
 81040ba:	e062      	b.n	8104182 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 81040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81040be:	2b00      	cmp	r3, #0
 81040c0:	d106      	bne.n	81040d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81040c2:	f107 0310 	add.w	r3, r7, #16
 81040c6:	4618      	mov	r0, r3
 81040c8:	f000 fe5e 	bl	8104d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81040cc:	2301      	movs	r3, #1
 81040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81040d0:	f7ff fbb8 	bl	8103844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81040d4:	f000 fc14 	bl	8104900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81040d8:	f7ff fb84 	bl	81037e4 <vPortEnterCritical>
 81040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81040e2:	b25b      	sxtb	r3, r3
 81040e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81040e8:	d103      	bne.n	81040f2 <xQueueReceive+0x122>
 81040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040ec:	2200      	movs	r2, #0
 81040ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81040f8:	b25b      	sxtb	r3, r3
 81040fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81040fe:	d103      	bne.n	8104108 <xQueueReceive+0x138>
 8104100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104102:	2200      	movs	r2, #0
 8104104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104108:	f7ff fb9c 	bl	8103844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810410c:	1d3a      	adds	r2, r7, #4
 810410e:	f107 0310 	add.w	r3, r7, #16
 8104112:	4611      	mov	r1, r2
 8104114:	4618      	mov	r0, r3
 8104116:	f000 fe4d 	bl	8104db4 <xTaskCheckForTimeOut>
 810411a:	4603      	mov	r3, r0
 810411c:	2b00      	cmp	r3, #0
 810411e:	d123      	bne.n	8104168 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8104120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104122:	f000 f997 	bl	8104454 <prvIsQueueEmpty>
 8104126:	4603      	mov	r3, r0
 8104128:	2b00      	cmp	r3, #0
 810412a:	d017      	beq.n	810415c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810412e:	3324      	adds	r3, #36	; 0x24
 8104130:	687a      	ldr	r2, [r7, #4]
 8104132:	4611      	mov	r1, r2
 8104134:	4618      	mov	r0, r3
 8104136:	f000 fda1 	bl	8104c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810413a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810413c:	f000 f938 	bl	81043b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8104140:	f000 fbec 	bl	810491c <xTaskResumeAll>
 8104144:	4603      	mov	r3, r0
 8104146:	2b00      	cmp	r3, #0
 8104148:	d189      	bne.n	810405e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 810414a:	4b10      	ldr	r3, [pc, #64]	; (810418c <xQueueReceive+0x1bc>)
 810414c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104150:	601a      	str	r2, [r3, #0]
 8104152:	f3bf 8f4f 	dsb	sy
 8104156:	f3bf 8f6f 	isb	sy
 810415a:	e780      	b.n	810405e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810415c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810415e:	f000 f927 	bl	81043b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8104162:	f000 fbdb 	bl	810491c <xTaskResumeAll>
 8104166:	e77a      	b.n	810405e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8104168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810416a:	f000 f921 	bl	81043b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810416e:	f000 fbd5 	bl	810491c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8104172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8104174:	f000 f96e 	bl	8104454 <prvIsQueueEmpty>
 8104178:	4603      	mov	r3, r0
 810417a:	2b00      	cmp	r3, #0
 810417c:	f43f af6f 	beq.w	810405e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8104180:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8104182:	4618      	mov	r0, r3
 8104184:	3730      	adds	r7, #48	; 0x30
 8104186:	46bd      	mov	sp, r7
 8104188:	bd80      	pop	{r7, pc}
 810418a:	bf00      	nop
 810418c:	e000ed04 	.word	0xe000ed04

08104190 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8104190:	b580      	push	{r7, lr}
 8104192:	b08e      	sub	sp, #56	; 0x38
 8104194:	af00      	add	r7, sp, #0
 8104196:	60f8      	str	r0, [r7, #12]
 8104198:	60b9      	str	r1, [r7, #8]
 810419a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810419c:	68fb      	ldr	r3, [r7, #12]
 810419e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041a2:	2b00      	cmp	r3, #0
 81041a4:	d10a      	bne.n	81041bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 81041a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81041aa:	f383 8811 	msr	BASEPRI, r3
 81041ae:	f3bf 8f6f 	isb	sy
 81041b2:	f3bf 8f4f 	dsb	sy
 81041b6:	623b      	str	r3, [r7, #32]
}
 81041b8:	bf00      	nop
 81041ba:	e7fe      	b.n	81041ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81041bc:	68bb      	ldr	r3, [r7, #8]
 81041be:	2b00      	cmp	r3, #0
 81041c0:	d103      	bne.n	81041ca <xQueueReceiveFromISR+0x3a>
 81041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81041c6:	2b00      	cmp	r3, #0
 81041c8:	d101      	bne.n	81041ce <xQueueReceiveFromISR+0x3e>
 81041ca:	2301      	movs	r3, #1
 81041cc:	e000      	b.n	81041d0 <xQueueReceiveFromISR+0x40>
 81041ce:	2300      	movs	r3, #0
 81041d0:	2b00      	cmp	r3, #0
 81041d2:	d10a      	bne.n	81041ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 81041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81041d8:	f383 8811 	msr	BASEPRI, r3
 81041dc:	f3bf 8f6f 	isb	sy
 81041e0:	f3bf 8f4f 	dsb	sy
 81041e4:	61fb      	str	r3, [r7, #28]
}
 81041e6:	bf00      	nop
 81041e8:	e7fe      	b.n	81041e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81041ea:	f7ff fbdd 	bl	81039a8 <vPortValidateInterruptPriority>
	__asm volatile
 81041ee:	f3ef 8211 	mrs	r2, BASEPRI
 81041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81041f6:	f383 8811 	msr	BASEPRI, r3
 81041fa:	f3bf 8f6f 	isb	sy
 81041fe:	f3bf 8f4f 	dsb	sy
 8104202:	61ba      	str	r2, [r7, #24]
 8104204:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8104206:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8104208:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810420e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8104210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104212:	2b00      	cmp	r3, #0
 8104214:	d02f      	beq.n	8104276 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8104216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810421c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8104220:	68b9      	ldr	r1, [r7, #8]
 8104222:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8104224:	f000 f89e 	bl	8104364 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8104228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810422a:	1e5a      	subs	r2, r3, #1
 810422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810422e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8104230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8104234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8104238:	d112      	bne.n	8104260 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810423c:	691b      	ldr	r3, [r3, #16]
 810423e:	2b00      	cmp	r3, #0
 8104240:	d016      	beq.n	8104270 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104244:	3310      	adds	r3, #16
 8104246:	4618      	mov	r0, r3
 8104248:	f000 fd3c 	bl	8104cc4 <xTaskRemoveFromEventList>
 810424c:	4603      	mov	r3, r0
 810424e:	2b00      	cmp	r3, #0
 8104250:	d00e      	beq.n	8104270 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	2b00      	cmp	r3, #0
 8104256:	d00b      	beq.n	8104270 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	2201      	movs	r2, #1
 810425c:	601a      	str	r2, [r3, #0]
 810425e:	e007      	b.n	8104270 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8104260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104264:	3301      	adds	r3, #1
 8104266:	b2db      	uxtb	r3, r3
 8104268:	b25a      	sxtb	r2, r3
 810426a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8104270:	2301      	movs	r3, #1
 8104272:	637b      	str	r3, [r7, #52]	; 0x34
 8104274:	e001      	b.n	810427a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8104276:	2300      	movs	r3, #0
 8104278:	637b      	str	r3, [r7, #52]	; 0x34
 810427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810427c:	613b      	str	r3, [r7, #16]
	__asm volatile
 810427e:	693b      	ldr	r3, [r7, #16]
 8104280:	f383 8811 	msr	BASEPRI, r3
}
 8104284:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8104286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8104288:	4618      	mov	r0, r3
 810428a:	3738      	adds	r7, #56	; 0x38
 810428c:	46bd      	mov	sp, r7
 810428e:	bd80      	pop	{r7, pc}

08104290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8104290:	b580      	push	{r7, lr}
 8104292:	b086      	sub	sp, #24
 8104294:	af00      	add	r7, sp, #0
 8104296:	60f8      	str	r0, [r7, #12]
 8104298:	60b9      	str	r1, [r7, #8]
 810429a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810429c:	2300      	movs	r3, #0
 810429e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81042a0:	68fb      	ldr	r3, [r7, #12]
 81042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81042a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81042a6:	68fb      	ldr	r3, [r7, #12]
 81042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81042aa:	2b00      	cmp	r3, #0
 81042ac:	d10d      	bne.n	81042ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81042ae:	68fb      	ldr	r3, [r7, #12]
 81042b0:	681b      	ldr	r3, [r3, #0]
 81042b2:	2b00      	cmp	r3, #0
 81042b4:	d14d      	bne.n	8104352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81042b6:	68fb      	ldr	r3, [r7, #12]
 81042b8:	689b      	ldr	r3, [r3, #8]
 81042ba:	4618      	mov	r0, r3
 81042bc:	f000 fedc 	bl	8105078 <xTaskPriorityDisinherit>
 81042c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81042c2:	68fb      	ldr	r3, [r7, #12]
 81042c4:	2200      	movs	r2, #0
 81042c6:	609a      	str	r2, [r3, #8]
 81042c8:	e043      	b.n	8104352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81042ca:	687b      	ldr	r3, [r7, #4]
 81042cc:	2b00      	cmp	r3, #0
 81042ce:	d119      	bne.n	8104304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81042d0:	68fb      	ldr	r3, [r7, #12]
 81042d2:	6858      	ldr	r0, [r3, #4]
 81042d4:	68fb      	ldr	r3, [r7, #12]
 81042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81042d8:	461a      	mov	r2, r3
 81042da:	68b9      	ldr	r1, [r7, #8]
 81042dc:	f001 f8d2 	bl	8105484 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	685a      	ldr	r2, [r3, #4]
 81042e4:	68fb      	ldr	r3, [r7, #12]
 81042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81042e8:	441a      	add	r2, r3
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81042ee:	68fb      	ldr	r3, [r7, #12]
 81042f0:	685a      	ldr	r2, [r3, #4]
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	689b      	ldr	r3, [r3, #8]
 81042f6:	429a      	cmp	r2, r3
 81042f8:	d32b      	bcc.n	8104352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 81042fa:	68fb      	ldr	r3, [r7, #12]
 81042fc:	681a      	ldr	r2, [r3, #0]
 81042fe:	68fb      	ldr	r3, [r7, #12]
 8104300:	605a      	str	r2, [r3, #4]
 8104302:	e026      	b.n	8104352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	68d8      	ldr	r0, [r3, #12]
 8104308:	68fb      	ldr	r3, [r7, #12]
 810430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810430c:	461a      	mov	r2, r3
 810430e:	68b9      	ldr	r1, [r7, #8]
 8104310:	f001 f8b8 	bl	8105484 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	68da      	ldr	r2, [r3, #12]
 8104318:	68fb      	ldr	r3, [r7, #12]
 810431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810431c:	425b      	negs	r3, r3
 810431e:	441a      	add	r2, r3
 8104320:	68fb      	ldr	r3, [r7, #12]
 8104322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8104324:	68fb      	ldr	r3, [r7, #12]
 8104326:	68da      	ldr	r2, [r3, #12]
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	429a      	cmp	r2, r3
 810432e:	d207      	bcs.n	8104340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8104330:	68fb      	ldr	r3, [r7, #12]
 8104332:	689a      	ldr	r2, [r3, #8]
 8104334:	68fb      	ldr	r3, [r7, #12]
 8104336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104338:	425b      	negs	r3, r3
 810433a:	441a      	add	r2, r3
 810433c:	68fb      	ldr	r3, [r7, #12]
 810433e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	2b02      	cmp	r3, #2
 8104344:	d105      	bne.n	8104352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8104346:	693b      	ldr	r3, [r7, #16]
 8104348:	2b00      	cmp	r3, #0
 810434a:	d002      	beq.n	8104352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810434c:	693b      	ldr	r3, [r7, #16]
 810434e:	3b01      	subs	r3, #1
 8104350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8104352:	693b      	ldr	r3, [r7, #16]
 8104354:	1c5a      	adds	r2, r3, #1
 8104356:	68fb      	ldr	r3, [r7, #12]
 8104358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810435a:	697b      	ldr	r3, [r7, #20]
}
 810435c:	4618      	mov	r0, r3
 810435e:	3718      	adds	r7, #24
 8104360:	46bd      	mov	sp, r7
 8104362:	bd80      	pop	{r7, pc}

08104364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8104364:	b580      	push	{r7, lr}
 8104366:	b082      	sub	sp, #8
 8104368:	af00      	add	r7, sp, #0
 810436a:	6078      	str	r0, [r7, #4]
 810436c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104372:	2b00      	cmp	r3, #0
 8104374:	d018      	beq.n	81043a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	68da      	ldr	r2, [r3, #12]
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810437e:	441a      	add	r2, r3
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	68da      	ldr	r2, [r3, #12]
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	689b      	ldr	r3, [r3, #8]
 810438c:	429a      	cmp	r2, r3
 810438e:	d303      	bcc.n	8104398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	681a      	ldr	r2, [r3, #0]
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	68d9      	ldr	r1, [r3, #12]
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81043a0:	461a      	mov	r2, r3
 81043a2:	6838      	ldr	r0, [r7, #0]
 81043a4:	f001 f86e 	bl	8105484 <memcpy>
	}
}
 81043a8:	bf00      	nop
 81043aa:	3708      	adds	r7, #8
 81043ac:	46bd      	mov	sp, r7
 81043ae:	bd80      	pop	{r7, pc}

081043b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81043b0:	b580      	push	{r7, lr}
 81043b2:	b084      	sub	sp, #16
 81043b4:	af00      	add	r7, sp, #0
 81043b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81043b8:	f7ff fa14 	bl	81037e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81043c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81043c4:	e011      	b.n	81043ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81043ca:	2b00      	cmp	r3, #0
 81043cc:	d012      	beq.n	81043f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	3324      	adds	r3, #36	; 0x24
 81043d2:	4618      	mov	r0, r3
 81043d4:	f000 fc76 	bl	8104cc4 <xTaskRemoveFromEventList>
 81043d8:	4603      	mov	r3, r0
 81043da:	2b00      	cmp	r3, #0
 81043dc:	d001      	beq.n	81043e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81043de:	f000 fd4b 	bl	8104e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81043e2:	7bfb      	ldrb	r3, [r7, #15]
 81043e4:	3b01      	subs	r3, #1
 81043e6:	b2db      	uxtb	r3, r3
 81043e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81043ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81043ee:	2b00      	cmp	r3, #0
 81043f0:	dce9      	bgt.n	81043c6 <prvUnlockQueue+0x16>
 81043f2:	e000      	b.n	81043f6 <prvUnlockQueue+0x46>
					break;
 81043f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	22ff      	movs	r2, #255	; 0xff
 81043fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 81043fe:	f7ff fa21 	bl	8103844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8104402:	f7ff f9ef 	bl	81037e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810440c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810440e:	e011      	b.n	8104434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	691b      	ldr	r3, [r3, #16]
 8104414:	2b00      	cmp	r3, #0
 8104416:	d012      	beq.n	810443e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	3310      	adds	r3, #16
 810441c:	4618      	mov	r0, r3
 810441e:	f000 fc51 	bl	8104cc4 <xTaskRemoveFromEventList>
 8104422:	4603      	mov	r3, r0
 8104424:	2b00      	cmp	r3, #0
 8104426:	d001      	beq.n	810442c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8104428:	f000 fd26 	bl	8104e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810442c:	7bbb      	ldrb	r3, [r7, #14]
 810442e:	3b01      	subs	r3, #1
 8104430:	b2db      	uxtb	r3, r3
 8104432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8104434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8104438:	2b00      	cmp	r3, #0
 810443a:	dce9      	bgt.n	8104410 <prvUnlockQueue+0x60>
 810443c:	e000      	b.n	8104440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810443e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	22ff      	movs	r2, #255	; 0xff
 8104444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8104448:	f7ff f9fc 	bl	8103844 <vPortExitCritical>
}
 810444c:	bf00      	nop
 810444e:	3710      	adds	r7, #16
 8104450:	46bd      	mov	sp, r7
 8104452:	bd80      	pop	{r7, pc}

08104454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8104454:	b580      	push	{r7, lr}
 8104456:	b084      	sub	sp, #16
 8104458:	af00      	add	r7, sp, #0
 810445a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810445c:	f7ff f9c2 	bl	81037e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104464:	2b00      	cmp	r3, #0
 8104466:	d102      	bne.n	810446e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8104468:	2301      	movs	r3, #1
 810446a:	60fb      	str	r3, [r7, #12]
 810446c:	e001      	b.n	8104472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810446e:	2300      	movs	r3, #0
 8104470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8104472:	f7ff f9e7 	bl	8103844 <vPortExitCritical>

	return xReturn;
 8104476:	68fb      	ldr	r3, [r7, #12]
}
 8104478:	4618      	mov	r0, r3
 810447a:	3710      	adds	r7, #16
 810447c:	46bd      	mov	sp, r7
 810447e:	bd80      	pop	{r7, pc}

08104480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8104480:	b580      	push	{r7, lr}
 8104482:	b084      	sub	sp, #16
 8104484:	af00      	add	r7, sp, #0
 8104486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8104488:	f7ff f9ac 	bl	81037e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104494:	429a      	cmp	r2, r3
 8104496:	d102      	bne.n	810449e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8104498:	2301      	movs	r3, #1
 810449a:	60fb      	str	r3, [r7, #12]
 810449c:	e001      	b.n	81044a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810449e:	2300      	movs	r3, #0
 81044a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81044a2:	f7ff f9cf 	bl	8103844 <vPortExitCritical>

	return xReturn;
 81044a6:	68fb      	ldr	r3, [r7, #12]
}
 81044a8:	4618      	mov	r0, r3
 81044aa:	3710      	adds	r7, #16
 81044ac:	46bd      	mov	sp, r7
 81044ae:	bd80      	pop	{r7, pc}

081044b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81044b0:	b580      	push	{r7, lr}
 81044b2:	b08e      	sub	sp, #56	; 0x38
 81044b4:	af04      	add	r7, sp, #16
 81044b6:	60f8      	str	r0, [r7, #12]
 81044b8:	60b9      	str	r1, [r7, #8]
 81044ba:	607a      	str	r2, [r7, #4]
 81044bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81044c0:	2b00      	cmp	r3, #0
 81044c2:	d10a      	bne.n	81044da <xTaskCreateStatic+0x2a>
	__asm volatile
 81044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81044c8:	f383 8811 	msr	BASEPRI, r3
 81044cc:	f3bf 8f6f 	isb	sy
 81044d0:	f3bf 8f4f 	dsb	sy
 81044d4:	623b      	str	r3, [r7, #32]
}
 81044d6:	bf00      	nop
 81044d8:	e7fe      	b.n	81044d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 81044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044dc:	2b00      	cmp	r3, #0
 81044de:	d10a      	bne.n	81044f6 <xTaskCreateStatic+0x46>
	__asm volatile
 81044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81044e4:	f383 8811 	msr	BASEPRI, r3
 81044e8:	f3bf 8f6f 	isb	sy
 81044ec:	f3bf 8f4f 	dsb	sy
 81044f0:	61fb      	str	r3, [r7, #28]
}
 81044f2:	bf00      	nop
 81044f4:	e7fe      	b.n	81044f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81044f6:	2354      	movs	r3, #84	; 0x54
 81044f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81044fa:	693b      	ldr	r3, [r7, #16]
 81044fc:	2b54      	cmp	r3, #84	; 0x54
 81044fe:	d00a      	beq.n	8104516 <xTaskCreateStatic+0x66>
	__asm volatile
 8104500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104504:	f383 8811 	msr	BASEPRI, r3
 8104508:	f3bf 8f6f 	isb	sy
 810450c:	f3bf 8f4f 	dsb	sy
 8104510:	61bb      	str	r3, [r7, #24]
}
 8104512:	bf00      	nop
 8104514:	e7fe      	b.n	8104514 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8104516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8104518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810451a:	2b00      	cmp	r3, #0
 810451c:	d01e      	beq.n	810455c <xTaskCreateStatic+0xac>
 810451e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104520:	2b00      	cmp	r3, #0
 8104522:	d01b      	beq.n	810455c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8104524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8104528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810452a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810452c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104530:	2202      	movs	r2, #2
 8104532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8104536:	2300      	movs	r3, #0
 8104538:	9303      	str	r3, [sp, #12]
 810453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810453c:	9302      	str	r3, [sp, #8]
 810453e:	f107 0314 	add.w	r3, r7, #20
 8104542:	9301      	str	r3, [sp, #4]
 8104544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104546:	9300      	str	r3, [sp, #0]
 8104548:	683b      	ldr	r3, [r7, #0]
 810454a:	687a      	ldr	r2, [r7, #4]
 810454c:	68b9      	ldr	r1, [r7, #8]
 810454e:	68f8      	ldr	r0, [r7, #12]
 8104550:	f000 f850 	bl	81045f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8104554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8104556:	f000 f8d5 	bl	8104704 <prvAddNewTaskToReadyList>
 810455a:	e001      	b.n	8104560 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 810455c:	2300      	movs	r3, #0
 810455e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8104560:	697b      	ldr	r3, [r7, #20]
	}
 8104562:	4618      	mov	r0, r3
 8104564:	3728      	adds	r7, #40	; 0x28
 8104566:	46bd      	mov	sp, r7
 8104568:	bd80      	pop	{r7, pc}

0810456a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810456a:	b580      	push	{r7, lr}
 810456c:	b08c      	sub	sp, #48	; 0x30
 810456e:	af04      	add	r7, sp, #16
 8104570:	60f8      	str	r0, [r7, #12]
 8104572:	60b9      	str	r1, [r7, #8]
 8104574:	603b      	str	r3, [r7, #0]
 8104576:	4613      	mov	r3, r2
 8104578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810457a:	88fb      	ldrh	r3, [r7, #6]
 810457c:	009b      	lsls	r3, r3, #2
 810457e:	4618      	mov	r0, r3
 8104580:	f7fe fd66 	bl	8103050 <pvPortMalloc>
 8104584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8104586:	697b      	ldr	r3, [r7, #20]
 8104588:	2b00      	cmp	r3, #0
 810458a:	d00e      	beq.n	81045aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810458c:	2054      	movs	r0, #84	; 0x54
 810458e:	f7fe fd5f 	bl	8103050 <pvPortMalloc>
 8104592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8104594:	69fb      	ldr	r3, [r7, #28]
 8104596:	2b00      	cmp	r3, #0
 8104598:	d003      	beq.n	81045a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810459a:	69fb      	ldr	r3, [r7, #28]
 810459c:	697a      	ldr	r2, [r7, #20]
 810459e:	631a      	str	r2, [r3, #48]	; 0x30
 81045a0:	e005      	b.n	81045ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 81045a2:	6978      	ldr	r0, [r7, #20]
 81045a4:	f7fe fe20 	bl	81031e8 <vPortFree>
 81045a8:	e001      	b.n	81045ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 81045aa:	2300      	movs	r3, #0
 81045ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 81045ae:	69fb      	ldr	r3, [r7, #28]
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d017      	beq.n	81045e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 81045b4:	69fb      	ldr	r3, [r7, #28]
 81045b6:	2200      	movs	r2, #0
 81045b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81045bc:	88fa      	ldrh	r2, [r7, #6]
 81045be:	2300      	movs	r3, #0
 81045c0:	9303      	str	r3, [sp, #12]
 81045c2:	69fb      	ldr	r3, [r7, #28]
 81045c4:	9302      	str	r3, [sp, #8]
 81045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81045c8:	9301      	str	r3, [sp, #4]
 81045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81045cc:	9300      	str	r3, [sp, #0]
 81045ce:	683b      	ldr	r3, [r7, #0]
 81045d0:	68b9      	ldr	r1, [r7, #8]
 81045d2:	68f8      	ldr	r0, [r7, #12]
 81045d4:	f000 f80e 	bl	81045f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81045d8:	69f8      	ldr	r0, [r7, #28]
 81045da:	f000 f893 	bl	8104704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81045de:	2301      	movs	r3, #1
 81045e0:	61bb      	str	r3, [r7, #24]
 81045e2:	e002      	b.n	81045ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81045e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81045e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81045ea:	69bb      	ldr	r3, [r7, #24]
	}
 81045ec:	4618      	mov	r0, r3
 81045ee:	3720      	adds	r7, #32
 81045f0:	46bd      	mov	sp, r7
 81045f2:	bd80      	pop	{r7, pc}

081045f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81045f4:	b580      	push	{r7, lr}
 81045f6:	b088      	sub	sp, #32
 81045f8:	af00      	add	r7, sp, #0
 81045fa:	60f8      	str	r0, [r7, #12]
 81045fc:	60b9      	str	r1, [r7, #8]
 81045fe:	607a      	str	r2, [r7, #4]
 8104600:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8104602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810460c:	3b01      	subs	r3, #1
 810460e:	009b      	lsls	r3, r3, #2
 8104610:	4413      	add	r3, r2
 8104612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8104614:	69bb      	ldr	r3, [r7, #24]
 8104616:	f023 0307 	bic.w	r3, r3, #7
 810461a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810461c:	69bb      	ldr	r3, [r7, #24]
 810461e:	f003 0307 	and.w	r3, r3, #7
 8104622:	2b00      	cmp	r3, #0
 8104624:	d00a      	beq.n	810463c <prvInitialiseNewTask+0x48>
	__asm volatile
 8104626:	f04f 0350 	mov.w	r3, #80	; 0x50
 810462a:	f383 8811 	msr	BASEPRI, r3
 810462e:	f3bf 8f6f 	isb	sy
 8104632:	f3bf 8f4f 	dsb	sy
 8104636:	617b      	str	r3, [r7, #20]
}
 8104638:	bf00      	nop
 810463a:	e7fe      	b.n	810463a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810463c:	68bb      	ldr	r3, [r7, #8]
 810463e:	2b00      	cmp	r3, #0
 8104640:	d01f      	beq.n	8104682 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8104642:	2300      	movs	r3, #0
 8104644:	61fb      	str	r3, [r7, #28]
 8104646:	e012      	b.n	810466e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8104648:	68ba      	ldr	r2, [r7, #8]
 810464a:	69fb      	ldr	r3, [r7, #28]
 810464c:	4413      	add	r3, r2
 810464e:	7819      	ldrb	r1, [r3, #0]
 8104650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104652:	69fb      	ldr	r3, [r7, #28]
 8104654:	4413      	add	r3, r2
 8104656:	3334      	adds	r3, #52	; 0x34
 8104658:	460a      	mov	r2, r1
 810465a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810465c:	68ba      	ldr	r2, [r7, #8]
 810465e:	69fb      	ldr	r3, [r7, #28]
 8104660:	4413      	add	r3, r2
 8104662:	781b      	ldrb	r3, [r3, #0]
 8104664:	2b00      	cmp	r3, #0
 8104666:	d006      	beq.n	8104676 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8104668:	69fb      	ldr	r3, [r7, #28]
 810466a:	3301      	adds	r3, #1
 810466c:	61fb      	str	r3, [r7, #28]
 810466e:	69fb      	ldr	r3, [r7, #28]
 8104670:	2b0f      	cmp	r3, #15
 8104672:	d9e9      	bls.n	8104648 <prvInitialiseNewTask+0x54>
 8104674:	e000      	b.n	8104678 <prvInitialiseNewTask+0x84>
			{
				break;
 8104676:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8104678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810467a:	2200      	movs	r2, #0
 810467c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8104680:	e003      	b.n	810468a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8104682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104684:	2200      	movs	r2, #0
 8104686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810468c:	2b06      	cmp	r3, #6
 810468e:	d901      	bls.n	8104694 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8104690:	2306      	movs	r3, #6
 8104692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8104694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810469c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810469e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 81046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046a2:	2200      	movs	r2, #0
 81046a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 81046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046a8:	3304      	adds	r3, #4
 81046aa:	4618      	mov	r0, r3
 81046ac:	f7fe feda 	bl	8103464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046b2:	3318      	adds	r3, #24
 81046b4:	4618      	mov	r0, r3
 81046b6:	f7fe fed5 	bl	8103464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81046be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81046c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81046c2:	f1c3 0207 	rsb	r2, r3, #7
 81046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81046ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046d2:	2200      	movs	r2, #0
 81046d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046d8:	2200      	movs	r2, #0
 81046da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81046de:	683a      	ldr	r2, [r7, #0]
 81046e0:	68f9      	ldr	r1, [r7, #12]
 81046e2:	69b8      	ldr	r0, [r7, #24]
 81046e4:	f7fe ff52 	bl	810358c <pxPortInitialiseStack>
 81046e8:	4602      	mov	r2, r0
 81046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81046f0:	2b00      	cmp	r3, #0
 81046f2:	d002      	beq.n	81046fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81046f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81046f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81046fa:	bf00      	nop
 81046fc:	3720      	adds	r7, #32
 81046fe:	46bd      	mov	sp, r7
 8104700:	bd80      	pop	{r7, pc}
	...

08104704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8104704:	b580      	push	{r7, lr}
 8104706:	b082      	sub	sp, #8
 8104708:	af00      	add	r7, sp, #0
 810470a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810470c:	f7ff f86a 	bl	81037e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8104710:	4b2a      	ldr	r3, [pc, #168]	; (81047bc <prvAddNewTaskToReadyList+0xb8>)
 8104712:	681b      	ldr	r3, [r3, #0]
 8104714:	3301      	adds	r3, #1
 8104716:	4a29      	ldr	r2, [pc, #164]	; (81047bc <prvAddNewTaskToReadyList+0xb8>)
 8104718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810471a:	4b29      	ldr	r3, [pc, #164]	; (81047c0 <prvAddNewTaskToReadyList+0xbc>)
 810471c:	681b      	ldr	r3, [r3, #0]
 810471e:	2b00      	cmp	r3, #0
 8104720:	d109      	bne.n	8104736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8104722:	4a27      	ldr	r2, [pc, #156]	; (81047c0 <prvAddNewTaskToReadyList+0xbc>)
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8104728:	4b24      	ldr	r3, [pc, #144]	; (81047bc <prvAddNewTaskToReadyList+0xb8>)
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	2b01      	cmp	r3, #1
 810472e:	d110      	bne.n	8104752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8104730:	f000 fbc6 	bl	8104ec0 <prvInitialiseTaskLists>
 8104734:	e00d      	b.n	8104752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8104736:	4b23      	ldr	r3, [pc, #140]	; (81047c4 <prvAddNewTaskToReadyList+0xc0>)
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	2b00      	cmp	r3, #0
 810473c:	d109      	bne.n	8104752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810473e:	4b20      	ldr	r3, [pc, #128]	; (81047c0 <prvAddNewTaskToReadyList+0xbc>)
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104748:	429a      	cmp	r2, r3
 810474a:	d802      	bhi.n	8104752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810474c:	4a1c      	ldr	r2, [pc, #112]	; (81047c0 <prvAddNewTaskToReadyList+0xbc>)
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8104752:	4b1d      	ldr	r3, [pc, #116]	; (81047c8 <prvAddNewTaskToReadyList+0xc4>)
 8104754:	681b      	ldr	r3, [r3, #0]
 8104756:	3301      	adds	r3, #1
 8104758:	4a1b      	ldr	r2, [pc, #108]	; (81047c8 <prvAddNewTaskToReadyList+0xc4>)
 810475a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104760:	2201      	movs	r2, #1
 8104762:	409a      	lsls	r2, r3
 8104764:	4b19      	ldr	r3, [pc, #100]	; (81047cc <prvAddNewTaskToReadyList+0xc8>)
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4313      	orrs	r3, r2
 810476a:	4a18      	ldr	r2, [pc, #96]	; (81047cc <prvAddNewTaskToReadyList+0xc8>)
 810476c:	6013      	str	r3, [r2, #0]
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104772:	4613      	mov	r3, r2
 8104774:	009b      	lsls	r3, r3, #2
 8104776:	4413      	add	r3, r2
 8104778:	009b      	lsls	r3, r3, #2
 810477a:	4a15      	ldr	r2, [pc, #84]	; (81047d0 <prvAddNewTaskToReadyList+0xcc>)
 810477c:	441a      	add	r2, r3
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	3304      	adds	r3, #4
 8104782:	4619      	mov	r1, r3
 8104784:	4610      	mov	r0, r2
 8104786:	f7fe fe7a 	bl	810347e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810478a:	f7ff f85b 	bl	8103844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810478e:	4b0d      	ldr	r3, [pc, #52]	; (81047c4 <prvAddNewTaskToReadyList+0xc0>)
 8104790:	681b      	ldr	r3, [r3, #0]
 8104792:	2b00      	cmp	r3, #0
 8104794:	d00e      	beq.n	81047b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8104796:	4b0a      	ldr	r3, [pc, #40]	; (81047c0 <prvAddNewTaskToReadyList+0xbc>)
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047a0:	429a      	cmp	r2, r3
 81047a2:	d207      	bcs.n	81047b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 81047a4:	4b0b      	ldr	r3, [pc, #44]	; (81047d4 <prvAddNewTaskToReadyList+0xd0>)
 81047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81047aa:	601a      	str	r2, [r3, #0]
 81047ac:	f3bf 8f4f 	dsb	sy
 81047b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81047b4:	bf00      	nop
 81047b6:	3708      	adds	r7, #8
 81047b8:	46bd      	mov	sp, r7
 81047ba:	bd80      	pop	{r7, pc}
 81047bc:	10003fb8 	.word	0x10003fb8
 81047c0:	10003eb8 	.word	0x10003eb8
 81047c4:	10003fc4 	.word	0x10003fc4
 81047c8:	10003fd4 	.word	0x10003fd4
 81047cc:	10003fc0 	.word	0x10003fc0
 81047d0:	10003ebc 	.word	0x10003ebc
 81047d4:	e000ed04 	.word	0xe000ed04

081047d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81047d8:	b580      	push	{r7, lr}
 81047da:	b084      	sub	sp, #16
 81047dc:	af00      	add	r7, sp, #0
 81047de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81047e0:	2300      	movs	r3, #0
 81047e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81047e4:	687b      	ldr	r3, [r7, #4]
 81047e6:	2b00      	cmp	r3, #0
 81047e8:	d017      	beq.n	810481a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81047ea:	4b13      	ldr	r3, [pc, #76]	; (8104838 <vTaskDelay+0x60>)
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	d00a      	beq.n	8104808 <vTaskDelay+0x30>
	__asm volatile
 81047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81047f6:	f383 8811 	msr	BASEPRI, r3
 81047fa:	f3bf 8f6f 	isb	sy
 81047fe:	f3bf 8f4f 	dsb	sy
 8104802:	60bb      	str	r3, [r7, #8]
}
 8104804:	bf00      	nop
 8104806:	e7fe      	b.n	8104806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8104808:	f000 f87a 	bl	8104900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810480c:	2100      	movs	r1, #0
 810480e:	6878      	ldr	r0, [r7, #4]
 8104810:	f000 fcb8 	bl	8105184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8104814:	f000 f882 	bl	810491c <xTaskResumeAll>
 8104818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	2b00      	cmp	r3, #0
 810481e:	d107      	bne.n	8104830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8104820:	4b06      	ldr	r3, [pc, #24]	; (810483c <vTaskDelay+0x64>)
 8104822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104826:	601a      	str	r2, [r3, #0]
 8104828:	f3bf 8f4f 	dsb	sy
 810482c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8104830:	bf00      	nop
 8104832:	3710      	adds	r7, #16
 8104834:	46bd      	mov	sp, r7
 8104836:	bd80      	pop	{r7, pc}
 8104838:	10003fe0 	.word	0x10003fe0
 810483c:	e000ed04 	.word	0xe000ed04

08104840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8104840:	b580      	push	{r7, lr}
 8104842:	b08a      	sub	sp, #40	; 0x28
 8104844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8104846:	2300      	movs	r3, #0
 8104848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810484a:	2300      	movs	r3, #0
 810484c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810484e:	463a      	mov	r2, r7
 8104850:	1d39      	adds	r1, r7, #4
 8104852:	f107 0308 	add.w	r3, r7, #8
 8104856:	4618      	mov	r0, r3
 8104858:	f7fb fd5e 	bl	8100318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810485c:	6839      	ldr	r1, [r7, #0]
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	68ba      	ldr	r2, [r7, #8]
 8104862:	9202      	str	r2, [sp, #8]
 8104864:	9301      	str	r3, [sp, #4]
 8104866:	2300      	movs	r3, #0
 8104868:	9300      	str	r3, [sp, #0]
 810486a:	2300      	movs	r3, #0
 810486c:	460a      	mov	r2, r1
 810486e:	491e      	ldr	r1, [pc, #120]	; (81048e8 <vTaskStartScheduler+0xa8>)
 8104870:	481e      	ldr	r0, [pc, #120]	; (81048ec <vTaskStartScheduler+0xac>)
 8104872:	f7ff fe1d 	bl	81044b0 <xTaskCreateStatic>
 8104876:	4603      	mov	r3, r0
 8104878:	4a1d      	ldr	r2, [pc, #116]	; (81048f0 <vTaskStartScheduler+0xb0>)
 810487a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810487c:	4b1c      	ldr	r3, [pc, #112]	; (81048f0 <vTaskStartScheduler+0xb0>)
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	2b00      	cmp	r3, #0
 8104882:	d002      	beq.n	810488a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8104884:	2301      	movs	r3, #1
 8104886:	617b      	str	r3, [r7, #20]
 8104888:	e001      	b.n	810488e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810488a:	2300      	movs	r3, #0
 810488c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810488e:	697b      	ldr	r3, [r7, #20]
 8104890:	2b01      	cmp	r3, #1
 8104892:	d116      	bne.n	81048c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8104894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104898:	f383 8811 	msr	BASEPRI, r3
 810489c:	f3bf 8f6f 	isb	sy
 81048a0:	f3bf 8f4f 	dsb	sy
 81048a4:	613b      	str	r3, [r7, #16]
}
 81048a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81048a8:	4b12      	ldr	r3, [pc, #72]	; (81048f4 <vTaskStartScheduler+0xb4>)
 81048aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81048ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 81048b0:	4b11      	ldr	r3, [pc, #68]	; (81048f8 <vTaskStartScheduler+0xb8>)
 81048b2:	2201      	movs	r2, #1
 81048b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 81048b6:	4b11      	ldr	r3, [pc, #68]	; (81048fc <vTaskStartScheduler+0xbc>)
 81048b8:	2200      	movs	r2, #0
 81048ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81048bc:	f7fe fef0 	bl	81036a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81048c0:	e00e      	b.n	81048e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81048c2:	697b      	ldr	r3, [r7, #20]
 81048c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81048c8:	d10a      	bne.n	81048e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 81048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 81048ce:	f383 8811 	msr	BASEPRI, r3
 81048d2:	f3bf 8f6f 	isb	sy
 81048d6:	f3bf 8f4f 	dsb	sy
 81048da:	60fb      	str	r3, [r7, #12]
}
 81048dc:	bf00      	nop
 81048de:	e7fe      	b.n	81048de <vTaskStartScheduler+0x9e>
}
 81048e0:	bf00      	nop
 81048e2:	3718      	adds	r7, #24
 81048e4:	46bd      	mov	sp, r7
 81048e6:	bd80      	pop	{r7, pc}
 81048e8:	08105528 	.word	0x08105528
 81048ec:	08104e91 	.word	0x08104e91
 81048f0:	10003fdc 	.word	0x10003fdc
 81048f4:	10003fd8 	.word	0x10003fd8
 81048f8:	10003fc4 	.word	0x10003fc4
 81048fc:	10003fbc 	.word	0x10003fbc

08104900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8104900:	b480      	push	{r7}
 8104902:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8104904:	4b04      	ldr	r3, [pc, #16]	; (8104918 <vTaskSuspendAll+0x18>)
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	3301      	adds	r3, #1
 810490a:	4a03      	ldr	r2, [pc, #12]	; (8104918 <vTaskSuspendAll+0x18>)
 810490c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810490e:	bf00      	nop
 8104910:	46bd      	mov	sp, r7
 8104912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104916:	4770      	bx	lr
 8104918:	10003fe0 	.word	0x10003fe0

0810491c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810491c:	b580      	push	{r7, lr}
 810491e:	b084      	sub	sp, #16
 8104920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8104922:	2300      	movs	r3, #0
 8104924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8104926:	2300      	movs	r3, #0
 8104928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810492a:	4b41      	ldr	r3, [pc, #260]	; (8104a30 <xTaskResumeAll+0x114>)
 810492c:	681b      	ldr	r3, [r3, #0]
 810492e:	2b00      	cmp	r3, #0
 8104930:	d10a      	bne.n	8104948 <xTaskResumeAll+0x2c>
	__asm volatile
 8104932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104936:	f383 8811 	msr	BASEPRI, r3
 810493a:	f3bf 8f6f 	isb	sy
 810493e:	f3bf 8f4f 	dsb	sy
 8104942:	603b      	str	r3, [r7, #0]
}
 8104944:	bf00      	nop
 8104946:	e7fe      	b.n	8104946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8104948:	f7fe ff4c 	bl	81037e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810494c:	4b38      	ldr	r3, [pc, #224]	; (8104a30 <xTaskResumeAll+0x114>)
 810494e:	681b      	ldr	r3, [r3, #0]
 8104950:	3b01      	subs	r3, #1
 8104952:	4a37      	ldr	r2, [pc, #220]	; (8104a30 <xTaskResumeAll+0x114>)
 8104954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104956:	4b36      	ldr	r3, [pc, #216]	; (8104a30 <xTaskResumeAll+0x114>)
 8104958:	681b      	ldr	r3, [r3, #0]
 810495a:	2b00      	cmp	r3, #0
 810495c:	d161      	bne.n	8104a22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810495e:	4b35      	ldr	r3, [pc, #212]	; (8104a34 <xTaskResumeAll+0x118>)
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	2b00      	cmp	r3, #0
 8104964:	d05d      	beq.n	8104a22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8104966:	e02e      	b.n	81049c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104968:	4b33      	ldr	r3, [pc, #204]	; (8104a38 <xTaskResumeAll+0x11c>)
 810496a:	68db      	ldr	r3, [r3, #12]
 810496c:	68db      	ldr	r3, [r3, #12]
 810496e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8104970:	68fb      	ldr	r3, [r7, #12]
 8104972:	3318      	adds	r3, #24
 8104974:	4618      	mov	r0, r3
 8104976:	f7fe fddf 	bl	8103538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810497a:	68fb      	ldr	r3, [r7, #12]
 810497c:	3304      	adds	r3, #4
 810497e:	4618      	mov	r0, r3
 8104980:	f7fe fdda 	bl	8103538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104988:	2201      	movs	r2, #1
 810498a:	409a      	lsls	r2, r3
 810498c:	4b2b      	ldr	r3, [pc, #172]	; (8104a3c <xTaskResumeAll+0x120>)
 810498e:	681b      	ldr	r3, [r3, #0]
 8104990:	4313      	orrs	r3, r2
 8104992:	4a2a      	ldr	r2, [pc, #168]	; (8104a3c <xTaskResumeAll+0x120>)
 8104994:	6013      	str	r3, [r2, #0]
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810499a:	4613      	mov	r3, r2
 810499c:	009b      	lsls	r3, r3, #2
 810499e:	4413      	add	r3, r2
 81049a0:	009b      	lsls	r3, r3, #2
 81049a2:	4a27      	ldr	r2, [pc, #156]	; (8104a40 <xTaskResumeAll+0x124>)
 81049a4:	441a      	add	r2, r3
 81049a6:	68fb      	ldr	r3, [r7, #12]
 81049a8:	3304      	adds	r3, #4
 81049aa:	4619      	mov	r1, r3
 81049ac:	4610      	mov	r0, r2
 81049ae:	f7fe fd66 	bl	810347e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81049b2:	68fb      	ldr	r3, [r7, #12]
 81049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81049b6:	4b23      	ldr	r3, [pc, #140]	; (8104a44 <xTaskResumeAll+0x128>)
 81049b8:	681b      	ldr	r3, [r3, #0]
 81049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049bc:	429a      	cmp	r2, r3
 81049be:	d302      	bcc.n	81049c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 81049c0:	4b21      	ldr	r3, [pc, #132]	; (8104a48 <xTaskResumeAll+0x12c>)
 81049c2:	2201      	movs	r2, #1
 81049c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81049c6:	4b1c      	ldr	r3, [pc, #112]	; (8104a38 <xTaskResumeAll+0x11c>)
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	2b00      	cmp	r3, #0
 81049cc:	d1cc      	bne.n	8104968 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81049ce:	68fb      	ldr	r3, [r7, #12]
 81049d0:	2b00      	cmp	r3, #0
 81049d2:	d001      	beq.n	81049d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81049d4:	f000 fb12 	bl	8104ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 81049d8:	4b1c      	ldr	r3, [pc, #112]	; (8104a4c <xTaskResumeAll+0x130>)
 81049da:	681b      	ldr	r3, [r3, #0]
 81049dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	2b00      	cmp	r3, #0
 81049e2:	d010      	beq.n	8104a06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81049e4:	f000 f836 	bl	8104a54 <xTaskIncrementTick>
 81049e8:	4603      	mov	r3, r0
 81049ea:	2b00      	cmp	r3, #0
 81049ec:	d002      	beq.n	81049f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 81049ee:	4b16      	ldr	r3, [pc, #88]	; (8104a48 <xTaskResumeAll+0x12c>)
 81049f0:	2201      	movs	r2, #1
 81049f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	3b01      	subs	r3, #1
 81049f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 81049fa:	687b      	ldr	r3, [r7, #4]
 81049fc:	2b00      	cmp	r3, #0
 81049fe:	d1f1      	bne.n	81049e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8104a00:	4b12      	ldr	r3, [pc, #72]	; (8104a4c <xTaskResumeAll+0x130>)
 8104a02:	2200      	movs	r2, #0
 8104a04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8104a06:	4b10      	ldr	r3, [pc, #64]	; (8104a48 <xTaskResumeAll+0x12c>)
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d009      	beq.n	8104a22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8104a0e:	2301      	movs	r3, #1
 8104a10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8104a12:	4b0f      	ldr	r3, [pc, #60]	; (8104a50 <xTaskResumeAll+0x134>)
 8104a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104a18:	601a      	str	r2, [r3, #0]
 8104a1a:	f3bf 8f4f 	dsb	sy
 8104a1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8104a22:	f7fe ff0f 	bl	8103844 <vPortExitCritical>

	return xAlreadyYielded;
 8104a26:	68bb      	ldr	r3, [r7, #8]
}
 8104a28:	4618      	mov	r0, r3
 8104a2a:	3710      	adds	r7, #16
 8104a2c:	46bd      	mov	sp, r7
 8104a2e:	bd80      	pop	{r7, pc}
 8104a30:	10003fe0 	.word	0x10003fe0
 8104a34:	10003fb8 	.word	0x10003fb8
 8104a38:	10003f78 	.word	0x10003f78
 8104a3c:	10003fc0 	.word	0x10003fc0
 8104a40:	10003ebc 	.word	0x10003ebc
 8104a44:	10003eb8 	.word	0x10003eb8
 8104a48:	10003fcc 	.word	0x10003fcc
 8104a4c:	10003fc8 	.word	0x10003fc8
 8104a50:	e000ed04 	.word	0xe000ed04

08104a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8104a54:	b580      	push	{r7, lr}
 8104a56:	b086      	sub	sp, #24
 8104a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8104a5a:	2300      	movs	r3, #0
 8104a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104a5e:	4b4e      	ldr	r3, [pc, #312]	; (8104b98 <xTaskIncrementTick+0x144>)
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	2b00      	cmp	r3, #0
 8104a64:	f040 808e 	bne.w	8104b84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8104a68:	4b4c      	ldr	r3, [pc, #304]	; (8104b9c <xTaskIncrementTick+0x148>)
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	3301      	adds	r3, #1
 8104a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8104a70:	4a4a      	ldr	r2, [pc, #296]	; (8104b9c <xTaskIncrementTick+0x148>)
 8104a72:	693b      	ldr	r3, [r7, #16]
 8104a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8104a76:	693b      	ldr	r3, [r7, #16]
 8104a78:	2b00      	cmp	r3, #0
 8104a7a:	d120      	bne.n	8104abe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8104a7c:	4b48      	ldr	r3, [pc, #288]	; (8104ba0 <xTaskIncrementTick+0x14c>)
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d00a      	beq.n	8104a9c <xTaskIncrementTick+0x48>
	__asm volatile
 8104a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a8a:	f383 8811 	msr	BASEPRI, r3
 8104a8e:	f3bf 8f6f 	isb	sy
 8104a92:	f3bf 8f4f 	dsb	sy
 8104a96:	603b      	str	r3, [r7, #0]
}
 8104a98:	bf00      	nop
 8104a9a:	e7fe      	b.n	8104a9a <xTaskIncrementTick+0x46>
 8104a9c:	4b40      	ldr	r3, [pc, #256]	; (8104ba0 <xTaskIncrementTick+0x14c>)
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	60fb      	str	r3, [r7, #12]
 8104aa2:	4b40      	ldr	r3, [pc, #256]	; (8104ba4 <xTaskIncrementTick+0x150>)
 8104aa4:	681b      	ldr	r3, [r3, #0]
 8104aa6:	4a3e      	ldr	r2, [pc, #248]	; (8104ba0 <xTaskIncrementTick+0x14c>)
 8104aa8:	6013      	str	r3, [r2, #0]
 8104aaa:	4a3e      	ldr	r2, [pc, #248]	; (8104ba4 <xTaskIncrementTick+0x150>)
 8104aac:	68fb      	ldr	r3, [r7, #12]
 8104aae:	6013      	str	r3, [r2, #0]
 8104ab0:	4b3d      	ldr	r3, [pc, #244]	; (8104ba8 <xTaskIncrementTick+0x154>)
 8104ab2:	681b      	ldr	r3, [r3, #0]
 8104ab4:	3301      	adds	r3, #1
 8104ab6:	4a3c      	ldr	r2, [pc, #240]	; (8104ba8 <xTaskIncrementTick+0x154>)
 8104ab8:	6013      	str	r3, [r2, #0]
 8104aba:	f000 fa9f 	bl	8104ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8104abe:	4b3b      	ldr	r3, [pc, #236]	; (8104bac <xTaskIncrementTick+0x158>)
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	693a      	ldr	r2, [r7, #16]
 8104ac4:	429a      	cmp	r2, r3
 8104ac6:	d348      	bcc.n	8104b5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104ac8:	4b35      	ldr	r3, [pc, #212]	; (8104ba0 <xTaskIncrementTick+0x14c>)
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	2b00      	cmp	r3, #0
 8104ad0:	d104      	bne.n	8104adc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8104ad2:	4b36      	ldr	r3, [pc, #216]	; (8104bac <xTaskIncrementTick+0x158>)
 8104ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8104ad8:	601a      	str	r2, [r3, #0]
					break;
 8104ada:	e03e      	b.n	8104b5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104adc:	4b30      	ldr	r3, [pc, #192]	; (8104ba0 <xTaskIncrementTick+0x14c>)
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	68db      	ldr	r3, [r3, #12]
 8104ae2:	68db      	ldr	r3, [r3, #12]
 8104ae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8104ae6:	68bb      	ldr	r3, [r7, #8]
 8104ae8:	685b      	ldr	r3, [r3, #4]
 8104aea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8104aec:	693a      	ldr	r2, [r7, #16]
 8104aee:	687b      	ldr	r3, [r7, #4]
 8104af0:	429a      	cmp	r2, r3
 8104af2:	d203      	bcs.n	8104afc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8104af4:	4a2d      	ldr	r2, [pc, #180]	; (8104bac <xTaskIncrementTick+0x158>)
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8104afa:	e02e      	b.n	8104b5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104afc:	68bb      	ldr	r3, [r7, #8]
 8104afe:	3304      	adds	r3, #4
 8104b00:	4618      	mov	r0, r3
 8104b02:	f7fe fd19 	bl	8103538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8104b06:	68bb      	ldr	r3, [r7, #8]
 8104b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	d004      	beq.n	8104b18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8104b0e:	68bb      	ldr	r3, [r7, #8]
 8104b10:	3318      	adds	r3, #24
 8104b12:	4618      	mov	r0, r3
 8104b14:	f7fe fd10 	bl	8103538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8104b18:	68bb      	ldr	r3, [r7, #8]
 8104b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b1c:	2201      	movs	r2, #1
 8104b1e:	409a      	lsls	r2, r3
 8104b20:	4b23      	ldr	r3, [pc, #140]	; (8104bb0 <xTaskIncrementTick+0x15c>)
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	4313      	orrs	r3, r2
 8104b26:	4a22      	ldr	r2, [pc, #136]	; (8104bb0 <xTaskIncrementTick+0x15c>)
 8104b28:	6013      	str	r3, [r2, #0]
 8104b2a:	68bb      	ldr	r3, [r7, #8]
 8104b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104b2e:	4613      	mov	r3, r2
 8104b30:	009b      	lsls	r3, r3, #2
 8104b32:	4413      	add	r3, r2
 8104b34:	009b      	lsls	r3, r3, #2
 8104b36:	4a1f      	ldr	r2, [pc, #124]	; (8104bb4 <xTaskIncrementTick+0x160>)
 8104b38:	441a      	add	r2, r3
 8104b3a:	68bb      	ldr	r3, [r7, #8]
 8104b3c:	3304      	adds	r3, #4
 8104b3e:	4619      	mov	r1, r3
 8104b40:	4610      	mov	r0, r2
 8104b42:	f7fe fc9c 	bl	810347e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8104b46:	68bb      	ldr	r3, [r7, #8]
 8104b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104b4a:	4b1b      	ldr	r3, [pc, #108]	; (8104bb8 <xTaskIncrementTick+0x164>)
 8104b4c:	681b      	ldr	r3, [r3, #0]
 8104b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b50:	429a      	cmp	r2, r3
 8104b52:	d3b9      	bcc.n	8104ac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8104b54:	2301      	movs	r3, #1
 8104b56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8104b58:	e7b6      	b.n	8104ac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8104b5a:	4b17      	ldr	r3, [pc, #92]	; (8104bb8 <xTaskIncrementTick+0x164>)
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104b60:	4914      	ldr	r1, [pc, #80]	; (8104bb4 <xTaskIncrementTick+0x160>)
 8104b62:	4613      	mov	r3, r2
 8104b64:	009b      	lsls	r3, r3, #2
 8104b66:	4413      	add	r3, r2
 8104b68:	009b      	lsls	r3, r3, #2
 8104b6a:	440b      	add	r3, r1
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	2b01      	cmp	r3, #1
 8104b70:	d901      	bls.n	8104b76 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8104b72:	2301      	movs	r3, #1
 8104b74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8104b76:	4b11      	ldr	r3, [pc, #68]	; (8104bbc <xTaskIncrementTick+0x168>)
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	2b00      	cmp	r3, #0
 8104b7c:	d007      	beq.n	8104b8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8104b7e:	2301      	movs	r3, #1
 8104b80:	617b      	str	r3, [r7, #20]
 8104b82:	e004      	b.n	8104b8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8104b84:	4b0e      	ldr	r3, [pc, #56]	; (8104bc0 <xTaskIncrementTick+0x16c>)
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	3301      	adds	r3, #1
 8104b8a:	4a0d      	ldr	r2, [pc, #52]	; (8104bc0 <xTaskIncrementTick+0x16c>)
 8104b8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8104b8e:	697b      	ldr	r3, [r7, #20]
}
 8104b90:	4618      	mov	r0, r3
 8104b92:	3718      	adds	r7, #24
 8104b94:	46bd      	mov	sp, r7
 8104b96:	bd80      	pop	{r7, pc}
 8104b98:	10003fe0 	.word	0x10003fe0
 8104b9c:	10003fbc 	.word	0x10003fbc
 8104ba0:	10003f70 	.word	0x10003f70
 8104ba4:	10003f74 	.word	0x10003f74
 8104ba8:	10003fd0 	.word	0x10003fd0
 8104bac:	10003fd8 	.word	0x10003fd8
 8104bb0:	10003fc0 	.word	0x10003fc0
 8104bb4:	10003ebc 	.word	0x10003ebc
 8104bb8:	10003eb8 	.word	0x10003eb8
 8104bbc:	10003fcc 	.word	0x10003fcc
 8104bc0:	10003fc8 	.word	0x10003fc8

08104bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8104bc4:	b480      	push	{r7}
 8104bc6:	b087      	sub	sp, #28
 8104bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8104bca:	4b27      	ldr	r3, [pc, #156]	; (8104c68 <vTaskSwitchContext+0xa4>)
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	2b00      	cmp	r3, #0
 8104bd0:	d003      	beq.n	8104bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8104bd2:	4b26      	ldr	r3, [pc, #152]	; (8104c6c <vTaskSwitchContext+0xa8>)
 8104bd4:	2201      	movs	r2, #1
 8104bd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8104bd8:	e03f      	b.n	8104c5a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8104bda:	4b24      	ldr	r3, [pc, #144]	; (8104c6c <vTaskSwitchContext+0xa8>)
 8104bdc:	2200      	movs	r2, #0
 8104bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104be0:	4b23      	ldr	r3, [pc, #140]	; (8104c70 <vTaskSwitchContext+0xac>)
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8104be6:	68fb      	ldr	r3, [r7, #12]
 8104be8:	fab3 f383 	clz	r3, r3
 8104bec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8104bee:	7afb      	ldrb	r3, [r7, #11]
 8104bf0:	f1c3 031f 	rsb	r3, r3, #31
 8104bf4:	617b      	str	r3, [r7, #20]
 8104bf6:	491f      	ldr	r1, [pc, #124]	; (8104c74 <vTaskSwitchContext+0xb0>)
 8104bf8:	697a      	ldr	r2, [r7, #20]
 8104bfa:	4613      	mov	r3, r2
 8104bfc:	009b      	lsls	r3, r3, #2
 8104bfe:	4413      	add	r3, r2
 8104c00:	009b      	lsls	r3, r3, #2
 8104c02:	440b      	add	r3, r1
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	2b00      	cmp	r3, #0
 8104c08:	d10a      	bne.n	8104c20 <vTaskSwitchContext+0x5c>
	__asm volatile
 8104c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c0e:	f383 8811 	msr	BASEPRI, r3
 8104c12:	f3bf 8f6f 	isb	sy
 8104c16:	f3bf 8f4f 	dsb	sy
 8104c1a:	607b      	str	r3, [r7, #4]
}
 8104c1c:	bf00      	nop
 8104c1e:	e7fe      	b.n	8104c1e <vTaskSwitchContext+0x5a>
 8104c20:	697a      	ldr	r2, [r7, #20]
 8104c22:	4613      	mov	r3, r2
 8104c24:	009b      	lsls	r3, r3, #2
 8104c26:	4413      	add	r3, r2
 8104c28:	009b      	lsls	r3, r3, #2
 8104c2a:	4a12      	ldr	r2, [pc, #72]	; (8104c74 <vTaskSwitchContext+0xb0>)
 8104c2c:	4413      	add	r3, r2
 8104c2e:	613b      	str	r3, [r7, #16]
 8104c30:	693b      	ldr	r3, [r7, #16]
 8104c32:	685b      	ldr	r3, [r3, #4]
 8104c34:	685a      	ldr	r2, [r3, #4]
 8104c36:	693b      	ldr	r3, [r7, #16]
 8104c38:	605a      	str	r2, [r3, #4]
 8104c3a:	693b      	ldr	r3, [r7, #16]
 8104c3c:	685a      	ldr	r2, [r3, #4]
 8104c3e:	693b      	ldr	r3, [r7, #16]
 8104c40:	3308      	adds	r3, #8
 8104c42:	429a      	cmp	r2, r3
 8104c44:	d104      	bne.n	8104c50 <vTaskSwitchContext+0x8c>
 8104c46:	693b      	ldr	r3, [r7, #16]
 8104c48:	685b      	ldr	r3, [r3, #4]
 8104c4a:	685a      	ldr	r2, [r3, #4]
 8104c4c:	693b      	ldr	r3, [r7, #16]
 8104c4e:	605a      	str	r2, [r3, #4]
 8104c50:	693b      	ldr	r3, [r7, #16]
 8104c52:	685b      	ldr	r3, [r3, #4]
 8104c54:	68db      	ldr	r3, [r3, #12]
 8104c56:	4a08      	ldr	r2, [pc, #32]	; (8104c78 <vTaskSwitchContext+0xb4>)
 8104c58:	6013      	str	r3, [r2, #0]
}
 8104c5a:	bf00      	nop
 8104c5c:	371c      	adds	r7, #28
 8104c5e:	46bd      	mov	sp, r7
 8104c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c64:	4770      	bx	lr
 8104c66:	bf00      	nop
 8104c68:	10003fe0 	.word	0x10003fe0
 8104c6c:	10003fcc 	.word	0x10003fcc
 8104c70:	10003fc0 	.word	0x10003fc0
 8104c74:	10003ebc 	.word	0x10003ebc
 8104c78:	10003eb8 	.word	0x10003eb8

08104c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8104c7c:	b580      	push	{r7, lr}
 8104c7e:	b084      	sub	sp, #16
 8104c80:	af00      	add	r7, sp, #0
 8104c82:	6078      	str	r0, [r7, #4]
 8104c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8104c86:	687b      	ldr	r3, [r7, #4]
 8104c88:	2b00      	cmp	r3, #0
 8104c8a:	d10a      	bne.n	8104ca2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8104c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104c90:	f383 8811 	msr	BASEPRI, r3
 8104c94:	f3bf 8f6f 	isb	sy
 8104c98:	f3bf 8f4f 	dsb	sy
 8104c9c:	60fb      	str	r3, [r7, #12]
}
 8104c9e:	bf00      	nop
 8104ca0:	e7fe      	b.n	8104ca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8104ca2:	4b07      	ldr	r3, [pc, #28]	; (8104cc0 <vTaskPlaceOnEventList+0x44>)
 8104ca4:	681b      	ldr	r3, [r3, #0]
 8104ca6:	3318      	adds	r3, #24
 8104ca8:	4619      	mov	r1, r3
 8104caa:	6878      	ldr	r0, [r7, #4]
 8104cac:	f7fe fc0b 	bl	81034c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8104cb0:	2101      	movs	r1, #1
 8104cb2:	6838      	ldr	r0, [r7, #0]
 8104cb4:	f000 fa66 	bl	8105184 <prvAddCurrentTaskToDelayedList>
}
 8104cb8:	bf00      	nop
 8104cba:	3710      	adds	r7, #16
 8104cbc:	46bd      	mov	sp, r7
 8104cbe:	bd80      	pop	{r7, pc}
 8104cc0:	10003eb8 	.word	0x10003eb8

08104cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8104cc4:	b580      	push	{r7, lr}
 8104cc6:	b086      	sub	sp, #24
 8104cc8:	af00      	add	r7, sp, #0
 8104cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	68db      	ldr	r3, [r3, #12]
 8104cd0:	68db      	ldr	r3, [r3, #12]
 8104cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8104cd4:	693b      	ldr	r3, [r7, #16]
 8104cd6:	2b00      	cmp	r3, #0
 8104cd8:	d10a      	bne.n	8104cf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8104cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104cde:	f383 8811 	msr	BASEPRI, r3
 8104ce2:	f3bf 8f6f 	isb	sy
 8104ce6:	f3bf 8f4f 	dsb	sy
 8104cea:	60fb      	str	r3, [r7, #12]
}
 8104cec:	bf00      	nop
 8104cee:	e7fe      	b.n	8104cee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8104cf0:	693b      	ldr	r3, [r7, #16]
 8104cf2:	3318      	adds	r3, #24
 8104cf4:	4618      	mov	r0, r3
 8104cf6:	f7fe fc1f 	bl	8103538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8104cfa:	4b1d      	ldr	r3, [pc, #116]	; (8104d70 <xTaskRemoveFromEventList+0xac>)
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	2b00      	cmp	r3, #0
 8104d00:	d11c      	bne.n	8104d3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8104d02:	693b      	ldr	r3, [r7, #16]
 8104d04:	3304      	adds	r3, #4
 8104d06:	4618      	mov	r0, r3
 8104d08:	f7fe fc16 	bl	8103538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8104d0c:	693b      	ldr	r3, [r7, #16]
 8104d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d10:	2201      	movs	r2, #1
 8104d12:	409a      	lsls	r2, r3
 8104d14:	4b17      	ldr	r3, [pc, #92]	; (8104d74 <xTaskRemoveFromEventList+0xb0>)
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	4313      	orrs	r3, r2
 8104d1a:	4a16      	ldr	r2, [pc, #88]	; (8104d74 <xTaskRemoveFromEventList+0xb0>)
 8104d1c:	6013      	str	r3, [r2, #0]
 8104d1e:	693b      	ldr	r3, [r7, #16]
 8104d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d22:	4613      	mov	r3, r2
 8104d24:	009b      	lsls	r3, r3, #2
 8104d26:	4413      	add	r3, r2
 8104d28:	009b      	lsls	r3, r3, #2
 8104d2a:	4a13      	ldr	r2, [pc, #76]	; (8104d78 <xTaskRemoveFromEventList+0xb4>)
 8104d2c:	441a      	add	r2, r3
 8104d2e:	693b      	ldr	r3, [r7, #16]
 8104d30:	3304      	adds	r3, #4
 8104d32:	4619      	mov	r1, r3
 8104d34:	4610      	mov	r0, r2
 8104d36:	f7fe fba2 	bl	810347e <vListInsertEnd>
 8104d3a:	e005      	b.n	8104d48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8104d3c:	693b      	ldr	r3, [r7, #16]
 8104d3e:	3318      	adds	r3, #24
 8104d40:	4619      	mov	r1, r3
 8104d42:	480e      	ldr	r0, [pc, #56]	; (8104d7c <xTaskRemoveFromEventList+0xb8>)
 8104d44:	f7fe fb9b 	bl	810347e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8104d48:	693b      	ldr	r3, [r7, #16]
 8104d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104d4c:	4b0c      	ldr	r3, [pc, #48]	; (8104d80 <xTaskRemoveFromEventList+0xbc>)
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d52:	429a      	cmp	r2, r3
 8104d54:	d905      	bls.n	8104d62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8104d56:	2301      	movs	r3, #1
 8104d58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8104d5a:	4b0a      	ldr	r3, [pc, #40]	; (8104d84 <xTaskRemoveFromEventList+0xc0>)
 8104d5c:	2201      	movs	r2, #1
 8104d5e:	601a      	str	r2, [r3, #0]
 8104d60:	e001      	b.n	8104d66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8104d62:	2300      	movs	r3, #0
 8104d64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8104d66:	697b      	ldr	r3, [r7, #20]
}
 8104d68:	4618      	mov	r0, r3
 8104d6a:	3718      	adds	r7, #24
 8104d6c:	46bd      	mov	sp, r7
 8104d6e:	bd80      	pop	{r7, pc}
 8104d70:	10003fe0 	.word	0x10003fe0
 8104d74:	10003fc0 	.word	0x10003fc0
 8104d78:	10003ebc 	.word	0x10003ebc
 8104d7c:	10003f78 	.word	0x10003f78
 8104d80:	10003eb8 	.word	0x10003eb8
 8104d84:	10003fcc 	.word	0x10003fcc

08104d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8104d88:	b480      	push	{r7}
 8104d8a:	b083      	sub	sp, #12
 8104d8c:	af00      	add	r7, sp, #0
 8104d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8104d90:	4b06      	ldr	r3, [pc, #24]	; (8104dac <vTaskInternalSetTimeOutState+0x24>)
 8104d92:	681a      	ldr	r2, [r3, #0]
 8104d94:	687b      	ldr	r3, [r7, #4]
 8104d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8104d98:	4b05      	ldr	r3, [pc, #20]	; (8104db0 <vTaskInternalSetTimeOutState+0x28>)
 8104d9a:	681a      	ldr	r2, [r3, #0]
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	605a      	str	r2, [r3, #4]
}
 8104da0:	bf00      	nop
 8104da2:	370c      	adds	r7, #12
 8104da4:	46bd      	mov	sp, r7
 8104da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104daa:	4770      	bx	lr
 8104dac:	10003fd0 	.word	0x10003fd0
 8104db0:	10003fbc 	.word	0x10003fbc

08104db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8104db4:	b580      	push	{r7, lr}
 8104db6:	b088      	sub	sp, #32
 8104db8:	af00      	add	r7, sp, #0
 8104dba:	6078      	str	r0, [r7, #4]
 8104dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8104dbe:	687b      	ldr	r3, [r7, #4]
 8104dc0:	2b00      	cmp	r3, #0
 8104dc2:	d10a      	bne.n	8104dda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8104dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104dc8:	f383 8811 	msr	BASEPRI, r3
 8104dcc:	f3bf 8f6f 	isb	sy
 8104dd0:	f3bf 8f4f 	dsb	sy
 8104dd4:	613b      	str	r3, [r7, #16]
}
 8104dd6:	bf00      	nop
 8104dd8:	e7fe      	b.n	8104dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8104dda:	683b      	ldr	r3, [r7, #0]
 8104ddc:	2b00      	cmp	r3, #0
 8104dde:	d10a      	bne.n	8104df6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8104de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104de4:	f383 8811 	msr	BASEPRI, r3
 8104de8:	f3bf 8f6f 	isb	sy
 8104dec:	f3bf 8f4f 	dsb	sy
 8104df0:	60fb      	str	r3, [r7, #12]
}
 8104df2:	bf00      	nop
 8104df4:	e7fe      	b.n	8104df4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8104df6:	f7fe fcf5 	bl	81037e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8104dfa:	4b1d      	ldr	r3, [pc, #116]	; (8104e70 <xTaskCheckForTimeOut+0xbc>)
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	685b      	ldr	r3, [r3, #4]
 8104e04:	69ba      	ldr	r2, [r7, #24]
 8104e06:	1ad3      	subs	r3, r2, r3
 8104e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8104e0a:	683b      	ldr	r3, [r7, #0]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8104e12:	d102      	bne.n	8104e1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8104e14:	2300      	movs	r3, #0
 8104e16:	61fb      	str	r3, [r7, #28]
 8104e18:	e023      	b.n	8104e62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8104e1a:	687b      	ldr	r3, [r7, #4]
 8104e1c:	681a      	ldr	r2, [r3, #0]
 8104e1e:	4b15      	ldr	r3, [pc, #84]	; (8104e74 <xTaskCheckForTimeOut+0xc0>)
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	429a      	cmp	r2, r3
 8104e24:	d007      	beq.n	8104e36 <xTaskCheckForTimeOut+0x82>
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	685b      	ldr	r3, [r3, #4]
 8104e2a:	69ba      	ldr	r2, [r7, #24]
 8104e2c:	429a      	cmp	r2, r3
 8104e2e:	d302      	bcc.n	8104e36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8104e30:	2301      	movs	r3, #1
 8104e32:	61fb      	str	r3, [r7, #28]
 8104e34:	e015      	b.n	8104e62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8104e36:	683b      	ldr	r3, [r7, #0]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	697a      	ldr	r2, [r7, #20]
 8104e3c:	429a      	cmp	r2, r3
 8104e3e:	d20b      	bcs.n	8104e58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8104e40:	683b      	ldr	r3, [r7, #0]
 8104e42:	681a      	ldr	r2, [r3, #0]
 8104e44:	697b      	ldr	r3, [r7, #20]
 8104e46:	1ad2      	subs	r2, r2, r3
 8104e48:	683b      	ldr	r3, [r7, #0]
 8104e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8104e4c:	6878      	ldr	r0, [r7, #4]
 8104e4e:	f7ff ff9b 	bl	8104d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8104e52:	2300      	movs	r3, #0
 8104e54:	61fb      	str	r3, [r7, #28]
 8104e56:	e004      	b.n	8104e62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8104e58:	683b      	ldr	r3, [r7, #0]
 8104e5a:	2200      	movs	r2, #0
 8104e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8104e5e:	2301      	movs	r3, #1
 8104e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8104e62:	f7fe fcef 	bl	8103844 <vPortExitCritical>

	return xReturn;
 8104e66:	69fb      	ldr	r3, [r7, #28]
}
 8104e68:	4618      	mov	r0, r3
 8104e6a:	3720      	adds	r7, #32
 8104e6c:	46bd      	mov	sp, r7
 8104e6e:	bd80      	pop	{r7, pc}
 8104e70:	10003fbc 	.word	0x10003fbc
 8104e74:	10003fd0 	.word	0x10003fd0

08104e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8104e78:	b480      	push	{r7}
 8104e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8104e7c:	4b03      	ldr	r3, [pc, #12]	; (8104e8c <vTaskMissedYield+0x14>)
 8104e7e:	2201      	movs	r2, #1
 8104e80:	601a      	str	r2, [r3, #0]
}
 8104e82:	bf00      	nop
 8104e84:	46bd      	mov	sp, r7
 8104e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e8a:	4770      	bx	lr
 8104e8c:	10003fcc 	.word	0x10003fcc

08104e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8104e90:	b580      	push	{r7, lr}
 8104e92:	b082      	sub	sp, #8
 8104e94:	af00      	add	r7, sp, #0
 8104e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8104e98:	f000 f852 	bl	8104f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8104e9c:	4b06      	ldr	r3, [pc, #24]	; (8104eb8 <prvIdleTask+0x28>)
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	2b01      	cmp	r3, #1
 8104ea2:	d9f9      	bls.n	8104e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8104ea4:	4b05      	ldr	r3, [pc, #20]	; (8104ebc <prvIdleTask+0x2c>)
 8104ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8104eaa:	601a      	str	r2, [r3, #0]
 8104eac:	f3bf 8f4f 	dsb	sy
 8104eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8104eb4:	e7f0      	b.n	8104e98 <prvIdleTask+0x8>
 8104eb6:	bf00      	nop
 8104eb8:	10003ebc 	.word	0x10003ebc
 8104ebc:	e000ed04 	.word	0xe000ed04

08104ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8104ec0:	b580      	push	{r7, lr}
 8104ec2:	b082      	sub	sp, #8
 8104ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104ec6:	2300      	movs	r3, #0
 8104ec8:	607b      	str	r3, [r7, #4]
 8104eca:	e00c      	b.n	8104ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8104ecc:	687a      	ldr	r2, [r7, #4]
 8104ece:	4613      	mov	r3, r2
 8104ed0:	009b      	lsls	r3, r3, #2
 8104ed2:	4413      	add	r3, r2
 8104ed4:	009b      	lsls	r3, r3, #2
 8104ed6:	4a12      	ldr	r2, [pc, #72]	; (8104f20 <prvInitialiseTaskLists+0x60>)
 8104ed8:	4413      	add	r3, r2
 8104eda:	4618      	mov	r0, r3
 8104edc:	f7fe faa2 	bl	8103424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	3301      	adds	r3, #1
 8104ee4:	607b      	str	r3, [r7, #4]
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	2b06      	cmp	r3, #6
 8104eea:	d9ef      	bls.n	8104ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8104eec:	480d      	ldr	r0, [pc, #52]	; (8104f24 <prvInitialiseTaskLists+0x64>)
 8104eee:	f7fe fa99 	bl	8103424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8104ef2:	480d      	ldr	r0, [pc, #52]	; (8104f28 <prvInitialiseTaskLists+0x68>)
 8104ef4:	f7fe fa96 	bl	8103424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8104ef8:	480c      	ldr	r0, [pc, #48]	; (8104f2c <prvInitialiseTaskLists+0x6c>)
 8104efa:	f7fe fa93 	bl	8103424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8104efe:	480c      	ldr	r0, [pc, #48]	; (8104f30 <prvInitialiseTaskLists+0x70>)
 8104f00:	f7fe fa90 	bl	8103424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8104f04:	480b      	ldr	r0, [pc, #44]	; (8104f34 <prvInitialiseTaskLists+0x74>)
 8104f06:	f7fe fa8d 	bl	8103424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8104f0a:	4b0b      	ldr	r3, [pc, #44]	; (8104f38 <prvInitialiseTaskLists+0x78>)
 8104f0c:	4a05      	ldr	r2, [pc, #20]	; (8104f24 <prvInitialiseTaskLists+0x64>)
 8104f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8104f10:	4b0a      	ldr	r3, [pc, #40]	; (8104f3c <prvInitialiseTaskLists+0x7c>)
 8104f12:	4a05      	ldr	r2, [pc, #20]	; (8104f28 <prvInitialiseTaskLists+0x68>)
 8104f14:	601a      	str	r2, [r3, #0]
}
 8104f16:	bf00      	nop
 8104f18:	3708      	adds	r7, #8
 8104f1a:	46bd      	mov	sp, r7
 8104f1c:	bd80      	pop	{r7, pc}
 8104f1e:	bf00      	nop
 8104f20:	10003ebc 	.word	0x10003ebc
 8104f24:	10003f48 	.word	0x10003f48
 8104f28:	10003f5c 	.word	0x10003f5c
 8104f2c:	10003f78 	.word	0x10003f78
 8104f30:	10003f8c 	.word	0x10003f8c
 8104f34:	10003fa4 	.word	0x10003fa4
 8104f38:	10003f70 	.word	0x10003f70
 8104f3c:	10003f74 	.word	0x10003f74

08104f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8104f40:	b580      	push	{r7, lr}
 8104f42:	b082      	sub	sp, #8
 8104f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104f46:	e019      	b.n	8104f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8104f48:	f7fe fc4c 	bl	81037e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8104f4c:	4b10      	ldr	r3, [pc, #64]	; (8104f90 <prvCheckTasksWaitingTermination+0x50>)
 8104f4e:	68db      	ldr	r3, [r3, #12]
 8104f50:	68db      	ldr	r3, [r3, #12]
 8104f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8104f54:	687b      	ldr	r3, [r7, #4]
 8104f56:	3304      	adds	r3, #4
 8104f58:	4618      	mov	r0, r3
 8104f5a:	f7fe faed 	bl	8103538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8104f5e:	4b0d      	ldr	r3, [pc, #52]	; (8104f94 <prvCheckTasksWaitingTermination+0x54>)
 8104f60:	681b      	ldr	r3, [r3, #0]
 8104f62:	3b01      	subs	r3, #1
 8104f64:	4a0b      	ldr	r2, [pc, #44]	; (8104f94 <prvCheckTasksWaitingTermination+0x54>)
 8104f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8104f68:	4b0b      	ldr	r3, [pc, #44]	; (8104f98 <prvCheckTasksWaitingTermination+0x58>)
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	3b01      	subs	r3, #1
 8104f6e:	4a0a      	ldr	r2, [pc, #40]	; (8104f98 <prvCheckTasksWaitingTermination+0x58>)
 8104f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8104f72:	f7fe fc67 	bl	8103844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8104f76:	6878      	ldr	r0, [r7, #4]
 8104f78:	f000 f810 	bl	8104f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8104f7c:	4b06      	ldr	r3, [pc, #24]	; (8104f98 <prvCheckTasksWaitingTermination+0x58>)
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	2b00      	cmp	r3, #0
 8104f82:	d1e1      	bne.n	8104f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8104f84:	bf00      	nop
 8104f86:	bf00      	nop
 8104f88:	3708      	adds	r7, #8
 8104f8a:	46bd      	mov	sp, r7
 8104f8c:	bd80      	pop	{r7, pc}
 8104f8e:	bf00      	nop
 8104f90:	10003f8c 	.word	0x10003f8c
 8104f94:	10003fb8 	.word	0x10003fb8
 8104f98:	10003fa0 	.word	0x10003fa0

08104f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8104f9c:	b580      	push	{r7, lr}
 8104f9e:	b084      	sub	sp, #16
 8104fa0:	af00      	add	r7, sp, #0
 8104fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8104faa:	2b00      	cmp	r3, #0
 8104fac:	d108      	bne.n	8104fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8104fae:	687b      	ldr	r3, [r7, #4]
 8104fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104fb2:	4618      	mov	r0, r3
 8104fb4:	f7fe f918 	bl	81031e8 <vPortFree>
				vPortFree( pxTCB );
 8104fb8:	6878      	ldr	r0, [r7, #4]
 8104fba:	f7fe f915 	bl	81031e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8104fbe:	e018      	b.n	8104ff2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8104fc6:	2b01      	cmp	r3, #1
 8104fc8:	d103      	bne.n	8104fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8104fca:	6878      	ldr	r0, [r7, #4]
 8104fcc:	f7fe f90c 	bl	81031e8 <vPortFree>
	}
 8104fd0:	e00f      	b.n	8104ff2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8104fd2:	687b      	ldr	r3, [r7, #4]
 8104fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8104fd8:	2b02      	cmp	r3, #2
 8104fda:	d00a      	beq.n	8104ff2 <prvDeleteTCB+0x56>
	__asm volatile
 8104fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104fe0:	f383 8811 	msr	BASEPRI, r3
 8104fe4:	f3bf 8f6f 	isb	sy
 8104fe8:	f3bf 8f4f 	dsb	sy
 8104fec:	60fb      	str	r3, [r7, #12]
}
 8104fee:	bf00      	nop
 8104ff0:	e7fe      	b.n	8104ff0 <prvDeleteTCB+0x54>
	}
 8104ff2:	bf00      	nop
 8104ff4:	3710      	adds	r7, #16
 8104ff6:	46bd      	mov	sp, r7
 8104ff8:	bd80      	pop	{r7, pc}
	...

08104ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8104ffc:	b480      	push	{r7}
 8104ffe:	b083      	sub	sp, #12
 8105000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8105002:	4b0c      	ldr	r3, [pc, #48]	; (8105034 <prvResetNextTaskUnblockTime+0x38>)
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	2b00      	cmp	r3, #0
 810500a:	d104      	bne.n	8105016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810500c:	4b0a      	ldr	r3, [pc, #40]	; (8105038 <prvResetNextTaskUnblockTime+0x3c>)
 810500e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8105012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8105014:	e008      	b.n	8105028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8105016:	4b07      	ldr	r3, [pc, #28]	; (8105034 <prvResetNextTaskUnblockTime+0x38>)
 8105018:	681b      	ldr	r3, [r3, #0]
 810501a:	68db      	ldr	r3, [r3, #12]
 810501c:	68db      	ldr	r3, [r3, #12]
 810501e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8105020:	687b      	ldr	r3, [r7, #4]
 8105022:	685b      	ldr	r3, [r3, #4]
 8105024:	4a04      	ldr	r2, [pc, #16]	; (8105038 <prvResetNextTaskUnblockTime+0x3c>)
 8105026:	6013      	str	r3, [r2, #0]
}
 8105028:	bf00      	nop
 810502a:	370c      	adds	r7, #12
 810502c:	46bd      	mov	sp, r7
 810502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105032:	4770      	bx	lr
 8105034:	10003f70 	.word	0x10003f70
 8105038:	10003fd8 	.word	0x10003fd8

0810503c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810503c:	b480      	push	{r7}
 810503e:	b083      	sub	sp, #12
 8105040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8105042:	4b0b      	ldr	r3, [pc, #44]	; (8105070 <xTaskGetSchedulerState+0x34>)
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	2b00      	cmp	r3, #0
 8105048:	d102      	bne.n	8105050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810504a:	2301      	movs	r3, #1
 810504c:	607b      	str	r3, [r7, #4]
 810504e:	e008      	b.n	8105062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8105050:	4b08      	ldr	r3, [pc, #32]	; (8105074 <xTaskGetSchedulerState+0x38>)
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	2b00      	cmp	r3, #0
 8105056:	d102      	bne.n	810505e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8105058:	2302      	movs	r3, #2
 810505a:	607b      	str	r3, [r7, #4]
 810505c:	e001      	b.n	8105062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810505e:	2300      	movs	r3, #0
 8105060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8105062:	687b      	ldr	r3, [r7, #4]
	}
 8105064:	4618      	mov	r0, r3
 8105066:	370c      	adds	r7, #12
 8105068:	46bd      	mov	sp, r7
 810506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810506e:	4770      	bx	lr
 8105070:	10003fc4 	.word	0x10003fc4
 8105074:	10003fe0 	.word	0x10003fe0

08105078 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8105078:	b580      	push	{r7, lr}
 810507a:	b086      	sub	sp, #24
 810507c:	af00      	add	r7, sp, #0
 810507e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8105084:	2300      	movs	r3, #0
 8105086:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	2b00      	cmp	r3, #0
 810508c:	d06e      	beq.n	810516c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810508e:	4b3a      	ldr	r3, [pc, #232]	; (8105178 <xTaskPriorityDisinherit+0x100>)
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	693a      	ldr	r2, [r7, #16]
 8105094:	429a      	cmp	r2, r3
 8105096:	d00a      	beq.n	81050ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8105098:	f04f 0350 	mov.w	r3, #80	; 0x50
 810509c:	f383 8811 	msr	BASEPRI, r3
 81050a0:	f3bf 8f6f 	isb	sy
 81050a4:	f3bf 8f4f 	dsb	sy
 81050a8:	60fb      	str	r3, [r7, #12]
}
 81050aa:	bf00      	nop
 81050ac:	e7fe      	b.n	81050ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 81050ae:	693b      	ldr	r3, [r7, #16]
 81050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81050b2:	2b00      	cmp	r3, #0
 81050b4:	d10a      	bne.n	81050cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 81050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81050ba:	f383 8811 	msr	BASEPRI, r3
 81050be:	f3bf 8f6f 	isb	sy
 81050c2:	f3bf 8f4f 	dsb	sy
 81050c6:	60bb      	str	r3, [r7, #8]
}
 81050c8:	bf00      	nop
 81050ca:	e7fe      	b.n	81050ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 81050cc:	693b      	ldr	r3, [r7, #16]
 81050ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81050d0:	1e5a      	subs	r2, r3, #1
 81050d2:	693b      	ldr	r3, [r7, #16]
 81050d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 81050d6:	693b      	ldr	r3, [r7, #16]
 81050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81050da:	693b      	ldr	r3, [r7, #16]
 81050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81050de:	429a      	cmp	r2, r3
 81050e0:	d044      	beq.n	810516c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 81050e2:	693b      	ldr	r3, [r7, #16]
 81050e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81050e6:	2b00      	cmp	r3, #0
 81050e8:	d140      	bne.n	810516c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81050ea:	693b      	ldr	r3, [r7, #16]
 81050ec:	3304      	adds	r3, #4
 81050ee:	4618      	mov	r0, r3
 81050f0:	f7fe fa22 	bl	8103538 <uxListRemove>
 81050f4:	4603      	mov	r3, r0
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	d115      	bne.n	8105126 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 81050fa:	693b      	ldr	r3, [r7, #16]
 81050fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81050fe:	491f      	ldr	r1, [pc, #124]	; (810517c <xTaskPriorityDisinherit+0x104>)
 8105100:	4613      	mov	r3, r2
 8105102:	009b      	lsls	r3, r3, #2
 8105104:	4413      	add	r3, r2
 8105106:	009b      	lsls	r3, r3, #2
 8105108:	440b      	add	r3, r1
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	2b00      	cmp	r3, #0
 810510e:	d10a      	bne.n	8105126 <xTaskPriorityDisinherit+0xae>
 8105110:	693b      	ldr	r3, [r7, #16]
 8105112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105114:	2201      	movs	r2, #1
 8105116:	fa02 f303 	lsl.w	r3, r2, r3
 810511a:	43da      	mvns	r2, r3
 810511c:	4b18      	ldr	r3, [pc, #96]	; (8105180 <xTaskPriorityDisinherit+0x108>)
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	4013      	ands	r3, r2
 8105122:	4a17      	ldr	r2, [pc, #92]	; (8105180 <xTaskPriorityDisinherit+0x108>)
 8105124:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8105126:	693b      	ldr	r3, [r7, #16]
 8105128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810512a:	693b      	ldr	r3, [r7, #16]
 810512c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810512e:	693b      	ldr	r3, [r7, #16]
 8105130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105132:	f1c3 0207 	rsb	r2, r3, #7
 8105136:	693b      	ldr	r3, [r7, #16]
 8105138:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810513a:	693b      	ldr	r3, [r7, #16]
 810513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810513e:	2201      	movs	r2, #1
 8105140:	409a      	lsls	r2, r3
 8105142:	4b0f      	ldr	r3, [pc, #60]	; (8105180 <xTaskPriorityDisinherit+0x108>)
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	4313      	orrs	r3, r2
 8105148:	4a0d      	ldr	r2, [pc, #52]	; (8105180 <xTaskPriorityDisinherit+0x108>)
 810514a:	6013      	str	r3, [r2, #0]
 810514c:	693b      	ldr	r3, [r7, #16]
 810514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105150:	4613      	mov	r3, r2
 8105152:	009b      	lsls	r3, r3, #2
 8105154:	4413      	add	r3, r2
 8105156:	009b      	lsls	r3, r3, #2
 8105158:	4a08      	ldr	r2, [pc, #32]	; (810517c <xTaskPriorityDisinherit+0x104>)
 810515a:	441a      	add	r2, r3
 810515c:	693b      	ldr	r3, [r7, #16]
 810515e:	3304      	adds	r3, #4
 8105160:	4619      	mov	r1, r3
 8105162:	4610      	mov	r0, r2
 8105164:	f7fe f98b 	bl	810347e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8105168:	2301      	movs	r3, #1
 810516a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810516c:	697b      	ldr	r3, [r7, #20]
	}
 810516e:	4618      	mov	r0, r3
 8105170:	3718      	adds	r7, #24
 8105172:	46bd      	mov	sp, r7
 8105174:	bd80      	pop	{r7, pc}
 8105176:	bf00      	nop
 8105178:	10003eb8 	.word	0x10003eb8
 810517c:	10003ebc 	.word	0x10003ebc
 8105180:	10003fc0 	.word	0x10003fc0

08105184 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8105184:	b580      	push	{r7, lr}
 8105186:	b084      	sub	sp, #16
 8105188:	af00      	add	r7, sp, #0
 810518a:	6078      	str	r0, [r7, #4]
 810518c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810518e:	4b29      	ldr	r3, [pc, #164]	; (8105234 <prvAddCurrentTaskToDelayedList+0xb0>)
 8105190:	681b      	ldr	r3, [r3, #0]
 8105192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8105194:	4b28      	ldr	r3, [pc, #160]	; (8105238 <prvAddCurrentTaskToDelayedList+0xb4>)
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	3304      	adds	r3, #4
 810519a:	4618      	mov	r0, r3
 810519c:	f7fe f9cc 	bl	8103538 <uxListRemove>
 81051a0:	4603      	mov	r3, r0
 81051a2:	2b00      	cmp	r3, #0
 81051a4:	d10b      	bne.n	81051be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 81051a6:	4b24      	ldr	r3, [pc, #144]	; (8105238 <prvAddCurrentTaskToDelayedList+0xb4>)
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051ac:	2201      	movs	r2, #1
 81051ae:	fa02 f303 	lsl.w	r3, r2, r3
 81051b2:	43da      	mvns	r2, r3
 81051b4:	4b21      	ldr	r3, [pc, #132]	; (810523c <prvAddCurrentTaskToDelayedList+0xb8>)
 81051b6:	681b      	ldr	r3, [r3, #0]
 81051b8:	4013      	ands	r3, r2
 81051ba:	4a20      	ldr	r2, [pc, #128]	; (810523c <prvAddCurrentTaskToDelayedList+0xb8>)
 81051bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81051c4:	d10a      	bne.n	81051dc <prvAddCurrentTaskToDelayedList+0x58>
 81051c6:	683b      	ldr	r3, [r7, #0]
 81051c8:	2b00      	cmp	r3, #0
 81051ca:	d007      	beq.n	81051dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81051cc:	4b1a      	ldr	r3, [pc, #104]	; (8105238 <prvAddCurrentTaskToDelayedList+0xb4>)
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	3304      	adds	r3, #4
 81051d2:	4619      	mov	r1, r3
 81051d4:	481a      	ldr	r0, [pc, #104]	; (8105240 <prvAddCurrentTaskToDelayedList+0xbc>)
 81051d6:	f7fe f952 	bl	810347e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81051da:	e026      	b.n	810522a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81051dc:	68fa      	ldr	r2, [r7, #12]
 81051de:	687b      	ldr	r3, [r7, #4]
 81051e0:	4413      	add	r3, r2
 81051e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81051e4:	4b14      	ldr	r3, [pc, #80]	; (8105238 <prvAddCurrentTaskToDelayedList+0xb4>)
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	68ba      	ldr	r2, [r7, #8]
 81051ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81051ec:	68ba      	ldr	r2, [r7, #8]
 81051ee:	68fb      	ldr	r3, [r7, #12]
 81051f0:	429a      	cmp	r2, r3
 81051f2:	d209      	bcs.n	8105208 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81051f4:	4b13      	ldr	r3, [pc, #76]	; (8105244 <prvAddCurrentTaskToDelayedList+0xc0>)
 81051f6:	681a      	ldr	r2, [r3, #0]
 81051f8:	4b0f      	ldr	r3, [pc, #60]	; (8105238 <prvAddCurrentTaskToDelayedList+0xb4>)
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	3304      	adds	r3, #4
 81051fe:	4619      	mov	r1, r3
 8105200:	4610      	mov	r0, r2
 8105202:	f7fe f960 	bl	81034c6 <vListInsert>
}
 8105206:	e010      	b.n	810522a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8105208:	4b0f      	ldr	r3, [pc, #60]	; (8105248 <prvAddCurrentTaskToDelayedList+0xc4>)
 810520a:	681a      	ldr	r2, [r3, #0]
 810520c:	4b0a      	ldr	r3, [pc, #40]	; (8105238 <prvAddCurrentTaskToDelayedList+0xb4>)
 810520e:	681b      	ldr	r3, [r3, #0]
 8105210:	3304      	adds	r3, #4
 8105212:	4619      	mov	r1, r3
 8105214:	4610      	mov	r0, r2
 8105216:	f7fe f956 	bl	81034c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810521a:	4b0c      	ldr	r3, [pc, #48]	; (810524c <prvAddCurrentTaskToDelayedList+0xc8>)
 810521c:	681b      	ldr	r3, [r3, #0]
 810521e:	68ba      	ldr	r2, [r7, #8]
 8105220:	429a      	cmp	r2, r3
 8105222:	d202      	bcs.n	810522a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8105224:	4a09      	ldr	r2, [pc, #36]	; (810524c <prvAddCurrentTaskToDelayedList+0xc8>)
 8105226:	68bb      	ldr	r3, [r7, #8]
 8105228:	6013      	str	r3, [r2, #0]
}
 810522a:	bf00      	nop
 810522c:	3710      	adds	r7, #16
 810522e:	46bd      	mov	sp, r7
 8105230:	bd80      	pop	{r7, pc}
 8105232:	bf00      	nop
 8105234:	10003fbc 	.word	0x10003fbc
 8105238:	10003eb8 	.word	0x10003eb8
 810523c:	10003fc0 	.word	0x10003fc0
 8105240:	10003fa4 	.word	0x10003fa4
 8105244:	10003f74 	.word	0x10003f74
 8105248:	10003f70 	.word	0x10003f70
 810524c:	10003fd8 	.word	0x10003fd8

08105250 <ringbuff_is_ready>:
 * \brief           Check if ringbuff is initialized and ready to use
 * \param[in]       buff: Buffer handle
 * \return          `1` if ready, `0` otherwise
 */
uint8_t
ringbuff_is_ready(RINGBUFF_VOLATILE ringbuff_t* buff) {
 8105250:	b480      	push	{r7}
 8105252:	b083      	sub	sp, #12
 8105254:	af00      	add	r7, sp, #0
 8105256:	6078      	str	r0, [r7, #4]
    return BUF_IS_VALID(buff);
 8105258:	687b      	ldr	r3, [r7, #4]
 810525a:	2b00      	cmp	r3, #0
 810525c:	d013      	beq.n	8105286 <ringbuff_is_ready+0x36>
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	4a0d      	ldr	r2, [pc, #52]	; (8105298 <ringbuff_is_ready+0x48>)
 8105264:	4293      	cmp	r3, r2
 8105266:	d10e      	bne.n	8105286 <ringbuff_is_ready+0x36>
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	699b      	ldr	r3, [r3, #24]
 810526c:	4a0b      	ldr	r2, [pc, #44]	; (810529c <ringbuff_is_ready+0x4c>)
 810526e:	4293      	cmp	r3, r2
 8105270:	d109      	bne.n	8105286 <ringbuff_is_ready+0x36>
 8105272:	687b      	ldr	r3, [r7, #4]
 8105274:	685b      	ldr	r3, [r3, #4]
 8105276:	2b00      	cmp	r3, #0
 8105278:	d005      	beq.n	8105286 <ringbuff_is_ready+0x36>
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	689b      	ldr	r3, [r3, #8]
 810527e:	2b00      	cmp	r3, #0
 8105280:	d001      	beq.n	8105286 <ringbuff_is_ready+0x36>
 8105282:	2301      	movs	r3, #1
 8105284:	e000      	b.n	8105288 <ringbuff_is_ready+0x38>
 8105286:	2300      	movs	r3, #0
 8105288:	b2db      	uxtb	r3, r3
}
 810528a:	4618      	mov	r0, r3
 810528c:	370c      	adds	r7, #12
 810528e:	46bd      	mov	sp, r7
 8105290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105294:	4770      	bx	lr
 8105296:	bf00      	nop
 8105298:	deadbeef 	.word	0xdeadbeef
 810529c:	21524110 	.word	0x21524110

081052a0 <ringbuff_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
ringbuff_write(RINGBUFF_VOLATILE ringbuff_t* buff, const void* data, size_t btw) {
 81052a0:	b580      	push	{r7, lr}
 81052a2:	b088      	sub	sp, #32
 81052a4:	af00      	add	r7, sp, #0
 81052a6:	60f8      	str	r0, [r7, #12]
 81052a8:	60b9      	str	r1, [r7, #8]
 81052aa:	607a      	str	r2, [r7, #4]
    size_t tocopy, free;
    const uint8_t* d = data;
 81052ac:	68bb      	ldr	r3, [r7, #8]
 81052ae:	61fb      	str	r3, [r7, #28]

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 81052b0:	68fb      	ldr	r3, [r7, #12]
 81052b2:	2b00      	cmp	r3, #0
 81052b4:	d017      	beq.n	81052e6 <ringbuff_write+0x46>
 81052b6:	68fb      	ldr	r3, [r7, #12]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	4a3b      	ldr	r2, [pc, #236]	; (81053a8 <ringbuff_write+0x108>)
 81052bc:	4293      	cmp	r3, r2
 81052be:	d112      	bne.n	81052e6 <ringbuff_write+0x46>
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	699b      	ldr	r3, [r3, #24]
 81052c4:	4a39      	ldr	r2, [pc, #228]	; (81053ac <ringbuff_write+0x10c>)
 81052c6:	4293      	cmp	r3, r2
 81052c8:	d10d      	bne.n	81052e6 <ringbuff_write+0x46>
 81052ca:	68fb      	ldr	r3, [r7, #12]
 81052cc:	685b      	ldr	r3, [r3, #4]
 81052ce:	2b00      	cmp	r3, #0
 81052d0:	d009      	beq.n	81052e6 <ringbuff_write+0x46>
 81052d2:	68fb      	ldr	r3, [r7, #12]
 81052d4:	689b      	ldr	r3, [r3, #8]
 81052d6:	2b00      	cmp	r3, #0
 81052d8:	d005      	beq.n	81052e6 <ringbuff_write+0x46>
 81052da:	68bb      	ldr	r3, [r7, #8]
 81052dc:	2b00      	cmp	r3, #0
 81052de:	d002      	beq.n	81052e6 <ringbuff_write+0x46>
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	2b00      	cmp	r3, #0
 81052e4:	d101      	bne.n	81052ea <ringbuff_write+0x4a>
        return 0;
 81052e6:	2300      	movs	r3, #0
 81052e8:	e059      	b.n	810539e <ringbuff_write+0xfe>
    }

    /* Calculate maximum number of bytes available to write */
    free = ringbuff_get_free(buff);
 81052ea:	68f8      	ldr	r0, [r7, #12]
 81052ec:	f000 f860 	bl	81053b0 <ringbuff_get_free>
 81052f0:	61b8      	str	r0, [r7, #24]
    btw = BUF_MIN(free, btw);
 81052f2:	687a      	ldr	r2, [r7, #4]
 81052f4:	69bb      	ldr	r3, [r7, #24]
 81052f6:	4293      	cmp	r3, r2
 81052f8:	bf28      	it	cs
 81052fa:	4613      	movcs	r3, r2
 81052fc:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 81052fe:	687b      	ldr	r3, [r7, #4]
 8105300:	2b00      	cmp	r3, #0
 8105302:	d101      	bne.n	8105308 <ringbuff_write+0x68>
        return 0;
 8105304:	2300      	movs	r3, #0
 8105306:	e04a      	b.n	810539e <ringbuff_write+0xfe>
    }

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff->w, btw);
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	689a      	ldr	r2, [r3, #8]
 810530c:	68fb      	ldr	r3, [r7, #12]
 810530e:	691b      	ldr	r3, [r3, #16]
 8105310:	1ad3      	subs	r3, r2, r3
 8105312:	687a      	ldr	r2, [r7, #4]
 8105314:	429a      	cmp	r2, r3
 8105316:	d905      	bls.n	8105324 <ringbuff_write+0x84>
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	689a      	ldr	r2, [r3, #8]
 810531c:	68fb      	ldr	r3, [r7, #12]
 810531e:	691b      	ldr	r3, [r3, #16]
 8105320:	1ad3      	subs	r3, r2, r3
 8105322:	e000      	b.n	8105326 <ringbuff_write+0x86>
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 8105328:	68fb      	ldr	r3, [r7, #12]
 810532a:	685a      	ldr	r2, [r3, #4]
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	691b      	ldr	r3, [r3, #16]
 8105330:	4413      	add	r3, r2
 8105332:	697a      	ldr	r2, [r7, #20]
 8105334:	69f9      	ldr	r1, [r7, #28]
 8105336:	4618      	mov	r0, r3
 8105338:	f000 f8a4 	bl	8105484 <memcpy>
    buff->w += tocopy;
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	691a      	ldr	r2, [r3, #16]
 8105340:	697b      	ldr	r3, [r7, #20]
 8105342:	441a      	add	r2, r3
 8105344:	68fb      	ldr	r3, [r7, #12]
 8105346:	611a      	str	r2, [r3, #16]
    btw -= tocopy;
 8105348:	687a      	ldr	r2, [r7, #4]
 810534a:	697b      	ldr	r3, [r7, #20]
 810534c:	1ad3      	subs	r3, r2, r3
 810534e:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	2b00      	cmp	r3, #0
 8105354:	d00b      	beq.n	810536e <ringbuff_write+0xce>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8105356:	68fb      	ldr	r3, [r7, #12]
 8105358:	6858      	ldr	r0, [r3, #4]
 810535a:	69fa      	ldr	r2, [r7, #28]
 810535c:	697b      	ldr	r3, [r7, #20]
 810535e:	4413      	add	r3, r2
 8105360:	687a      	ldr	r2, [r7, #4]
 8105362:	4619      	mov	r1, r3
 8105364:	f000 f88e 	bl	8105484 <memcpy>
        buff->w = btw;
 8105368:	68fb      	ldr	r3, [r7, #12]
 810536a:	687a      	ldr	r2, [r7, #4]
 810536c:	611a      	str	r2, [r3, #16]
    }

    /* Step 3: Check end of buffer */
    if (buff->w >= buff->size) {
 810536e:	68fb      	ldr	r3, [r7, #12]
 8105370:	691a      	ldr	r2, [r3, #16]
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	689b      	ldr	r3, [r3, #8]
 8105376:	429a      	cmp	r2, r3
 8105378:	d302      	bcc.n	8105380 <ringbuff_write+0xe0>
        buff->w = 0;
 810537a:	68fb      	ldr	r3, [r7, #12]
 810537c:	2200      	movs	r2, #0
 810537e:	611a      	str	r2, [r3, #16]
    }
    BUF_SEND_EVT(buff, RINGBUFF_EVT_WRITE, tocopy + btw);
 8105380:	68fb      	ldr	r3, [r7, #12]
 8105382:	695b      	ldr	r3, [r3, #20]
 8105384:	2b00      	cmp	r3, #0
 8105386:	d007      	beq.n	8105398 <ringbuff_write+0xf8>
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	695b      	ldr	r3, [r3, #20]
 810538c:	6979      	ldr	r1, [r7, #20]
 810538e:	687a      	ldr	r2, [r7, #4]
 8105390:	440a      	add	r2, r1
 8105392:	2101      	movs	r1, #1
 8105394:	68f8      	ldr	r0, [r7, #12]
 8105396:	4798      	blx	r3
    return tocopy + btw;
 8105398:	697a      	ldr	r2, [r7, #20]
 810539a:	687b      	ldr	r3, [r7, #4]
 810539c:	4413      	add	r3, r2
}
 810539e:	4618      	mov	r0, r3
 81053a0:	3720      	adds	r7, #32
 81053a2:	46bd      	mov	sp, r7
 81053a4:	bd80      	pop	{r7, pc}
 81053a6:	bf00      	nop
 81053a8:	deadbeef 	.word	0xdeadbeef
 81053ac:	21524110 	.word	0x21524110

081053b0 <ringbuff_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
ringbuff_get_free(RINGBUFF_VOLATILE ringbuff_t* buff) {
 81053b0:	b480      	push	{r7}
 81053b2:	b087      	sub	sp, #28
 81053b4:	af00      	add	r7, sp, #0
 81053b6:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 81053b8:	687b      	ldr	r3, [r7, #4]
 81053ba:	2b00      	cmp	r3, #0
 81053bc:	d011      	beq.n	81053e2 <ringbuff_get_free+0x32>
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	681b      	ldr	r3, [r3, #0]
 81053c2:	4a1c      	ldr	r2, [pc, #112]	; (8105434 <ringbuff_get_free+0x84>)
 81053c4:	4293      	cmp	r3, r2
 81053c6:	d10c      	bne.n	81053e2 <ringbuff_get_free+0x32>
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	699b      	ldr	r3, [r3, #24]
 81053cc:	4a1a      	ldr	r2, [pc, #104]	; (8105438 <ringbuff_get_free+0x88>)
 81053ce:	4293      	cmp	r3, r2
 81053d0:	d107      	bne.n	81053e2 <ringbuff_get_free+0x32>
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	685b      	ldr	r3, [r3, #4]
 81053d6:	2b00      	cmp	r3, #0
 81053d8:	d003      	beq.n	81053e2 <ringbuff_get_free+0x32>
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	689b      	ldr	r3, [r3, #8]
 81053de:	2b00      	cmp	r3, #0
 81053e0:	d101      	bne.n	81053e6 <ringbuff_get_free+0x36>
        return 0;
 81053e2:	2300      	movs	r3, #0
 81053e4:	e01f      	b.n	8105426 <ringbuff_get_free+0x76>
    }

    /* Use temporary values in case they are changed during operations */
    w = buff->w;
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	691b      	ldr	r3, [r3, #16]
 81053ea:	613b      	str	r3, [r7, #16]
    r = buff->r;
 81053ec:	687b      	ldr	r3, [r7, #4]
 81053ee:	68db      	ldr	r3, [r3, #12]
 81053f0:	60fb      	str	r3, [r7, #12]
    if (w == r) {
 81053f2:	693a      	ldr	r2, [r7, #16]
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	429a      	cmp	r2, r3
 81053f8:	d103      	bne.n	8105402 <ringbuff_get_free+0x52>
        size = buff->size;
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	689b      	ldr	r3, [r3, #8]
 81053fe:	617b      	str	r3, [r7, #20]
 8105400:	e00f      	b.n	8105422 <ringbuff_get_free+0x72>
    } else if (r > w) {
 8105402:	68fa      	ldr	r2, [r7, #12]
 8105404:	693b      	ldr	r3, [r7, #16]
 8105406:	429a      	cmp	r2, r3
 8105408:	d904      	bls.n	8105414 <ringbuff_get_free+0x64>
        size = r - w;
 810540a:	68fa      	ldr	r2, [r7, #12]
 810540c:	693b      	ldr	r3, [r7, #16]
 810540e:	1ad3      	subs	r3, r2, r3
 8105410:	617b      	str	r3, [r7, #20]
 8105412:	e006      	b.n	8105422 <ringbuff_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	689a      	ldr	r2, [r3, #8]
 8105418:	68f9      	ldr	r1, [r7, #12]
 810541a:	693b      	ldr	r3, [r7, #16]
 810541c:	1acb      	subs	r3, r1, r3
 810541e:	4413      	add	r3, r2
 8105420:	617b      	str	r3, [r7, #20]
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8105422:	697b      	ldr	r3, [r7, #20]
 8105424:	3b01      	subs	r3, #1
}
 8105426:	4618      	mov	r0, r3
 8105428:	371c      	adds	r7, #28
 810542a:	46bd      	mov	sp, r7
 810542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105430:	4770      	bx	lr
 8105432:	bf00      	nop
 8105434:	deadbeef 	.word	0xdeadbeef
 8105438:	21524110 	.word	0x21524110

0810543c <__libc_init_array>:
 810543c:	b570      	push	{r4, r5, r6, lr}
 810543e:	4d0d      	ldr	r5, [pc, #52]	; (8105474 <__libc_init_array+0x38>)
 8105440:	4c0d      	ldr	r4, [pc, #52]	; (8105478 <__libc_init_array+0x3c>)
 8105442:	1b64      	subs	r4, r4, r5
 8105444:	10a4      	asrs	r4, r4, #2
 8105446:	2600      	movs	r6, #0
 8105448:	42a6      	cmp	r6, r4
 810544a:	d109      	bne.n	8105460 <__libc_init_array+0x24>
 810544c:	4d0b      	ldr	r5, [pc, #44]	; (810547c <__libc_init_array+0x40>)
 810544e:	4c0c      	ldr	r4, [pc, #48]	; (8105480 <__libc_init_array+0x44>)
 8105450:	f000 f82e 	bl	81054b0 <_init>
 8105454:	1b64      	subs	r4, r4, r5
 8105456:	10a4      	asrs	r4, r4, #2
 8105458:	2600      	movs	r6, #0
 810545a:	42a6      	cmp	r6, r4
 810545c:	d105      	bne.n	810546a <__libc_init_array+0x2e>
 810545e:	bd70      	pop	{r4, r5, r6, pc}
 8105460:	f855 3b04 	ldr.w	r3, [r5], #4
 8105464:	4798      	blx	r3
 8105466:	3601      	adds	r6, #1
 8105468:	e7ee      	b.n	8105448 <__libc_init_array+0xc>
 810546a:	f855 3b04 	ldr.w	r3, [r5], #4
 810546e:	4798      	blx	r3
 8105470:	3601      	adds	r6, #1
 8105472:	e7f2      	b.n	810545a <__libc_init_array+0x1e>
 8105474:	08105540 	.word	0x08105540
 8105478:	08105540 	.word	0x08105540
 810547c:	08105540 	.word	0x08105540
 8105480:	08105544 	.word	0x08105544

08105484 <memcpy>:
 8105484:	440a      	add	r2, r1
 8105486:	4291      	cmp	r1, r2
 8105488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810548c:	d100      	bne.n	8105490 <memcpy+0xc>
 810548e:	4770      	bx	lr
 8105490:	b510      	push	{r4, lr}
 8105492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105496:	f803 4f01 	strb.w	r4, [r3, #1]!
 810549a:	4291      	cmp	r1, r2
 810549c:	d1f9      	bne.n	8105492 <memcpy+0xe>
 810549e:	bd10      	pop	{r4, pc}

081054a0 <memset>:
 81054a0:	4402      	add	r2, r0
 81054a2:	4603      	mov	r3, r0
 81054a4:	4293      	cmp	r3, r2
 81054a6:	d100      	bne.n	81054aa <memset+0xa>
 81054a8:	4770      	bx	lr
 81054aa:	f803 1b01 	strb.w	r1, [r3], #1
 81054ae:	e7f9      	b.n	81054a4 <memset+0x4>

081054b0 <_init>:
 81054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81054b2:	bf00      	nop
 81054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81054b6:	bc08      	pop	{r3}
 81054b8:	469e      	mov	lr, r3
 81054ba:	4770      	bx	lr

081054bc <_fini>:
 81054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81054be:	bf00      	nop
 81054c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81054c2:	bc08      	pop	{r3}
 81054c4:	469e      	mov	lr, r3
 81054c6:	4770      	bx	lr
