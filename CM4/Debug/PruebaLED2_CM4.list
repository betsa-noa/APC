
PruebaLED2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08102cbc  08102cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08102cfc  08102cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102d00  08102d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  10000000  08102d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004164  10000014  08102d18  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10004178  08102d18  00024178  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001fc9f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000365c  00000000  00000000  0003fce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001170  00000000  00000000  00043340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001038  00000000  00000000  000444b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003b34e  00000000  00000000  000454e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000135ad  00000000  00000000  00080836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018d2c2  00000000  00000000  00093de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002210a5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000047c0  00000000  00000000  002210f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000014 	.word	0x10000014
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08102ca4 	.word	0x08102ca4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000018 	.word	0x10000018
 81002dc:	08102ca4 	.word	0x08102ca4

081002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002e0:	b480      	push	{r7}
 81002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002e4:	4b0b      	ldr	r3, [pc, #44]	; (8100314 <SystemInit+0x34>)
 81002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002ea:	4a0a      	ldr	r2, [pc, #40]	; (8100314 <SystemInit+0x34>)
 81002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002f4:	4b07      	ldr	r3, [pc, #28]	; (8100314 <SystemInit+0x34>)
 81002f6:	691b      	ldr	r3, [r3, #16]
 81002f8:	4a06      	ldr	r2, [pc, #24]	; (8100314 <SystemInit+0x34>)
 81002fa:	f043 0310 	orr.w	r3, r3, #16
 81002fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100300:	4b04      	ldr	r3, [pc, #16]	; (8100314 <SystemInit+0x34>)
 8100302:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100306:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100308:	bf00      	nop
 810030a:	46bd      	mov	sp, r7
 810030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100310:	4770      	bx	lr
 8100312:	bf00      	nop
 8100314:	e000ed00 	.word	0xe000ed00

08100318 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8100318:	b480      	push	{r7}
 810031a:	b085      	sub	sp, #20
 810031c:	af00      	add	r7, sp, #0
 810031e:	60f8      	str	r0, [r7, #12]
 8100320:	60b9      	str	r1, [r7, #8]
 8100322:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8100324:	68fb      	ldr	r3, [r7, #12]
 8100326:	4a07      	ldr	r2, [pc, #28]	; (8100344 <vApplicationGetIdleTaskMemory+0x2c>)
 8100328:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 810032a:	68bb      	ldr	r3, [r7, #8]
 810032c:	4a06      	ldr	r2, [pc, #24]	; (8100348 <vApplicationGetIdleTaskMemory+0x30>)
 810032e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8100330:	687b      	ldr	r3, [r7, #4]
 8100332:	2280      	movs	r2, #128	; 0x80
 8100334:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8100336:	bf00      	nop
 8100338:	3714      	adds	r7, #20
 810033a:	46bd      	mov	sp, r7
 810033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100340:	4770      	bx	lr
 8100342:	bf00      	nop
 8100344:	10000030 	.word	0x10000030
 8100348:	10000084 	.word	0x10000084

0810034c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810034c:	b5b0      	push	{r4, r5, r7, lr}
 810034e:	b088      	sub	sp, #32
 8100350:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100352:	4b24      	ldr	r3, [pc, #144]	; (81003e4 <main+0x98>)
 8100354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100358:	4a22      	ldr	r2, [pc, #136]	; (81003e4 <main+0x98>)
 810035a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810035e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100362:	4b20      	ldr	r3, [pc, #128]	; (81003e4 <main+0x98>)
 8100364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810036c:	603b      	str	r3, [r7, #0]
 810036e:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100370:	2001      	movs	r0, #1
 8100372:	f000 fcb3 	bl	8100cdc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100376:	f000 fd3d 	bl	8100df4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810037a:	2201      	movs	r2, #1
 810037c:	2102      	movs	r1, #2
 810037e:	2000      	movs	r0, #0
 8100380:	f000 fcbe 	bl	8100d00 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100384:	4b18      	ldr	r3, [pc, #96]	; (81003e8 <main+0x9c>)
 8100386:	681b      	ldr	r3, [r3, #0]
 8100388:	091b      	lsrs	r3, r3, #4
 810038a:	f003 030f 	and.w	r3, r3, #15
 810038e:	2b07      	cmp	r3, #7
 8100390:	d108      	bne.n	81003a4 <main+0x58>
 8100392:	4b16      	ldr	r3, [pc, #88]	; (81003ec <main+0xa0>)
 8100394:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100398:	4a14      	ldr	r2, [pc, #80]	; (81003ec <main+0xa0>)
 810039a:	f043 0301 	orr.w	r3, r3, #1
 810039e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81003a2:	e007      	b.n	81003b4 <main+0x68>
 81003a4:	4b11      	ldr	r3, [pc, #68]	; (81003ec <main+0xa0>)
 81003a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003aa:	4a10      	ldr	r2, [pc, #64]	; (81003ec <main+0xa0>)
 81003ac:	f043 0301 	orr.w	r3, r3, #1
 81003b0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003b4:	f000 f948 	bl	8100648 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003b8:	f000 f81e 	bl	81003f8 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 81003bc:	4b0c      	ldr	r3, [pc, #48]	; (81003f0 <main+0xa4>)
 81003be:	1d3c      	adds	r4, r7, #4
 81003c0:	461d      	mov	r5, r3
 81003c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81003c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81003c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81003ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 81003ce:	1d3b      	adds	r3, r7, #4
 81003d0:	2100      	movs	r1, #0
 81003d2:	4618      	mov	r0, r3
 81003d4:	f001 fa11 	bl	81017fa <osThreadCreate>
 81003d8:	4603      	mov	r3, r0
 81003da:	4a06      	ldr	r2, [pc, #24]	; (81003f4 <main+0xa8>)
 81003dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 81003de:	f001 fa05 	bl	81017ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003e2:	e7fe      	b.n	81003e2 <main+0x96>
 81003e4:	58024400 	.word	0x58024400
 81003e8:	e000ed00 	.word	0xe000ed00
 81003ec:	58026400 	.word	0x58026400
 81003f0:	08102cc8 	.word	0x08102cc8
 81003f4:	10003fd8 	.word	0x10003fd8

081003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81003f8:	b580      	push	{r7, lr}
 81003fa:	b086      	sub	sp, #24
 81003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81003fe:	1d3b      	adds	r3, r7, #4
 8100400:	2200      	movs	r2, #0
 8100402:	601a      	str	r2, [r3, #0]
 8100404:	605a      	str	r2, [r3, #4]
 8100406:	609a      	str	r2, [r3, #8]
 8100408:	60da      	str	r2, [r3, #12]
 810040a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810040c:	4b13      	ldr	r3, [pc, #76]	; (810045c <MX_GPIO_Init+0x64>)
 810040e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100412:	4a12      	ldr	r2, [pc, #72]	; (810045c <MX_GPIO_Init+0x64>)
 8100414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810041c:	4b0f      	ldr	r3, [pc, #60]	; (810045c <MX_GPIO_Init+0x64>)
 810041e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100426:	603b      	str	r3, [r7, #0]
 8100428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 810042a:	2200      	movs	r2, #0
 810042c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100430:	480b      	ldr	r0, [pc, #44]	; (8100460 <MX_GPIO_Init+0x68>)
 8100432:	f000 fc1f 	bl	8100c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8100436:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810043a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810043c:	2301      	movs	r3, #1
 810043e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100440:	2300      	movs	r3, #0
 8100442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100444:	2300      	movs	r3, #0
 8100446:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100448:	1d3b      	adds	r3, r7, #4
 810044a:	4619      	mov	r1, r3
 810044c:	4804      	ldr	r0, [pc, #16]	; (8100460 <MX_GPIO_Init+0x68>)
 810044e:	f000 fa61 	bl	8100914 <HAL_GPIO_Init>

}
 8100452:	bf00      	nop
 8100454:	3718      	adds	r7, #24
 8100456:	46bd      	mov	sp, r7
 8100458:	bd80      	pop	{r7, pc}
 810045a:	bf00      	nop
 810045c:	58024400 	.word	0x58024400
 8100460:	58021800 	.word	0x58021800

08100464 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8100464:	b580      	push	{r7, lr}
 8100466:	b082      	sub	sp, #8
 8100468:	af00      	add	r7, sp, #0
 810046a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 810046c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100470:	4803      	ldr	r0, [pc, #12]	; (8100480 <StartDefaultTask+0x1c>)
 8100472:	f000 fc18 	bl	8100ca6 <HAL_GPIO_TogglePin>
	  osDelay(3000);
 8100476:	f640 30b8 	movw	r0, #3000	; 0xbb8
 810047a:	f001 fa0a 	bl	8101892 <osDelay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 810047e:	e7f5      	b.n	810046c <StartDefaultTask+0x8>
 8100480:	58021800 	.word	0x58021800

08100484 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100484:	b580      	push	{r7, lr}
 8100486:	b082      	sub	sp, #8
 8100488:	af00      	add	r7, sp, #0
 810048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 810048c:	687b      	ldr	r3, [r7, #4]
 810048e:	681b      	ldr	r3, [r3, #0]
 8100490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100494:	d101      	bne.n	810049a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100496:	f000 f935 	bl	8100704 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810049a:	bf00      	nop
 810049c:	3708      	adds	r7, #8
 810049e:	46bd      	mov	sp, r7
 81004a0:	bd80      	pop	{r7, pc}
	...

081004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81004a4:	b580      	push	{r7, lr}
 81004a6:	b082      	sub	sp, #8
 81004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81004aa:	4b0c      	ldr	r3, [pc, #48]	; (81004dc <HAL_MspInit+0x38>)
 81004ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004b0:	4a0a      	ldr	r2, [pc, #40]	; (81004dc <HAL_MspInit+0x38>)
 81004b2:	f043 0302 	orr.w	r3, r3, #2
 81004b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81004ba:	4b08      	ldr	r3, [pc, #32]	; (81004dc <HAL_MspInit+0x38>)
 81004bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81004c0:	f003 0302 	and.w	r3, r3, #2
 81004c4:	607b      	str	r3, [r7, #4]
 81004c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81004c8:	2200      	movs	r2, #0
 81004ca:	210f      	movs	r1, #15
 81004cc:	f06f 0001 	mvn.w	r0, #1
 81004d0:	f000 f9e4 	bl	810089c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81004d4:	bf00      	nop
 81004d6:	3708      	adds	r7, #8
 81004d8:	46bd      	mov	sp, r7
 81004da:	bd80      	pop	{r7, pc}
 81004dc:	58024400 	.word	0x58024400

081004e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81004e0:	b580      	push	{r7, lr}
 81004e2:	b090      	sub	sp, #64	; 0x40
 81004e4:	af00      	add	r7, sp, #0
 81004e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81004e8:	687b      	ldr	r3, [r7, #4]
 81004ea:	2b0f      	cmp	r3, #15
 81004ec:	d827      	bhi.n	810053e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 81004ee:	2200      	movs	r2, #0
 81004f0:	6879      	ldr	r1, [r7, #4]
 81004f2:	201c      	movs	r0, #28
 81004f4:	f000 f9d2 	bl	810089c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81004f8:	201c      	movs	r0, #28
 81004fa:	f000 f9e9 	bl	81008d0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81004fe:	4a29      	ldr	r2, [pc, #164]	; (81005a4 <HAL_InitTick+0xc4>)
 8100500:	687b      	ldr	r3, [r7, #4]
 8100502:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8100504:	4b28      	ldr	r3, [pc, #160]	; (81005a8 <HAL_InitTick+0xc8>)
 8100506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810050a:	4a27      	ldr	r2, [pc, #156]	; (81005a8 <HAL_InitTick+0xc8>)
 810050c:	f043 0301 	orr.w	r3, r3, #1
 8100510:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100514:	4b24      	ldr	r3, [pc, #144]	; (81005a8 <HAL_InitTick+0xc8>)
 8100516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810051a:	f003 0301 	and.w	r3, r3, #1
 810051e:	60fb      	str	r3, [r7, #12]
 8100520:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100522:	f107 0210 	add.w	r2, r7, #16
 8100526:	f107 0314 	add.w	r3, r7, #20
 810052a:	4611      	mov	r1, r2
 810052c:	4618      	mov	r0, r3
 810052e:	f000 fe31 	bl	8101194 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8100532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8100534:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8100536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100538:	2b00      	cmp	r3, #0
 810053a:	d106      	bne.n	810054a <HAL_InitTick+0x6a>
 810053c:	e001      	b.n	8100542 <HAL_InitTick+0x62>
    return HAL_ERROR;
 810053e:	2301      	movs	r3, #1
 8100540:	e02c      	b.n	810059c <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8100542:	f000 fe11 	bl	8101168 <HAL_RCC_GetPCLK1Freq>
 8100546:	63f8      	str	r0, [r7, #60]	; 0x3c
 8100548:	e004      	b.n	8100554 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810054a:	f000 fe0d 	bl	8101168 <HAL_RCC_GetPCLK1Freq>
 810054e:	4603      	mov	r3, r0
 8100550:	005b      	lsls	r3, r3, #1
 8100552:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8100554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8100556:	4a15      	ldr	r2, [pc, #84]	; (81005ac <HAL_InitTick+0xcc>)
 8100558:	fba2 2303 	umull	r2, r3, r2, r3
 810055c:	0c9b      	lsrs	r3, r3, #18
 810055e:	3b01      	subs	r3, #1
 8100560:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8100562:	4b13      	ldr	r3, [pc, #76]	; (81005b0 <HAL_InitTick+0xd0>)
 8100564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100568:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 810056a:	4b11      	ldr	r3, [pc, #68]	; (81005b0 <HAL_InitTick+0xd0>)
 810056c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100570:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8100572:	4a0f      	ldr	r2, [pc, #60]	; (81005b0 <HAL_InitTick+0xd0>)
 8100574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100576:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8100578:	4b0d      	ldr	r3, [pc, #52]	; (81005b0 <HAL_InitTick+0xd0>)
 810057a:	2200      	movs	r2, #0
 810057c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810057e:	4b0c      	ldr	r3, [pc, #48]	; (81005b0 <HAL_InitTick+0xd0>)
 8100580:	2200      	movs	r2, #0
 8100582:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8100584:	480a      	ldr	r0, [pc, #40]	; (81005b0 <HAL_InitTick+0xd0>)
 8100586:	f000 fe47 	bl	8101218 <HAL_TIM_Base_Init>
 810058a:	4603      	mov	r3, r0
 810058c:	2b00      	cmp	r3, #0
 810058e:	d104      	bne.n	810059a <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8100590:	4807      	ldr	r0, [pc, #28]	; (81005b0 <HAL_InitTick+0xd0>)
 8100592:	f000 fea3 	bl	81012dc <HAL_TIM_Base_Start_IT>
 8100596:	4603      	mov	r3, r0
 8100598:	e000      	b.n	810059c <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 810059a:	2301      	movs	r3, #1
}
 810059c:	4618      	mov	r0, r3
 810059e:	3740      	adds	r7, #64	; 0x40
 81005a0:	46bd      	mov	sp, r7
 81005a2:	bd80      	pop	{r7, pc}
 81005a4:	10000008 	.word	0x10000008
 81005a8:	58024400 	.word	0x58024400
 81005ac:	431bde83 	.word	0x431bde83
 81005b0:	10004128 	.word	0x10004128

081005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81005b4:	b480      	push	{r7}
 81005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81005b8:	e7fe      	b.n	81005b8 <NMI_Handler+0x4>

081005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81005ba:	b480      	push	{r7}
 81005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81005be:	e7fe      	b.n	81005be <HardFault_Handler+0x4>

081005c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81005c0:	b480      	push	{r7}
 81005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81005c4:	e7fe      	b.n	81005c4 <MemManage_Handler+0x4>

081005c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81005c6:	b480      	push	{r7}
 81005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81005ca:	e7fe      	b.n	81005ca <BusFault_Handler+0x4>

081005cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81005cc:	b480      	push	{r7}
 81005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81005d0:	e7fe      	b.n	81005d0 <UsageFault_Handler+0x4>

081005d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81005d2:	b480      	push	{r7}
 81005d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81005d6:	bf00      	nop
 81005d8:	46bd      	mov	sp, r7
 81005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005de:	4770      	bx	lr

081005e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81005e0:	b580      	push	{r7, lr}
 81005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81005e4:	4802      	ldr	r0, [pc, #8]	; (81005f0 <TIM2_IRQHandler+0x10>)
 81005e6:	f000 fee9 	bl	81013bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81005ea:	bf00      	nop
 81005ec:	bd80      	pop	{r7, pc}
 81005ee:	bf00      	nop
 81005f0:	10004128 	.word	0x10004128

081005f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810062c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005f8:	f7ff fe72 	bl	81002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005fc:	480c      	ldr	r0, [pc, #48]	; (8100630 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005fe:	490d      	ldr	r1, [pc, #52]	; (8100634 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100600:	4a0d      	ldr	r2, [pc, #52]	; (8100638 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100604:	e002      	b.n	810060c <LoopCopyDataInit>

08100606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810060a:	3304      	adds	r3, #4

0810060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100610:	d3f9      	bcc.n	8100606 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100612:	4a0a      	ldr	r2, [pc, #40]	; (810063c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100614:	4c0a      	ldr	r4, [pc, #40]	; (8100640 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100618:	e001      	b.n	810061e <LoopFillZerobss>

0810061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810061c:	3204      	adds	r2, #4

0810061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100620:	d3fb      	bcc.n	810061a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100622:	f002 fb1b 	bl	8102c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100626:	f7ff fe91 	bl	810034c <main>
  bx  lr
 810062a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810062c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100630:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100634:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100638:	08102d04 	.word	0x08102d04
  ldr r2, =_sbss
 810063c:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8100640:	10004178 	.word	0x10004178

08100644 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100644:	e7fe      	b.n	8100644 <ADC3_IRQHandler>
	...

08100648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100648:	b580      	push	{r7, lr}
 810064a:	b082      	sub	sp, #8
 810064c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810064e:	4b28      	ldr	r3, [pc, #160]	; (81006f0 <HAL_Init+0xa8>)
 8100650:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100654:	4a26      	ldr	r2, [pc, #152]	; (81006f0 <HAL_Init+0xa8>)
 8100656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810065a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810065e:	4b24      	ldr	r3, [pc, #144]	; (81006f0 <HAL_Init+0xa8>)
 8100660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100668:	603b      	str	r3, [r7, #0]
 810066a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810066c:	4b21      	ldr	r3, [pc, #132]	; (81006f4 <HAL_Init+0xac>)
 810066e:	681b      	ldr	r3, [r3, #0]
 8100670:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100674:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100678:	4a1e      	ldr	r2, [pc, #120]	; (81006f4 <HAL_Init+0xac>)
 810067a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810067e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100680:	4b1c      	ldr	r3, [pc, #112]	; (81006f4 <HAL_Init+0xac>)
 8100682:	681b      	ldr	r3, [r3, #0]
 8100684:	4a1b      	ldr	r2, [pc, #108]	; (81006f4 <HAL_Init+0xac>)
 8100686:	f043 0301 	orr.w	r3, r3, #1
 810068a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810068c:	2003      	movs	r0, #3
 810068e:	f000 f8fa 	bl	8100886 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100692:	f000 fbbd 	bl	8100e10 <HAL_RCC_GetSysClockFreq>
 8100696:	4602      	mov	r2, r0
 8100698:	4b15      	ldr	r3, [pc, #84]	; (81006f0 <HAL_Init+0xa8>)
 810069a:	699b      	ldr	r3, [r3, #24]
 810069c:	0a1b      	lsrs	r3, r3, #8
 810069e:	f003 030f 	and.w	r3, r3, #15
 81006a2:	4915      	ldr	r1, [pc, #84]	; (81006f8 <HAL_Init+0xb0>)
 81006a4:	5ccb      	ldrb	r3, [r1, r3]
 81006a6:	f003 031f 	and.w	r3, r3, #31
 81006aa:	fa22 f303 	lsr.w	r3, r2, r3
 81006ae:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81006b0:	4b0f      	ldr	r3, [pc, #60]	; (81006f0 <HAL_Init+0xa8>)
 81006b2:	699b      	ldr	r3, [r3, #24]
 81006b4:	f003 030f 	and.w	r3, r3, #15
 81006b8:	4a0f      	ldr	r2, [pc, #60]	; (81006f8 <HAL_Init+0xb0>)
 81006ba:	5cd3      	ldrb	r3, [r2, r3]
 81006bc:	f003 031f 	and.w	r3, r3, #31
 81006c0:	687a      	ldr	r2, [r7, #4]
 81006c2:	fa22 f303 	lsr.w	r3, r2, r3
 81006c6:	4a0d      	ldr	r2, [pc, #52]	; (81006fc <HAL_Init+0xb4>)
 81006c8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81006ca:	4b0c      	ldr	r3, [pc, #48]	; (81006fc <HAL_Init+0xb4>)
 81006cc:	681b      	ldr	r3, [r3, #0]
 81006ce:	4a0c      	ldr	r2, [pc, #48]	; (8100700 <HAL_Init+0xb8>)
 81006d0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81006d2:	200f      	movs	r0, #15
 81006d4:	f7ff ff04 	bl	81004e0 <HAL_InitTick>
 81006d8:	4603      	mov	r3, r0
 81006da:	2b00      	cmp	r3, #0
 81006dc:	d001      	beq.n	81006e2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81006de:	2301      	movs	r3, #1
 81006e0:	e002      	b.n	81006e8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81006e2:	f7ff fedf 	bl	81004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81006e6:	2300      	movs	r3, #0
}
 81006e8:	4618      	mov	r0, r3
 81006ea:	3708      	adds	r7, #8
 81006ec:	46bd      	mov	sp, r7
 81006ee:	bd80      	pop	{r7, pc}
 81006f0:	58024400 	.word	0x58024400
 81006f4:	40024400 	.word	0x40024400
 81006f8:	08102cec 	.word	0x08102cec
 81006fc:	10000004 	.word	0x10000004
 8100700:	10000000 	.word	0x10000000

08100704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100704:	b480      	push	{r7}
 8100706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100708:	4b06      	ldr	r3, [pc, #24]	; (8100724 <HAL_IncTick+0x20>)
 810070a:	781b      	ldrb	r3, [r3, #0]
 810070c:	461a      	mov	r2, r3
 810070e:	4b06      	ldr	r3, [pc, #24]	; (8100728 <HAL_IncTick+0x24>)
 8100710:	681b      	ldr	r3, [r3, #0]
 8100712:	4413      	add	r3, r2
 8100714:	4a04      	ldr	r2, [pc, #16]	; (8100728 <HAL_IncTick+0x24>)
 8100716:	6013      	str	r3, [r2, #0]
}
 8100718:	bf00      	nop
 810071a:	46bd      	mov	sp, r7
 810071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100720:	4770      	bx	lr
 8100722:	bf00      	nop
 8100724:	1000000c 	.word	0x1000000c
 8100728:	10004174 	.word	0x10004174

0810072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810072c:	b480      	push	{r7}
 810072e:	b085      	sub	sp, #20
 8100730:	af00      	add	r7, sp, #0
 8100732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100734:	687b      	ldr	r3, [r7, #4]
 8100736:	f003 0307 	and.w	r3, r3, #7
 810073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810073c:	4b0c      	ldr	r3, [pc, #48]	; (8100770 <__NVIC_SetPriorityGrouping+0x44>)
 810073e:	68db      	ldr	r3, [r3, #12]
 8100740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100742:	68ba      	ldr	r2, [r7, #8]
 8100744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100748:	4013      	ands	r3, r2
 810074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810074c:	68fb      	ldr	r3, [r7, #12]
 810074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100750:	68bb      	ldr	r3, [r7, #8]
 8100752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810075e:	4a04      	ldr	r2, [pc, #16]	; (8100770 <__NVIC_SetPriorityGrouping+0x44>)
 8100760:	68bb      	ldr	r3, [r7, #8]
 8100762:	60d3      	str	r3, [r2, #12]
}
 8100764:	bf00      	nop
 8100766:	3714      	adds	r7, #20
 8100768:	46bd      	mov	sp, r7
 810076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810076e:	4770      	bx	lr
 8100770:	e000ed00 	.word	0xe000ed00

08100774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100774:	b480      	push	{r7}
 8100776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100778:	4b04      	ldr	r3, [pc, #16]	; (810078c <__NVIC_GetPriorityGrouping+0x18>)
 810077a:	68db      	ldr	r3, [r3, #12]
 810077c:	0a1b      	lsrs	r3, r3, #8
 810077e:	f003 0307 	and.w	r3, r3, #7
}
 8100782:	4618      	mov	r0, r3
 8100784:	46bd      	mov	sp, r7
 8100786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810078a:	4770      	bx	lr
 810078c:	e000ed00 	.word	0xe000ed00

08100790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100790:	b480      	push	{r7}
 8100792:	b083      	sub	sp, #12
 8100794:	af00      	add	r7, sp, #0
 8100796:	4603      	mov	r3, r0
 8100798:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810079a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810079e:	2b00      	cmp	r3, #0
 81007a0:	db0b      	blt.n	81007ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81007a2:	88fb      	ldrh	r3, [r7, #6]
 81007a4:	f003 021f 	and.w	r2, r3, #31
 81007a8:	4907      	ldr	r1, [pc, #28]	; (81007c8 <__NVIC_EnableIRQ+0x38>)
 81007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007ae:	095b      	lsrs	r3, r3, #5
 81007b0:	2001      	movs	r0, #1
 81007b2:	fa00 f202 	lsl.w	r2, r0, r2
 81007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81007ba:	bf00      	nop
 81007bc:	370c      	adds	r7, #12
 81007be:	46bd      	mov	sp, r7
 81007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c4:	4770      	bx	lr
 81007c6:	bf00      	nop
 81007c8:	e000e100 	.word	0xe000e100

081007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81007cc:	b480      	push	{r7}
 81007ce:	b083      	sub	sp, #12
 81007d0:	af00      	add	r7, sp, #0
 81007d2:	4603      	mov	r3, r0
 81007d4:	6039      	str	r1, [r7, #0]
 81007d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007dc:	2b00      	cmp	r3, #0
 81007de:	db0a      	blt.n	81007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007e0:	683b      	ldr	r3, [r7, #0]
 81007e2:	b2da      	uxtb	r2, r3
 81007e4:	490c      	ldr	r1, [pc, #48]	; (8100818 <__NVIC_SetPriority+0x4c>)
 81007e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007ea:	0112      	lsls	r2, r2, #4
 81007ec:	b2d2      	uxtb	r2, r2
 81007ee:	440b      	add	r3, r1
 81007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81007f4:	e00a      	b.n	810080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007f6:	683b      	ldr	r3, [r7, #0]
 81007f8:	b2da      	uxtb	r2, r3
 81007fa:	4908      	ldr	r1, [pc, #32]	; (810081c <__NVIC_SetPriority+0x50>)
 81007fc:	88fb      	ldrh	r3, [r7, #6]
 81007fe:	f003 030f 	and.w	r3, r3, #15
 8100802:	3b04      	subs	r3, #4
 8100804:	0112      	lsls	r2, r2, #4
 8100806:	b2d2      	uxtb	r2, r2
 8100808:	440b      	add	r3, r1
 810080a:	761a      	strb	r2, [r3, #24]
}
 810080c:	bf00      	nop
 810080e:	370c      	adds	r7, #12
 8100810:	46bd      	mov	sp, r7
 8100812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100816:	4770      	bx	lr
 8100818:	e000e100 	.word	0xe000e100
 810081c:	e000ed00 	.word	0xe000ed00

08100820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100820:	b480      	push	{r7}
 8100822:	b089      	sub	sp, #36	; 0x24
 8100824:	af00      	add	r7, sp, #0
 8100826:	60f8      	str	r0, [r7, #12]
 8100828:	60b9      	str	r1, [r7, #8]
 810082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810082c:	68fb      	ldr	r3, [r7, #12]
 810082e:	f003 0307 	and.w	r3, r3, #7
 8100832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100834:	69fb      	ldr	r3, [r7, #28]
 8100836:	f1c3 0307 	rsb	r3, r3, #7
 810083a:	2b04      	cmp	r3, #4
 810083c:	bf28      	it	cs
 810083e:	2304      	movcs	r3, #4
 8100840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100842:	69fb      	ldr	r3, [r7, #28]
 8100844:	3304      	adds	r3, #4
 8100846:	2b06      	cmp	r3, #6
 8100848:	d902      	bls.n	8100850 <NVIC_EncodePriority+0x30>
 810084a:	69fb      	ldr	r3, [r7, #28]
 810084c:	3b03      	subs	r3, #3
 810084e:	e000      	b.n	8100852 <NVIC_EncodePriority+0x32>
 8100850:	2300      	movs	r3, #0
 8100852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100854:	f04f 32ff 	mov.w	r2, #4294967295
 8100858:	69bb      	ldr	r3, [r7, #24]
 810085a:	fa02 f303 	lsl.w	r3, r2, r3
 810085e:	43da      	mvns	r2, r3
 8100860:	68bb      	ldr	r3, [r7, #8]
 8100862:	401a      	ands	r2, r3
 8100864:	697b      	ldr	r3, [r7, #20]
 8100866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100868:	f04f 31ff 	mov.w	r1, #4294967295
 810086c:	697b      	ldr	r3, [r7, #20]
 810086e:	fa01 f303 	lsl.w	r3, r1, r3
 8100872:	43d9      	mvns	r1, r3
 8100874:	687b      	ldr	r3, [r7, #4]
 8100876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100878:	4313      	orrs	r3, r2
         );
}
 810087a:	4618      	mov	r0, r3
 810087c:	3724      	adds	r7, #36	; 0x24
 810087e:	46bd      	mov	sp, r7
 8100880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100884:	4770      	bx	lr

08100886 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100886:	b580      	push	{r7, lr}
 8100888:	b082      	sub	sp, #8
 810088a:	af00      	add	r7, sp, #0
 810088c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810088e:	6878      	ldr	r0, [r7, #4]
 8100890:	f7ff ff4c 	bl	810072c <__NVIC_SetPriorityGrouping>
}
 8100894:	bf00      	nop
 8100896:	3708      	adds	r7, #8
 8100898:	46bd      	mov	sp, r7
 810089a:	bd80      	pop	{r7, pc}

0810089c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810089c:	b580      	push	{r7, lr}
 810089e:	b086      	sub	sp, #24
 81008a0:	af00      	add	r7, sp, #0
 81008a2:	4603      	mov	r3, r0
 81008a4:	60b9      	str	r1, [r7, #8]
 81008a6:	607a      	str	r2, [r7, #4]
 81008a8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81008aa:	f7ff ff63 	bl	8100774 <__NVIC_GetPriorityGrouping>
 81008ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81008b0:	687a      	ldr	r2, [r7, #4]
 81008b2:	68b9      	ldr	r1, [r7, #8]
 81008b4:	6978      	ldr	r0, [r7, #20]
 81008b6:	f7ff ffb3 	bl	8100820 <NVIC_EncodePriority>
 81008ba:	4602      	mov	r2, r0
 81008bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81008c0:	4611      	mov	r1, r2
 81008c2:	4618      	mov	r0, r3
 81008c4:	f7ff ff82 	bl	81007cc <__NVIC_SetPriority>
}
 81008c8:	bf00      	nop
 81008ca:	3718      	adds	r7, #24
 81008cc:	46bd      	mov	sp, r7
 81008ce:	bd80      	pop	{r7, pc}

081008d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81008d0:	b580      	push	{r7, lr}
 81008d2:	b082      	sub	sp, #8
 81008d4:	af00      	add	r7, sp, #0
 81008d6:	4603      	mov	r3, r0
 81008d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81008da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81008de:	4618      	mov	r0, r3
 81008e0:	f7ff ff56 	bl	8100790 <__NVIC_EnableIRQ>
}
 81008e4:	bf00      	nop
 81008e6:	3708      	adds	r7, #8
 81008e8:	46bd      	mov	sp, r7
 81008ea:	bd80      	pop	{r7, pc}

081008ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81008ec:	b480      	push	{r7}
 81008ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81008f0:	4b07      	ldr	r3, [pc, #28]	; (8100910 <HAL_GetCurrentCPUID+0x24>)
 81008f2:	681b      	ldr	r3, [r3, #0]
 81008f4:	091b      	lsrs	r3, r3, #4
 81008f6:	f003 030f 	and.w	r3, r3, #15
 81008fa:	2b07      	cmp	r3, #7
 81008fc:	d101      	bne.n	8100902 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81008fe:	2303      	movs	r3, #3
 8100900:	e000      	b.n	8100904 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100902:	2301      	movs	r3, #1
  }
}
 8100904:	4618      	mov	r0, r3
 8100906:	46bd      	mov	sp, r7
 8100908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810090c:	4770      	bx	lr
 810090e:	bf00      	nop
 8100910:	e000ed00 	.word	0xe000ed00

08100914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100914:	b480      	push	{r7}
 8100916:	b089      	sub	sp, #36	; 0x24
 8100918:	af00      	add	r7, sp, #0
 810091a:	6078      	str	r0, [r7, #4]
 810091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810091e:	2300      	movs	r3, #0
 8100920:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100922:	4b89      	ldr	r3, [pc, #548]	; (8100b48 <HAL_GPIO_Init+0x234>)
 8100924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100926:	e194      	b.n	8100c52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100928:	683b      	ldr	r3, [r7, #0]
 810092a:	681a      	ldr	r2, [r3, #0]
 810092c:	2101      	movs	r1, #1
 810092e:	69fb      	ldr	r3, [r7, #28]
 8100930:	fa01 f303 	lsl.w	r3, r1, r3
 8100934:	4013      	ands	r3, r2
 8100936:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100938:	693b      	ldr	r3, [r7, #16]
 810093a:	2b00      	cmp	r3, #0
 810093c:	f000 8186 	beq.w	8100c4c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100940:	683b      	ldr	r3, [r7, #0]
 8100942:	685b      	ldr	r3, [r3, #4]
 8100944:	2b01      	cmp	r3, #1
 8100946:	d00b      	beq.n	8100960 <HAL_GPIO_Init+0x4c>
 8100948:	683b      	ldr	r3, [r7, #0]
 810094a:	685b      	ldr	r3, [r3, #4]
 810094c:	2b02      	cmp	r3, #2
 810094e:	d007      	beq.n	8100960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100950:	683b      	ldr	r3, [r7, #0]
 8100952:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100954:	2b11      	cmp	r3, #17
 8100956:	d003      	beq.n	8100960 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100958:	683b      	ldr	r3, [r7, #0]
 810095a:	685b      	ldr	r3, [r3, #4]
 810095c:	2b12      	cmp	r3, #18
 810095e:	d130      	bne.n	81009c2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100960:	687b      	ldr	r3, [r7, #4]
 8100962:	689b      	ldr	r3, [r3, #8]
 8100964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100966:	69fb      	ldr	r3, [r7, #28]
 8100968:	005b      	lsls	r3, r3, #1
 810096a:	2203      	movs	r2, #3
 810096c:	fa02 f303 	lsl.w	r3, r2, r3
 8100970:	43db      	mvns	r3, r3
 8100972:	69ba      	ldr	r2, [r7, #24]
 8100974:	4013      	ands	r3, r2
 8100976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100978:	683b      	ldr	r3, [r7, #0]
 810097a:	68da      	ldr	r2, [r3, #12]
 810097c:	69fb      	ldr	r3, [r7, #28]
 810097e:	005b      	lsls	r3, r3, #1
 8100980:	fa02 f303 	lsl.w	r3, r2, r3
 8100984:	69ba      	ldr	r2, [r7, #24]
 8100986:	4313      	orrs	r3, r2
 8100988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810098a:	687b      	ldr	r3, [r7, #4]
 810098c:	69ba      	ldr	r2, [r7, #24]
 810098e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100990:	687b      	ldr	r3, [r7, #4]
 8100992:	685b      	ldr	r3, [r3, #4]
 8100994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100996:	2201      	movs	r2, #1
 8100998:	69fb      	ldr	r3, [r7, #28]
 810099a:	fa02 f303 	lsl.w	r3, r2, r3
 810099e:	43db      	mvns	r3, r3
 81009a0:	69ba      	ldr	r2, [r7, #24]
 81009a2:	4013      	ands	r3, r2
 81009a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81009a6:	683b      	ldr	r3, [r7, #0]
 81009a8:	685b      	ldr	r3, [r3, #4]
 81009aa:	091b      	lsrs	r3, r3, #4
 81009ac:	f003 0201 	and.w	r2, r3, #1
 81009b0:	69fb      	ldr	r3, [r7, #28]
 81009b2:	fa02 f303 	lsl.w	r3, r2, r3
 81009b6:	69ba      	ldr	r2, [r7, #24]
 81009b8:	4313      	orrs	r3, r2
 81009ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81009bc:	687b      	ldr	r3, [r7, #4]
 81009be:	69ba      	ldr	r2, [r7, #24]
 81009c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81009c2:	687b      	ldr	r3, [r7, #4]
 81009c4:	68db      	ldr	r3, [r3, #12]
 81009c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81009c8:	69fb      	ldr	r3, [r7, #28]
 81009ca:	005b      	lsls	r3, r3, #1
 81009cc:	2203      	movs	r2, #3
 81009ce:	fa02 f303 	lsl.w	r3, r2, r3
 81009d2:	43db      	mvns	r3, r3
 81009d4:	69ba      	ldr	r2, [r7, #24]
 81009d6:	4013      	ands	r3, r2
 81009d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81009da:	683b      	ldr	r3, [r7, #0]
 81009dc:	689a      	ldr	r2, [r3, #8]
 81009de:	69fb      	ldr	r3, [r7, #28]
 81009e0:	005b      	lsls	r3, r3, #1
 81009e2:	fa02 f303 	lsl.w	r3, r2, r3
 81009e6:	69ba      	ldr	r2, [r7, #24]
 81009e8:	4313      	orrs	r3, r2
 81009ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81009ec:	687b      	ldr	r3, [r7, #4]
 81009ee:	69ba      	ldr	r2, [r7, #24]
 81009f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81009f2:	683b      	ldr	r3, [r7, #0]
 81009f4:	685b      	ldr	r3, [r3, #4]
 81009f6:	2b02      	cmp	r3, #2
 81009f8:	d003      	beq.n	8100a02 <HAL_GPIO_Init+0xee>
 81009fa:	683b      	ldr	r3, [r7, #0]
 81009fc:	685b      	ldr	r3, [r3, #4]
 81009fe:	2b12      	cmp	r3, #18
 8100a00:	d123      	bne.n	8100a4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100a02:	69fb      	ldr	r3, [r7, #28]
 8100a04:	08da      	lsrs	r2, r3, #3
 8100a06:	687b      	ldr	r3, [r7, #4]
 8100a08:	3208      	adds	r2, #8
 8100a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100a10:	69fb      	ldr	r3, [r7, #28]
 8100a12:	f003 0307 	and.w	r3, r3, #7
 8100a16:	009b      	lsls	r3, r3, #2
 8100a18:	220f      	movs	r2, #15
 8100a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a1e:	43db      	mvns	r3, r3
 8100a20:	69ba      	ldr	r2, [r7, #24]
 8100a22:	4013      	ands	r3, r2
 8100a24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100a26:	683b      	ldr	r3, [r7, #0]
 8100a28:	691a      	ldr	r2, [r3, #16]
 8100a2a:	69fb      	ldr	r3, [r7, #28]
 8100a2c:	f003 0307 	and.w	r3, r3, #7
 8100a30:	009b      	lsls	r3, r3, #2
 8100a32:	fa02 f303 	lsl.w	r3, r2, r3
 8100a36:	69ba      	ldr	r2, [r7, #24]
 8100a38:	4313      	orrs	r3, r2
 8100a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100a3c:	69fb      	ldr	r3, [r7, #28]
 8100a3e:	08da      	lsrs	r2, r3, #3
 8100a40:	687b      	ldr	r3, [r7, #4]
 8100a42:	3208      	adds	r2, #8
 8100a44:	69b9      	ldr	r1, [r7, #24]
 8100a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100a4a:	687b      	ldr	r3, [r7, #4]
 8100a4c:	681b      	ldr	r3, [r3, #0]
 8100a4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100a50:	69fb      	ldr	r3, [r7, #28]
 8100a52:	005b      	lsls	r3, r3, #1
 8100a54:	2203      	movs	r2, #3
 8100a56:	fa02 f303 	lsl.w	r3, r2, r3
 8100a5a:	43db      	mvns	r3, r3
 8100a5c:	69ba      	ldr	r2, [r7, #24]
 8100a5e:	4013      	ands	r3, r2
 8100a60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100a62:	683b      	ldr	r3, [r7, #0]
 8100a64:	685b      	ldr	r3, [r3, #4]
 8100a66:	f003 0203 	and.w	r2, r3, #3
 8100a6a:	69fb      	ldr	r3, [r7, #28]
 8100a6c:	005b      	lsls	r3, r3, #1
 8100a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a72:	69ba      	ldr	r2, [r7, #24]
 8100a74:	4313      	orrs	r3, r2
 8100a76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100a78:	687b      	ldr	r3, [r7, #4]
 8100a7a:	69ba      	ldr	r2, [r7, #24]
 8100a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8100a7e:	683b      	ldr	r3, [r7, #0]
 8100a80:	685b      	ldr	r3, [r3, #4]
 8100a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8100a86:	2b00      	cmp	r3, #0
 8100a88:	f000 80e0 	beq.w	8100c4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a8c:	4b2f      	ldr	r3, [pc, #188]	; (8100b4c <HAL_GPIO_Init+0x238>)
 8100a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a92:	4a2e      	ldr	r2, [pc, #184]	; (8100b4c <HAL_GPIO_Init+0x238>)
 8100a94:	f043 0302 	orr.w	r3, r3, #2
 8100a98:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100a9c:	4b2b      	ldr	r3, [pc, #172]	; (8100b4c <HAL_GPIO_Init+0x238>)
 8100a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100aa2:	f003 0302 	and.w	r3, r3, #2
 8100aa6:	60fb      	str	r3, [r7, #12]
 8100aa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100aaa:	4a29      	ldr	r2, [pc, #164]	; (8100b50 <HAL_GPIO_Init+0x23c>)
 8100aac:	69fb      	ldr	r3, [r7, #28]
 8100aae:	089b      	lsrs	r3, r3, #2
 8100ab0:	3302      	adds	r3, #2
 8100ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100ab8:	69fb      	ldr	r3, [r7, #28]
 8100aba:	f003 0303 	and.w	r3, r3, #3
 8100abe:	009b      	lsls	r3, r3, #2
 8100ac0:	220f      	movs	r2, #15
 8100ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ac6:	43db      	mvns	r3, r3
 8100ac8:	69ba      	ldr	r2, [r7, #24]
 8100aca:	4013      	ands	r3, r2
 8100acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100ace:	687b      	ldr	r3, [r7, #4]
 8100ad0:	4a20      	ldr	r2, [pc, #128]	; (8100b54 <HAL_GPIO_Init+0x240>)
 8100ad2:	4293      	cmp	r3, r2
 8100ad4:	d052      	beq.n	8100b7c <HAL_GPIO_Init+0x268>
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	4a1f      	ldr	r2, [pc, #124]	; (8100b58 <HAL_GPIO_Init+0x244>)
 8100ada:	4293      	cmp	r3, r2
 8100adc:	d031      	beq.n	8100b42 <HAL_GPIO_Init+0x22e>
 8100ade:	687b      	ldr	r3, [r7, #4]
 8100ae0:	4a1e      	ldr	r2, [pc, #120]	; (8100b5c <HAL_GPIO_Init+0x248>)
 8100ae2:	4293      	cmp	r3, r2
 8100ae4:	d02b      	beq.n	8100b3e <HAL_GPIO_Init+0x22a>
 8100ae6:	687b      	ldr	r3, [r7, #4]
 8100ae8:	4a1d      	ldr	r2, [pc, #116]	; (8100b60 <HAL_GPIO_Init+0x24c>)
 8100aea:	4293      	cmp	r3, r2
 8100aec:	d025      	beq.n	8100b3a <HAL_GPIO_Init+0x226>
 8100aee:	687b      	ldr	r3, [r7, #4]
 8100af0:	4a1c      	ldr	r2, [pc, #112]	; (8100b64 <HAL_GPIO_Init+0x250>)
 8100af2:	4293      	cmp	r3, r2
 8100af4:	d01f      	beq.n	8100b36 <HAL_GPIO_Init+0x222>
 8100af6:	687b      	ldr	r3, [r7, #4]
 8100af8:	4a1b      	ldr	r2, [pc, #108]	; (8100b68 <HAL_GPIO_Init+0x254>)
 8100afa:	4293      	cmp	r3, r2
 8100afc:	d019      	beq.n	8100b32 <HAL_GPIO_Init+0x21e>
 8100afe:	687b      	ldr	r3, [r7, #4]
 8100b00:	4a1a      	ldr	r2, [pc, #104]	; (8100b6c <HAL_GPIO_Init+0x258>)
 8100b02:	4293      	cmp	r3, r2
 8100b04:	d013      	beq.n	8100b2e <HAL_GPIO_Init+0x21a>
 8100b06:	687b      	ldr	r3, [r7, #4]
 8100b08:	4a19      	ldr	r2, [pc, #100]	; (8100b70 <HAL_GPIO_Init+0x25c>)
 8100b0a:	4293      	cmp	r3, r2
 8100b0c:	d00d      	beq.n	8100b2a <HAL_GPIO_Init+0x216>
 8100b0e:	687b      	ldr	r3, [r7, #4]
 8100b10:	4a18      	ldr	r2, [pc, #96]	; (8100b74 <HAL_GPIO_Init+0x260>)
 8100b12:	4293      	cmp	r3, r2
 8100b14:	d007      	beq.n	8100b26 <HAL_GPIO_Init+0x212>
 8100b16:	687b      	ldr	r3, [r7, #4]
 8100b18:	4a17      	ldr	r2, [pc, #92]	; (8100b78 <HAL_GPIO_Init+0x264>)
 8100b1a:	4293      	cmp	r3, r2
 8100b1c:	d101      	bne.n	8100b22 <HAL_GPIO_Init+0x20e>
 8100b1e:	2309      	movs	r3, #9
 8100b20:	e02d      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b22:	230a      	movs	r3, #10
 8100b24:	e02b      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b26:	2308      	movs	r3, #8
 8100b28:	e029      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b2a:	2307      	movs	r3, #7
 8100b2c:	e027      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b2e:	2306      	movs	r3, #6
 8100b30:	e025      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b32:	2305      	movs	r3, #5
 8100b34:	e023      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b36:	2304      	movs	r3, #4
 8100b38:	e021      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b3a:	2303      	movs	r3, #3
 8100b3c:	e01f      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b3e:	2302      	movs	r3, #2
 8100b40:	e01d      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b42:	2301      	movs	r3, #1
 8100b44:	e01b      	b.n	8100b7e <HAL_GPIO_Init+0x26a>
 8100b46:	bf00      	nop
 8100b48:	580000c0 	.word	0x580000c0
 8100b4c:	58024400 	.word	0x58024400
 8100b50:	58000400 	.word	0x58000400
 8100b54:	58020000 	.word	0x58020000
 8100b58:	58020400 	.word	0x58020400
 8100b5c:	58020800 	.word	0x58020800
 8100b60:	58020c00 	.word	0x58020c00
 8100b64:	58021000 	.word	0x58021000
 8100b68:	58021400 	.word	0x58021400
 8100b6c:	58021800 	.word	0x58021800
 8100b70:	58021c00 	.word	0x58021c00
 8100b74:	58022000 	.word	0x58022000
 8100b78:	58022400 	.word	0x58022400
 8100b7c:	2300      	movs	r3, #0
 8100b7e:	69fa      	ldr	r2, [r7, #28]
 8100b80:	f002 0203 	and.w	r2, r2, #3
 8100b84:	0092      	lsls	r2, r2, #2
 8100b86:	4093      	lsls	r3, r2
 8100b88:	69ba      	ldr	r2, [r7, #24]
 8100b8a:	4313      	orrs	r3, r2
 8100b8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100b8e:	4938      	ldr	r1, [pc, #224]	; (8100c70 <HAL_GPIO_Init+0x35c>)
 8100b90:	69fb      	ldr	r3, [r7, #28]
 8100b92:	089b      	lsrs	r3, r3, #2
 8100b94:	3302      	adds	r3, #2
 8100b96:	69ba      	ldr	r2, [r7, #24]
 8100b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100b9c:	697b      	ldr	r3, [r7, #20]
 8100b9e:	681b      	ldr	r3, [r3, #0]
 8100ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ba2:	693b      	ldr	r3, [r7, #16]
 8100ba4:	43db      	mvns	r3, r3
 8100ba6:	69ba      	ldr	r2, [r7, #24]
 8100ba8:	4013      	ands	r3, r2
 8100baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8100bac:	683b      	ldr	r3, [r7, #0]
 8100bae:	685b      	ldr	r3, [r3, #4]
 8100bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100bb4:	2b00      	cmp	r3, #0
 8100bb6:	d003      	beq.n	8100bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8100bb8:	69ba      	ldr	r2, [r7, #24]
 8100bba:	693b      	ldr	r3, [r7, #16]
 8100bbc:	4313      	orrs	r3, r2
 8100bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100bc0:	697b      	ldr	r3, [r7, #20]
 8100bc2:	69ba      	ldr	r2, [r7, #24]
 8100bc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8100bc6:	697b      	ldr	r3, [r7, #20]
 8100bc8:	685b      	ldr	r3, [r3, #4]
 8100bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bcc:	693b      	ldr	r3, [r7, #16]
 8100bce:	43db      	mvns	r3, r3
 8100bd0:	69ba      	ldr	r2, [r7, #24]
 8100bd2:	4013      	ands	r3, r2
 8100bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8100bd6:	683b      	ldr	r3, [r7, #0]
 8100bd8:	685b      	ldr	r3, [r3, #4]
 8100bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100bde:	2b00      	cmp	r3, #0
 8100be0:	d003      	beq.n	8100bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8100be2:	69ba      	ldr	r2, [r7, #24]
 8100be4:	693b      	ldr	r3, [r7, #16]
 8100be6:	4313      	orrs	r3, r2
 8100be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100bea:	697b      	ldr	r3, [r7, #20]
 8100bec:	69ba      	ldr	r2, [r7, #24]
 8100bee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100bf4:	681b      	ldr	r3, [r3, #0]
 8100bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bf8:	693b      	ldr	r3, [r7, #16]
 8100bfa:	43db      	mvns	r3, r3
 8100bfc:	69ba      	ldr	r2, [r7, #24]
 8100bfe:	4013      	ands	r3, r2
 8100c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	685b      	ldr	r3, [r3, #4]
 8100c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100c0a:	2b00      	cmp	r3, #0
 8100c0c:	d003      	beq.n	8100c16 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8100c0e:	69ba      	ldr	r2, [r7, #24]
 8100c10:	693b      	ldr	r3, [r7, #16]
 8100c12:	4313      	orrs	r3, r2
 8100c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100c1a:	69bb      	ldr	r3, [r7, #24]
 8100c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100c22:	685b      	ldr	r3, [r3, #4]
 8100c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c26:	693b      	ldr	r3, [r7, #16]
 8100c28:	43db      	mvns	r3, r3
 8100c2a:	69ba      	ldr	r2, [r7, #24]
 8100c2c:	4013      	ands	r3, r2
 8100c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8100c30:	683b      	ldr	r3, [r7, #0]
 8100c32:	685b      	ldr	r3, [r3, #4]
 8100c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100c38:	2b00      	cmp	r3, #0
 8100c3a:	d003      	beq.n	8100c44 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8100c3c:	69ba      	ldr	r2, [r7, #24]
 8100c3e:	693b      	ldr	r3, [r7, #16]
 8100c40:	4313      	orrs	r3, r2
 8100c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100c48:	69bb      	ldr	r3, [r7, #24]
 8100c4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8100c4c:	69fb      	ldr	r3, [r7, #28]
 8100c4e:	3301      	adds	r3, #1
 8100c50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100c52:	683b      	ldr	r3, [r7, #0]
 8100c54:	681a      	ldr	r2, [r3, #0]
 8100c56:	69fb      	ldr	r3, [r7, #28]
 8100c58:	fa22 f303 	lsr.w	r3, r2, r3
 8100c5c:	2b00      	cmp	r3, #0
 8100c5e:	f47f ae63 	bne.w	8100928 <HAL_GPIO_Init+0x14>
  }
}
 8100c62:	bf00      	nop
 8100c64:	bf00      	nop
 8100c66:	3724      	adds	r7, #36	; 0x24
 8100c68:	46bd      	mov	sp, r7
 8100c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c6e:	4770      	bx	lr
 8100c70:	58000400 	.word	0x58000400

08100c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100c74:	b480      	push	{r7}
 8100c76:	b083      	sub	sp, #12
 8100c78:	af00      	add	r7, sp, #0
 8100c7a:	6078      	str	r0, [r7, #4]
 8100c7c:	460b      	mov	r3, r1
 8100c7e:	807b      	strh	r3, [r7, #2]
 8100c80:	4613      	mov	r3, r2
 8100c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100c84:	787b      	ldrb	r3, [r7, #1]
 8100c86:	2b00      	cmp	r3, #0
 8100c88:	d003      	beq.n	8100c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100c8a:	887a      	ldrh	r2, [r7, #2]
 8100c8c:	687b      	ldr	r3, [r7, #4]
 8100c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100c90:	e003      	b.n	8100c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100c92:	887b      	ldrh	r3, [r7, #2]
 8100c94:	041a      	lsls	r2, r3, #16
 8100c96:	687b      	ldr	r3, [r7, #4]
 8100c98:	619a      	str	r2, [r3, #24]
}
 8100c9a:	bf00      	nop
 8100c9c:	370c      	adds	r7, #12
 8100c9e:	46bd      	mov	sp, r7
 8100ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ca4:	4770      	bx	lr

08100ca6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100ca6:	b480      	push	{r7}
 8100ca8:	b085      	sub	sp, #20
 8100caa:	af00      	add	r7, sp, #0
 8100cac:	6078      	str	r0, [r7, #4]
 8100cae:	460b      	mov	r3, r1
 8100cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100cb2:	687b      	ldr	r3, [r7, #4]
 8100cb4:	695b      	ldr	r3, [r3, #20]
 8100cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100cb8:	887a      	ldrh	r2, [r7, #2]
 8100cba:	68fb      	ldr	r3, [r7, #12]
 8100cbc:	4013      	ands	r3, r2
 8100cbe:	041a      	lsls	r2, r3, #16
 8100cc0:	68fb      	ldr	r3, [r7, #12]
 8100cc2:	43d9      	mvns	r1, r3
 8100cc4:	887b      	ldrh	r3, [r7, #2]
 8100cc6:	400b      	ands	r3, r1
 8100cc8:	431a      	orrs	r2, r3
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	619a      	str	r2, [r3, #24]
}
 8100cce:	bf00      	nop
 8100cd0:	3714      	adds	r7, #20
 8100cd2:	46bd      	mov	sp, r7
 8100cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cd8:	4770      	bx	lr
	...

08100cdc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100cdc:	b480      	push	{r7}
 8100cde:	b083      	sub	sp, #12
 8100ce0:	af00      	add	r7, sp, #0
 8100ce2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100ce4:	4b05      	ldr	r3, [pc, #20]	; (8100cfc <HAL_HSEM_ActivateNotification+0x20>)
 8100ce6:	681a      	ldr	r2, [r3, #0]
 8100ce8:	4904      	ldr	r1, [pc, #16]	; (8100cfc <HAL_HSEM_ActivateNotification+0x20>)
 8100cea:	687b      	ldr	r3, [r7, #4]
 8100cec:	4313      	orrs	r3, r2
 8100cee:	600b      	str	r3, [r1, #0]
#endif
}
 8100cf0:	bf00      	nop
 8100cf2:	370c      	adds	r7, #12
 8100cf4:	46bd      	mov	sp, r7
 8100cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cfa:	4770      	bx	lr
 8100cfc:	58026510 	.word	0x58026510

08100d00 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100d00:	b580      	push	{r7, lr}
 8100d02:	b084      	sub	sp, #16
 8100d04:	af00      	add	r7, sp, #0
 8100d06:	60f8      	str	r0, [r7, #12]
 8100d08:	460b      	mov	r3, r1
 8100d0a:	607a      	str	r2, [r7, #4]
 8100d0c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100d0e:	4b37      	ldr	r3, [pc, #220]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d10:	681b      	ldr	r3, [r3, #0]
 8100d12:	f023 0201 	bic.w	r2, r3, #1
 8100d16:	4935      	ldr	r1, [pc, #212]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d18:	68fb      	ldr	r3, [r7, #12]
 8100d1a:	4313      	orrs	r3, r2
 8100d1c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100d1e:	687b      	ldr	r3, [r7, #4]
 8100d20:	2b00      	cmp	r3, #0
 8100d22:	d123      	bne.n	8100d6c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100d24:	f7ff fde2 	bl	81008ec <HAL_GetCurrentCPUID>
 8100d28:	4603      	mov	r3, r0
 8100d2a:	2b03      	cmp	r3, #3
 8100d2c:	d158      	bne.n	8100de0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100d2e:	4b2f      	ldr	r3, [pc, #188]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d30:	691b      	ldr	r3, [r3, #16]
 8100d32:	4a2e      	ldr	r2, [pc, #184]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d34:	f023 0301 	bic.w	r3, r3, #1
 8100d38:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d3a:	4b2d      	ldr	r3, [pc, #180]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d3c:	691b      	ldr	r3, [r3, #16]
 8100d3e:	4a2c      	ldr	r2, [pc, #176]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d40:	f043 0304 	orr.w	r3, r3, #4
 8100d44:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100d46:	f3bf 8f4f 	dsb	sy
}
 8100d4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d4c:	f3bf 8f6f 	isb	sy
}
 8100d50:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d52:	7afb      	ldrb	r3, [r7, #11]
 8100d54:	2b01      	cmp	r3, #1
 8100d56:	d101      	bne.n	8100d5c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d58:	bf30      	wfi
 8100d5a:	e000      	b.n	8100d5e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d5c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d5e:	4b24      	ldr	r3, [pc, #144]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d60:	691b      	ldr	r3, [r3, #16]
 8100d62:	4a23      	ldr	r2, [pc, #140]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d64:	f023 0304 	bic.w	r3, r3, #4
 8100d68:	6113      	str	r3, [r2, #16]
 8100d6a:	e03c      	b.n	8100de6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	2b01      	cmp	r3, #1
 8100d70:	d123      	bne.n	8100dba <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100d72:	f7ff fdbb 	bl	81008ec <HAL_GetCurrentCPUID>
 8100d76:	4603      	mov	r3, r0
 8100d78:	2b01      	cmp	r3, #1
 8100d7a:	d133      	bne.n	8100de4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100d7c:	4b1b      	ldr	r3, [pc, #108]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d7e:	695b      	ldr	r3, [r3, #20]
 8100d80:	4a1a      	ldr	r2, [pc, #104]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d82:	f023 0302 	bic.w	r3, r3, #2
 8100d86:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d88:	4b19      	ldr	r3, [pc, #100]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d8a:	691b      	ldr	r3, [r3, #16]
 8100d8c:	4a18      	ldr	r2, [pc, #96]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d8e:	f043 0304 	orr.w	r3, r3, #4
 8100d92:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100d94:	f3bf 8f4f 	dsb	sy
}
 8100d98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d9a:	f3bf 8f6f 	isb	sy
}
 8100d9e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100da0:	7afb      	ldrb	r3, [r7, #11]
 8100da2:	2b01      	cmp	r3, #1
 8100da4:	d101      	bne.n	8100daa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100da6:	bf30      	wfi
 8100da8:	e000      	b.n	8100dac <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100daa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100dac:	4b10      	ldr	r3, [pc, #64]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100dae:	691b      	ldr	r3, [r3, #16]
 8100db0:	4a0f      	ldr	r2, [pc, #60]	; (8100df0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100db2:	f023 0304 	bic.w	r3, r3, #4
 8100db6:	6113      	str	r3, [r2, #16]
 8100db8:	e015      	b.n	8100de6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100dba:	f7ff fd97 	bl	81008ec <HAL_GetCurrentCPUID>
 8100dbe:	4603      	mov	r3, r0
 8100dc0:	2b03      	cmp	r3, #3
 8100dc2:	d106      	bne.n	8100dd2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100dc4:	4b09      	ldr	r3, [pc, #36]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dc6:	691b      	ldr	r3, [r3, #16]
 8100dc8:	4a08      	ldr	r2, [pc, #32]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dca:	f023 0304 	bic.w	r3, r3, #4
 8100dce:	6113      	str	r3, [r2, #16]
 8100dd0:	e009      	b.n	8100de6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100dd2:	4b06      	ldr	r3, [pc, #24]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dd4:	695b      	ldr	r3, [r3, #20]
 8100dd6:	4a05      	ldr	r2, [pc, #20]	; (8100dec <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dd8:	f023 0304 	bic.w	r3, r3, #4
 8100ddc:	6153      	str	r3, [r2, #20]
 8100dde:	e002      	b.n	8100de6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100de0:	bf00      	nop
 8100de2:	e000      	b.n	8100de6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100de4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100de6:	3710      	adds	r7, #16
 8100de8:	46bd      	mov	sp, r7
 8100dea:	bd80      	pop	{r7, pc}
 8100dec:	58024800 	.word	0x58024800
 8100df0:	e000ed00 	.word	0xe000ed00

08100df4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100df4:	b580      	push	{r7, lr}
 8100df6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100df8:	f7ff fd78 	bl	81008ec <HAL_GetCurrentCPUID>
 8100dfc:	4603      	mov	r3, r0
 8100dfe:	2b03      	cmp	r3, #3
 8100e00:	d101      	bne.n	8100e06 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100e02:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100e04:	e001      	b.n	8100e0a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100e06:	bf40      	sev
    __WFE ();
 8100e08:	bf20      	wfe
}
 8100e0a:	bf00      	nop
 8100e0c:	bd80      	pop	{r7, pc}
	...

08100e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100e10:	b480      	push	{r7}
 8100e12:	b089      	sub	sp, #36	; 0x24
 8100e14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100e16:	4bb3      	ldr	r3, [pc, #716]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e18:	691b      	ldr	r3, [r3, #16]
 8100e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100e1e:	2b18      	cmp	r3, #24
 8100e20:	f200 8155 	bhi.w	81010ce <HAL_RCC_GetSysClockFreq+0x2be>
 8100e24:	a201      	add	r2, pc, #4	; (adr r2, 8100e2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8100e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100e2a:	bf00      	nop
 8100e2c:	08100e91 	.word	0x08100e91
 8100e30:	081010cf 	.word	0x081010cf
 8100e34:	081010cf 	.word	0x081010cf
 8100e38:	081010cf 	.word	0x081010cf
 8100e3c:	081010cf 	.word	0x081010cf
 8100e40:	081010cf 	.word	0x081010cf
 8100e44:	081010cf 	.word	0x081010cf
 8100e48:	081010cf 	.word	0x081010cf
 8100e4c:	08100eb7 	.word	0x08100eb7
 8100e50:	081010cf 	.word	0x081010cf
 8100e54:	081010cf 	.word	0x081010cf
 8100e58:	081010cf 	.word	0x081010cf
 8100e5c:	081010cf 	.word	0x081010cf
 8100e60:	081010cf 	.word	0x081010cf
 8100e64:	081010cf 	.word	0x081010cf
 8100e68:	081010cf 	.word	0x081010cf
 8100e6c:	08100ebd 	.word	0x08100ebd
 8100e70:	081010cf 	.word	0x081010cf
 8100e74:	081010cf 	.word	0x081010cf
 8100e78:	081010cf 	.word	0x081010cf
 8100e7c:	081010cf 	.word	0x081010cf
 8100e80:	081010cf 	.word	0x081010cf
 8100e84:	081010cf 	.word	0x081010cf
 8100e88:	081010cf 	.word	0x081010cf
 8100e8c:	08100ec3 	.word	0x08100ec3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100e90:	4b94      	ldr	r3, [pc, #592]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e92:	681b      	ldr	r3, [r3, #0]
 8100e94:	f003 0320 	and.w	r3, r3, #32
 8100e98:	2b00      	cmp	r3, #0
 8100e9a:	d009      	beq.n	8100eb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100e9c:	4b91      	ldr	r3, [pc, #580]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e9e:	681b      	ldr	r3, [r3, #0]
 8100ea0:	08db      	lsrs	r3, r3, #3
 8100ea2:	f003 0303 	and.w	r3, r3, #3
 8100ea6:	4a90      	ldr	r2, [pc, #576]	; (81010e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8100eac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100eae:	e111      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100eb0:	4b8d      	ldr	r3, [pc, #564]	; (81010e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100eb2:	61bb      	str	r3, [r7, #24]
    break;
 8100eb4:	e10e      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100eb6:	4b8d      	ldr	r3, [pc, #564]	; (81010ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100eb8:	61bb      	str	r3, [r7, #24]
    break;
 8100eba:	e10b      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100ebc:	4b8c      	ldr	r3, [pc, #560]	; (81010f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100ebe:	61bb      	str	r3, [r7, #24]
    break;
 8100ec0:	e108      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100ec2:	4b88      	ldr	r3, [pc, #544]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100ec6:	f003 0303 	and.w	r3, r3, #3
 8100eca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100ecc:	4b85      	ldr	r3, [pc, #532]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100ed0:	091b      	lsrs	r3, r3, #4
 8100ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100ed6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100ed8:	4b82      	ldr	r3, [pc, #520]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100edc:	f003 0301 	and.w	r3, r3, #1
 8100ee0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100ee2:	4b80      	ldr	r3, [pc, #512]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100ee6:	08db      	lsrs	r3, r3, #3
 8100ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100eec:	68fa      	ldr	r2, [r7, #12]
 8100eee:	fb02 f303 	mul.w	r3, r2, r3
 8100ef2:	ee07 3a90 	vmov	s15, r3
 8100ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100efa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100efe:	693b      	ldr	r3, [r7, #16]
 8100f00:	2b00      	cmp	r3, #0
 8100f02:	f000 80e1 	beq.w	81010c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100f06:	697b      	ldr	r3, [r7, #20]
 8100f08:	2b02      	cmp	r3, #2
 8100f0a:	f000 8083 	beq.w	8101014 <HAL_RCC_GetSysClockFreq+0x204>
 8100f0e:	697b      	ldr	r3, [r7, #20]
 8100f10:	2b02      	cmp	r3, #2
 8100f12:	f200 80a1 	bhi.w	8101058 <HAL_RCC_GetSysClockFreq+0x248>
 8100f16:	697b      	ldr	r3, [r7, #20]
 8100f18:	2b00      	cmp	r3, #0
 8100f1a:	d003      	beq.n	8100f24 <HAL_RCC_GetSysClockFreq+0x114>
 8100f1c:	697b      	ldr	r3, [r7, #20]
 8100f1e:	2b01      	cmp	r3, #1
 8100f20:	d056      	beq.n	8100fd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100f22:	e099      	b.n	8101058 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f24:	4b6f      	ldr	r3, [pc, #444]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f26:	681b      	ldr	r3, [r3, #0]
 8100f28:	f003 0320 	and.w	r3, r3, #32
 8100f2c:	2b00      	cmp	r3, #0
 8100f2e:	d02d      	beq.n	8100f8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100f30:	4b6c      	ldr	r3, [pc, #432]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f32:	681b      	ldr	r3, [r3, #0]
 8100f34:	08db      	lsrs	r3, r3, #3
 8100f36:	f003 0303 	and.w	r3, r3, #3
 8100f3a:	4a6b      	ldr	r2, [pc, #428]	; (81010e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8100f40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	ee07 3a90 	vmov	s15, r3
 8100f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f4c:	693b      	ldr	r3, [r7, #16]
 8100f4e:	ee07 3a90 	vmov	s15, r3
 8100f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f5a:	4b62      	ldr	r3, [pc, #392]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f62:	ee07 3a90 	vmov	s15, r3
 8100f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81010f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100f8a:	e087      	b.n	810109c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f8c:	693b      	ldr	r3, [r7, #16]
 8100f8e:	ee07 3a90 	vmov	s15, r3
 8100f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f96:	eddf 6a58 	vldr	s13, [pc, #352]	; 81010f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f9e:	4b51      	ldr	r3, [pc, #324]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fa6:	ee07 3a90 	vmov	s15, r3
 8100faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 81010f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100fce:	e065      	b.n	810109c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100fd0:	693b      	ldr	r3, [r7, #16]
 8100fd2:	ee07 3a90 	vmov	s15, r3
 8100fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fda:	eddf 6a48 	vldr	s13, [pc, #288]	; 81010fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8100fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fe2:	4b40      	ldr	r3, [pc, #256]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fea:	ee07 3a90 	vmov	s15, r3
 8100fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100ff6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81010f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810100e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101012:	e043      	b.n	810109c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101014:	693b      	ldr	r3, [r7, #16]
 8101016:	ee07 3a90 	vmov	s15, r3
 810101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810101e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101100 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101026:	4b2f      	ldr	r3, [pc, #188]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810102a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810102e:	ee07 3a90 	vmov	s15, r3
 8101032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101036:	ed97 6a02 	vldr	s12, [r7, #8]
 810103a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81010f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810103e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810104a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101056:	e021      	b.n	810109c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101058:	693b      	ldr	r3, [r7, #16]
 810105a:	ee07 3a90 	vmov	s15, r3
 810105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101062:	eddf 6a26 	vldr	s13, [pc, #152]	; 81010fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8101066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810106a:	4b1e      	ldr	r3, [pc, #120]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810106e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101072:	ee07 3a90 	vmov	s15, r3
 8101076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810107a:	ed97 6a02 	vldr	s12, [r7, #8]
 810107e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81010f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810108a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810108e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810109a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810109c:	4b11      	ldr	r3, [pc, #68]	; (81010e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010a0:	0a5b      	lsrs	r3, r3, #9
 81010a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81010a6:	3301      	adds	r3, #1
 81010a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81010aa:	683b      	ldr	r3, [r7, #0]
 81010ac:	ee07 3a90 	vmov	s15, r3
 81010b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81010b4:	edd7 6a07 	vldr	s13, [r7, #28]
 81010b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81010c0:	ee17 3a90 	vmov	r3, s15
 81010c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81010c6:	e005      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81010c8:	2300      	movs	r3, #0
 81010ca:	61bb      	str	r3, [r7, #24]
    break;
 81010cc:	e002      	b.n	81010d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81010ce:	4b07      	ldr	r3, [pc, #28]	; (81010ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81010d0:	61bb      	str	r3, [r7, #24]
    break;
 81010d2:	bf00      	nop
  }

  return sysclockfreq;
 81010d4:	69bb      	ldr	r3, [r7, #24]
}
 81010d6:	4618      	mov	r0, r3
 81010d8:	3724      	adds	r7, #36	; 0x24
 81010da:	46bd      	mov	sp, r7
 81010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e0:	4770      	bx	lr
 81010e2:	bf00      	nop
 81010e4:	58024400 	.word	0x58024400
 81010e8:	03d09000 	.word	0x03d09000
 81010ec:	003d0900 	.word	0x003d0900
 81010f0:	007a1200 	.word	0x007a1200
 81010f4:	46000000 	.word	0x46000000
 81010f8:	4c742400 	.word	0x4c742400
 81010fc:	4a742400 	.word	0x4a742400
 8101100:	4af42400 	.word	0x4af42400

08101104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101104:	b580      	push	{r7, lr}
 8101106:	b082      	sub	sp, #8
 8101108:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810110a:	f7ff fe81 	bl	8100e10 <HAL_RCC_GetSysClockFreq>
 810110e:	4602      	mov	r2, r0
 8101110:	4b11      	ldr	r3, [pc, #68]	; (8101158 <HAL_RCC_GetHCLKFreq+0x54>)
 8101112:	699b      	ldr	r3, [r3, #24]
 8101114:	0a1b      	lsrs	r3, r3, #8
 8101116:	f003 030f 	and.w	r3, r3, #15
 810111a:	4910      	ldr	r1, [pc, #64]	; (810115c <HAL_RCC_GetHCLKFreq+0x58>)
 810111c:	5ccb      	ldrb	r3, [r1, r3]
 810111e:	f003 031f 	and.w	r3, r3, #31
 8101122:	fa22 f303 	lsr.w	r3, r2, r3
 8101126:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101128:	4b0b      	ldr	r3, [pc, #44]	; (8101158 <HAL_RCC_GetHCLKFreq+0x54>)
 810112a:	699b      	ldr	r3, [r3, #24]
 810112c:	f003 030f 	and.w	r3, r3, #15
 8101130:	4a0a      	ldr	r2, [pc, #40]	; (810115c <HAL_RCC_GetHCLKFreq+0x58>)
 8101132:	5cd3      	ldrb	r3, [r2, r3]
 8101134:	f003 031f 	and.w	r3, r3, #31
 8101138:	687a      	ldr	r2, [r7, #4]
 810113a:	fa22 f303 	lsr.w	r3, r2, r3
 810113e:	4a08      	ldr	r2, [pc, #32]	; (8101160 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101140:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101142:	4b07      	ldr	r3, [pc, #28]	; (8101160 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101144:	681b      	ldr	r3, [r3, #0]
 8101146:	4a07      	ldr	r2, [pc, #28]	; (8101164 <HAL_RCC_GetHCLKFreq+0x60>)
 8101148:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810114a:	4b05      	ldr	r3, [pc, #20]	; (8101160 <HAL_RCC_GetHCLKFreq+0x5c>)
 810114c:	681b      	ldr	r3, [r3, #0]
}
 810114e:	4618      	mov	r0, r3
 8101150:	3708      	adds	r7, #8
 8101152:	46bd      	mov	sp, r7
 8101154:	bd80      	pop	{r7, pc}
 8101156:	bf00      	nop
 8101158:	58024400 	.word	0x58024400
 810115c:	08102cec 	.word	0x08102cec
 8101160:	10000004 	.word	0x10000004
 8101164:	10000000 	.word	0x10000000

08101168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101168:	b580      	push	{r7, lr}
 810116a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810116c:	f7ff ffca 	bl	8101104 <HAL_RCC_GetHCLKFreq>
 8101170:	4602      	mov	r2, r0
 8101172:	4b06      	ldr	r3, [pc, #24]	; (810118c <HAL_RCC_GetPCLK1Freq+0x24>)
 8101174:	69db      	ldr	r3, [r3, #28]
 8101176:	091b      	lsrs	r3, r3, #4
 8101178:	f003 0307 	and.w	r3, r3, #7
 810117c:	4904      	ldr	r1, [pc, #16]	; (8101190 <HAL_RCC_GetPCLK1Freq+0x28>)
 810117e:	5ccb      	ldrb	r3, [r1, r3]
 8101180:	f003 031f 	and.w	r3, r3, #31
 8101184:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101188:	4618      	mov	r0, r3
 810118a:	bd80      	pop	{r7, pc}
 810118c:	58024400 	.word	0x58024400
 8101190:	08102cec 	.word	0x08102cec

08101194 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101194:	b480      	push	{r7}
 8101196:	b083      	sub	sp, #12
 8101198:	af00      	add	r7, sp, #0
 810119a:	6078      	str	r0, [r7, #4]
 810119c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	223f      	movs	r2, #63	; 0x3f
 81011a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81011a4:	4b1a      	ldr	r3, [pc, #104]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011a6:	691b      	ldr	r3, [r3, #16]
 81011a8:	f003 0207 	and.w	r2, r3, #7
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81011b0:	4b17      	ldr	r3, [pc, #92]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011b2:	699b      	ldr	r3, [r3, #24]
 81011b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81011bc:	4b14      	ldr	r3, [pc, #80]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011be:	699b      	ldr	r3, [r3, #24]
 81011c0:	f003 020f 	and.w	r2, r3, #15
 81011c4:	687b      	ldr	r3, [r7, #4]
 81011c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81011c8:	4b11      	ldr	r3, [pc, #68]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011ca:	699b      	ldr	r3, [r3, #24]
 81011cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81011d0:	687b      	ldr	r3, [r7, #4]
 81011d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81011d4:	4b0e      	ldr	r3, [pc, #56]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011d6:	69db      	ldr	r3, [r3, #28]
 81011d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81011dc:	687b      	ldr	r3, [r7, #4]
 81011de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81011e0:	4b0b      	ldr	r3, [pc, #44]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011e2:	69db      	ldr	r3, [r3, #28]
 81011e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81011ec:	4b08      	ldr	r3, [pc, #32]	; (8101210 <HAL_RCC_GetClockConfig+0x7c>)
 81011ee:	6a1b      	ldr	r3, [r3, #32]
 81011f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81011f4:	687b      	ldr	r3, [r7, #4]
 81011f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81011f8:	4b06      	ldr	r3, [pc, #24]	; (8101214 <HAL_RCC_GetClockConfig+0x80>)
 81011fa:	681b      	ldr	r3, [r3, #0]
 81011fc:	f003 020f 	and.w	r2, r3, #15
 8101200:	683b      	ldr	r3, [r7, #0]
 8101202:	601a      	str	r2, [r3, #0]
}
 8101204:	bf00      	nop
 8101206:	370c      	adds	r7, #12
 8101208:	46bd      	mov	sp, r7
 810120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810120e:	4770      	bx	lr
 8101210:	58024400 	.word	0x58024400
 8101214:	52002000 	.word	0x52002000

08101218 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8101218:	b580      	push	{r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101220:	687b      	ldr	r3, [r7, #4]
 8101222:	2b00      	cmp	r3, #0
 8101224:	d101      	bne.n	810122a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8101226:	2301      	movs	r3, #1
 8101228:	e049      	b.n	81012be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810122a:	687b      	ldr	r3, [r7, #4]
 810122c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101230:	b2db      	uxtb	r3, r3
 8101232:	2b00      	cmp	r3, #0
 8101234:	d106      	bne.n	8101244 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101236:	687b      	ldr	r3, [r7, #4]
 8101238:	2200      	movs	r2, #0
 810123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810123e:	6878      	ldr	r0, [r7, #4]
 8101240:	f000 f841 	bl	81012c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101244:	687b      	ldr	r3, [r7, #4]
 8101246:	2202      	movs	r2, #2
 8101248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	681a      	ldr	r2, [r3, #0]
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	3304      	adds	r3, #4
 8101254:	4619      	mov	r1, r3
 8101256:	4610      	mov	r0, r2
 8101258:	f000 f9f8 	bl	810164c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	2201      	movs	r2, #1
 8101260:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	2201      	movs	r2, #1
 8101268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810126c:	687b      	ldr	r3, [r7, #4]
 810126e:	2201      	movs	r2, #1
 8101270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	2201      	movs	r2, #1
 8101278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810127c:	687b      	ldr	r3, [r7, #4]
 810127e:	2201      	movs	r2, #1
 8101280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	2201      	movs	r2, #1
 8101288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810128c:	687b      	ldr	r3, [r7, #4]
 810128e:	2201      	movs	r2, #1
 8101290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101294:	687b      	ldr	r3, [r7, #4]
 8101296:	2201      	movs	r2, #1
 8101298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810129c:	687b      	ldr	r3, [r7, #4]
 810129e:	2201      	movs	r2, #1
 81012a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81012a4:	687b      	ldr	r3, [r7, #4]
 81012a6:	2201      	movs	r2, #1
 81012a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	2201      	movs	r2, #1
 81012b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	2201      	movs	r2, #1
 81012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81012bc:	2300      	movs	r3, #0
}
 81012be:	4618      	mov	r0, r3
 81012c0:	3708      	adds	r7, #8
 81012c2:	46bd      	mov	sp, r7
 81012c4:	bd80      	pop	{r7, pc}

081012c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81012c6:	b480      	push	{r7}
 81012c8:	b083      	sub	sp, #12
 81012ca:	af00      	add	r7, sp, #0
 81012cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81012ce:	bf00      	nop
 81012d0:	370c      	adds	r7, #12
 81012d2:	46bd      	mov	sp, r7
 81012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d8:	4770      	bx	lr
	...

081012dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81012dc:	b480      	push	{r7}
 81012de:	b085      	sub	sp, #20
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81012e4:	687b      	ldr	r3, [r7, #4]
 81012e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81012ea:	b2db      	uxtb	r3, r3
 81012ec:	2b01      	cmp	r3, #1
 81012ee:	d001      	beq.n	81012f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81012f0:	2301      	movs	r3, #1
 81012f2:	e04f      	b.n	8101394 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81012f4:	687b      	ldr	r3, [r7, #4]
 81012f6:	2202      	movs	r2, #2
 81012f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81012fc:	687b      	ldr	r3, [r7, #4]
 81012fe:	681b      	ldr	r3, [r3, #0]
 8101300:	68da      	ldr	r2, [r3, #12]
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	681b      	ldr	r3, [r3, #0]
 8101306:	f042 0201 	orr.w	r2, r2, #1
 810130a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810130c:	687b      	ldr	r3, [r7, #4]
 810130e:	681b      	ldr	r3, [r3, #0]
 8101310:	4a23      	ldr	r2, [pc, #140]	; (81013a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8101312:	4293      	cmp	r3, r2
 8101314:	d01d      	beq.n	8101352 <HAL_TIM_Base_Start_IT+0x76>
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	681b      	ldr	r3, [r3, #0]
 810131a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810131e:	d018      	beq.n	8101352 <HAL_TIM_Base_Start_IT+0x76>
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	681b      	ldr	r3, [r3, #0]
 8101324:	4a1f      	ldr	r2, [pc, #124]	; (81013a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8101326:	4293      	cmp	r3, r2
 8101328:	d013      	beq.n	8101352 <HAL_TIM_Base_Start_IT+0x76>
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	681b      	ldr	r3, [r3, #0]
 810132e:	4a1e      	ldr	r2, [pc, #120]	; (81013a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8101330:	4293      	cmp	r3, r2
 8101332:	d00e      	beq.n	8101352 <HAL_TIM_Base_Start_IT+0x76>
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	681b      	ldr	r3, [r3, #0]
 8101338:	4a1c      	ldr	r2, [pc, #112]	; (81013ac <HAL_TIM_Base_Start_IT+0xd0>)
 810133a:	4293      	cmp	r3, r2
 810133c:	d009      	beq.n	8101352 <HAL_TIM_Base_Start_IT+0x76>
 810133e:	687b      	ldr	r3, [r7, #4]
 8101340:	681b      	ldr	r3, [r3, #0]
 8101342:	4a1b      	ldr	r2, [pc, #108]	; (81013b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8101344:	4293      	cmp	r3, r2
 8101346:	d004      	beq.n	8101352 <HAL_TIM_Base_Start_IT+0x76>
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	4a19      	ldr	r2, [pc, #100]	; (81013b4 <HAL_TIM_Base_Start_IT+0xd8>)
 810134e:	4293      	cmp	r3, r2
 8101350:	d115      	bne.n	810137e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	681b      	ldr	r3, [r3, #0]
 8101356:	689a      	ldr	r2, [r3, #8]
 8101358:	4b17      	ldr	r3, [pc, #92]	; (81013b8 <HAL_TIM_Base_Start_IT+0xdc>)
 810135a:	4013      	ands	r3, r2
 810135c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810135e:	68fb      	ldr	r3, [r7, #12]
 8101360:	2b06      	cmp	r3, #6
 8101362:	d015      	beq.n	8101390 <HAL_TIM_Base_Start_IT+0xb4>
 8101364:	68fb      	ldr	r3, [r7, #12]
 8101366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810136a:	d011      	beq.n	8101390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	681b      	ldr	r3, [r3, #0]
 8101370:	681a      	ldr	r2, [r3, #0]
 8101372:	687b      	ldr	r3, [r7, #4]
 8101374:	681b      	ldr	r3, [r3, #0]
 8101376:	f042 0201 	orr.w	r2, r2, #1
 810137a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810137c:	e008      	b.n	8101390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	681b      	ldr	r3, [r3, #0]
 8101382:	681a      	ldr	r2, [r3, #0]
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	f042 0201 	orr.w	r2, r2, #1
 810138c:	601a      	str	r2, [r3, #0]
 810138e:	e000      	b.n	8101392 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101390:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8101392:	2300      	movs	r3, #0
}
 8101394:	4618      	mov	r0, r3
 8101396:	3714      	adds	r7, #20
 8101398:	46bd      	mov	sp, r7
 810139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810139e:	4770      	bx	lr
 81013a0:	40010000 	.word	0x40010000
 81013a4:	40000400 	.word	0x40000400
 81013a8:	40000800 	.word	0x40000800
 81013ac:	40000c00 	.word	0x40000c00
 81013b0:	40010400 	.word	0x40010400
 81013b4:	40001800 	.word	0x40001800
 81013b8:	00010007 	.word	0x00010007

081013bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81013bc:	b580      	push	{r7, lr}
 81013be:	b082      	sub	sp, #8
 81013c0:	af00      	add	r7, sp, #0
 81013c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81013c4:	687b      	ldr	r3, [r7, #4]
 81013c6:	681b      	ldr	r3, [r3, #0]
 81013c8:	691b      	ldr	r3, [r3, #16]
 81013ca:	f003 0302 	and.w	r3, r3, #2
 81013ce:	2b02      	cmp	r3, #2
 81013d0:	d122      	bne.n	8101418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81013d2:	687b      	ldr	r3, [r7, #4]
 81013d4:	681b      	ldr	r3, [r3, #0]
 81013d6:	68db      	ldr	r3, [r3, #12]
 81013d8:	f003 0302 	and.w	r3, r3, #2
 81013dc:	2b02      	cmp	r3, #2
 81013de:	d11b      	bne.n	8101418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	681b      	ldr	r3, [r3, #0]
 81013e4:	f06f 0202 	mvn.w	r2, #2
 81013e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81013ea:	687b      	ldr	r3, [r7, #4]
 81013ec:	2201      	movs	r2, #1
 81013ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81013f0:	687b      	ldr	r3, [r7, #4]
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	699b      	ldr	r3, [r3, #24]
 81013f6:	f003 0303 	and.w	r3, r3, #3
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d003      	beq.n	8101406 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 81013fe:	6878      	ldr	r0, [r7, #4]
 8101400:	f000 f905 	bl	810160e <HAL_TIM_IC_CaptureCallback>
 8101404:	e005      	b.n	8101412 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8101406:	6878      	ldr	r0, [r7, #4]
 8101408:	f000 f8f7 	bl	81015fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810140c:	6878      	ldr	r0, [r7, #4]
 810140e:	f000 f908 	bl	8101622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101412:	687b      	ldr	r3, [r7, #4]
 8101414:	2200      	movs	r2, #0
 8101416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	681b      	ldr	r3, [r3, #0]
 810141c:	691b      	ldr	r3, [r3, #16]
 810141e:	f003 0304 	and.w	r3, r3, #4
 8101422:	2b04      	cmp	r3, #4
 8101424:	d122      	bne.n	810146c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	681b      	ldr	r3, [r3, #0]
 810142a:	68db      	ldr	r3, [r3, #12]
 810142c:	f003 0304 	and.w	r3, r3, #4
 8101430:	2b04      	cmp	r3, #4
 8101432:	d11b      	bne.n	810146c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101434:	687b      	ldr	r3, [r7, #4]
 8101436:	681b      	ldr	r3, [r3, #0]
 8101438:	f06f 0204 	mvn.w	r2, #4
 810143c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810143e:	687b      	ldr	r3, [r7, #4]
 8101440:	2202      	movs	r2, #2
 8101442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101444:	687b      	ldr	r3, [r7, #4]
 8101446:	681b      	ldr	r3, [r3, #0]
 8101448:	699b      	ldr	r3, [r3, #24]
 810144a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810144e:	2b00      	cmp	r3, #0
 8101450:	d003      	beq.n	810145a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101452:	6878      	ldr	r0, [r7, #4]
 8101454:	f000 f8db 	bl	810160e <HAL_TIM_IC_CaptureCallback>
 8101458:	e005      	b.n	8101466 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810145a:	6878      	ldr	r0, [r7, #4]
 810145c:	f000 f8cd 	bl	81015fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101460:	6878      	ldr	r0, [r7, #4]
 8101462:	f000 f8de 	bl	8101622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101466:	687b      	ldr	r3, [r7, #4]
 8101468:	2200      	movs	r2, #0
 810146a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810146c:	687b      	ldr	r3, [r7, #4]
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	691b      	ldr	r3, [r3, #16]
 8101472:	f003 0308 	and.w	r3, r3, #8
 8101476:	2b08      	cmp	r3, #8
 8101478:	d122      	bne.n	81014c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810147a:	687b      	ldr	r3, [r7, #4]
 810147c:	681b      	ldr	r3, [r3, #0]
 810147e:	68db      	ldr	r3, [r3, #12]
 8101480:	f003 0308 	and.w	r3, r3, #8
 8101484:	2b08      	cmp	r3, #8
 8101486:	d11b      	bne.n	81014c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	681b      	ldr	r3, [r3, #0]
 810148c:	f06f 0208 	mvn.w	r2, #8
 8101490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101492:	687b      	ldr	r3, [r7, #4]
 8101494:	2204      	movs	r2, #4
 8101496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101498:	687b      	ldr	r3, [r7, #4]
 810149a:	681b      	ldr	r3, [r3, #0]
 810149c:	69db      	ldr	r3, [r3, #28]
 810149e:	f003 0303 	and.w	r3, r3, #3
 81014a2:	2b00      	cmp	r3, #0
 81014a4:	d003      	beq.n	81014ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014a6:	6878      	ldr	r0, [r7, #4]
 81014a8:	f000 f8b1 	bl	810160e <HAL_TIM_IC_CaptureCallback>
 81014ac:	e005      	b.n	81014ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81014ae:	6878      	ldr	r0, [r7, #4]
 81014b0:	f000 f8a3 	bl	81015fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81014b4:	6878      	ldr	r0, [r7, #4]
 81014b6:	f000 f8b4 	bl	8101622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81014ba:	687b      	ldr	r3, [r7, #4]
 81014bc:	2200      	movs	r2, #0
 81014be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	681b      	ldr	r3, [r3, #0]
 81014c4:	691b      	ldr	r3, [r3, #16]
 81014c6:	f003 0310 	and.w	r3, r3, #16
 81014ca:	2b10      	cmp	r3, #16
 81014cc:	d122      	bne.n	8101514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81014ce:	687b      	ldr	r3, [r7, #4]
 81014d0:	681b      	ldr	r3, [r3, #0]
 81014d2:	68db      	ldr	r3, [r3, #12]
 81014d4:	f003 0310 	and.w	r3, r3, #16
 81014d8:	2b10      	cmp	r3, #16
 81014da:	d11b      	bne.n	8101514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81014dc:	687b      	ldr	r3, [r7, #4]
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	f06f 0210 	mvn.w	r2, #16
 81014e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81014e6:	687b      	ldr	r3, [r7, #4]
 81014e8:	2208      	movs	r2, #8
 81014ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81014ec:	687b      	ldr	r3, [r7, #4]
 81014ee:	681b      	ldr	r3, [r3, #0]
 81014f0:	69db      	ldr	r3, [r3, #28]
 81014f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81014f6:	2b00      	cmp	r3, #0
 81014f8:	d003      	beq.n	8101502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014fa:	6878      	ldr	r0, [r7, #4]
 81014fc:	f000 f887 	bl	810160e <HAL_TIM_IC_CaptureCallback>
 8101500:	e005      	b.n	810150e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101502:	6878      	ldr	r0, [r7, #4]
 8101504:	f000 f879 	bl	81015fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101508:	6878      	ldr	r0, [r7, #4]
 810150a:	f000 f88a 	bl	8101622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810150e:	687b      	ldr	r3, [r7, #4]
 8101510:	2200      	movs	r2, #0
 8101512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8101514:	687b      	ldr	r3, [r7, #4]
 8101516:	681b      	ldr	r3, [r3, #0]
 8101518:	691b      	ldr	r3, [r3, #16]
 810151a:	f003 0301 	and.w	r3, r3, #1
 810151e:	2b01      	cmp	r3, #1
 8101520:	d10e      	bne.n	8101540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8101522:	687b      	ldr	r3, [r7, #4]
 8101524:	681b      	ldr	r3, [r3, #0]
 8101526:	68db      	ldr	r3, [r3, #12]
 8101528:	f003 0301 	and.w	r3, r3, #1
 810152c:	2b01      	cmp	r3, #1
 810152e:	d107      	bne.n	8101540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101530:	687b      	ldr	r3, [r7, #4]
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	f06f 0201 	mvn.w	r2, #1
 8101538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810153a:	6878      	ldr	r0, [r7, #4]
 810153c:	f7fe ffa2 	bl	8100484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101540:	687b      	ldr	r3, [r7, #4]
 8101542:	681b      	ldr	r3, [r3, #0]
 8101544:	691b      	ldr	r3, [r3, #16]
 8101546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810154a:	2b80      	cmp	r3, #128	; 0x80
 810154c:	d10e      	bne.n	810156c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810154e:	687b      	ldr	r3, [r7, #4]
 8101550:	681b      	ldr	r3, [r3, #0]
 8101552:	68db      	ldr	r3, [r3, #12]
 8101554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101558:	2b80      	cmp	r3, #128	; 0x80
 810155a:	d107      	bne.n	810156c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101566:	6878      	ldr	r0, [r7, #4]
 8101568:	f000 f914 	bl	8101794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810156c:	687b      	ldr	r3, [r7, #4]
 810156e:	681b      	ldr	r3, [r3, #0]
 8101570:	691b      	ldr	r3, [r3, #16]
 8101572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810157a:	d10e      	bne.n	810159a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810157c:	687b      	ldr	r3, [r7, #4]
 810157e:	681b      	ldr	r3, [r3, #0]
 8101580:	68db      	ldr	r3, [r3, #12]
 8101582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101586:	2b80      	cmp	r3, #128	; 0x80
 8101588:	d107      	bne.n	810159a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810158a:	687b      	ldr	r3, [r7, #4]
 810158c:	681b      	ldr	r3, [r3, #0]
 810158e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101594:	6878      	ldr	r0, [r7, #4]
 8101596:	f000 f907 	bl	81017a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810159a:	687b      	ldr	r3, [r7, #4]
 810159c:	681b      	ldr	r3, [r3, #0]
 810159e:	691b      	ldr	r3, [r3, #16]
 81015a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015a4:	2b40      	cmp	r3, #64	; 0x40
 81015a6:	d10e      	bne.n	81015c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81015a8:	687b      	ldr	r3, [r7, #4]
 81015aa:	681b      	ldr	r3, [r3, #0]
 81015ac:	68db      	ldr	r3, [r3, #12]
 81015ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015b2:	2b40      	cmp	r3, #64	; 0x40
 81015b4:	d107      	bne.n	81015c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81015b6:	687b      	ldr	r3, [r7, #4]
 81015b8:	681b      	ldr	r3, [r3, #0]
 81015ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81015be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81015c0:	6878      	ldr	r0, [r7, #4]
 81015c2:	f000 f838 	bl	8101636 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81015c6:	687b      	ldr	r3, [r7, #4]
 81015c8:	681b      	ldr	r3, [r3, #0]
 81015ca:	691b      	ldr	r3, [r3, #16]
 81015cc:	f003 0320 	and.w	r3, r3, #32
 81015d0:	2b20      	cmp	r3, #32
 81015d2:	d10e      	bne.n	81015f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81015d4:	687b      	ldr	r3, [r7, #4]
 81015d6:	681b      	ldr	r3, [r3, #0]
 81015d8:	68db      	ldr	r3, [r3, #12]
 81015da:	f003 0320 	and.w	r3, r3, #32
 81015de:	2b20      	cmp	r3, #32
 81015e0:	d107      	bne.n	81015f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	f06f 0220 	mvn.w	r2, #32
 81015ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81015ec:	6878      	ldr	r0, [r7, #4]
 81015ee:	f000 f8c7 	bl	8101780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81015f2:	bf00      	nop
 81015f4:	3708      	adds	r7, #8
 81015f6:	46bd      	mov	sp, r7
 81015f8:	bd80      	pop	{r7, pc}

081015fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 81015fa:	b480      	push	{r7}
 81015fc:	b083      	sub	sp, #12
 81015fe:	af00      	add	r7, sp, #0
 8101600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101602:	bf00      	nop
 8101604:	370c      	adds	r7, #12
 8101606:	46bd      	mov	sp, r7
 8101608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810160c:	4770      	bx	lr

0810160e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810160e:	b480      	push	{r7}
 8101610:	b083      	sub	sp, #12
 8101612:	af00      	add	r7, sp, #0
 8101614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8101616:	bf00      	nop
 8101618:	370c      	adds	r7, #12
 810161a:	46bd      	mov	sp, r7
 810161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101620:	4770      	bx	lr

08101622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101622:	b480      	push	{r7}
 8101624:	b083      	sub	sp, #12
 8101626:	af00      	add	r7, sp, #0
 8101628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810162a:	bf00      	nop
 810162c:	370c      	adds	r7, #12
 810162e:	46bd      	mov	sp, r7
 8101630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101634:	4770      	bx	lr

08101636 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101636:	b480      	push	{r7}
 8101638:	b083      	sub	sp, #12
 810163a:	af00      	add	r7, sp, #0
 810163c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810163e:	bf00      	nop
 8101640:	370c      	adds	r7, #12
 8101642:	46bd      	mov	sp, r7
 8101644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101648:	4770      	bx	lr
	...

0810164c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810164c:	b480      	push	{r7}
 810164e:	b085      	sub	sp, #20
 8101650:	af00      	add	r7, sp, #0
 8101652:	6078      	str	r0, [r7, #4]
 8101654:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101656:	687b      	ldr	r3, [r7, #4]
 8101658:	681b      	ldr	r3, [r3, #0]
 810165a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	4a40      	ldr	r2, [pc, #256]	; (8101760 <TIM_Base_SetConfig+0x114>)
 8101660:	4293      	cmp	r3, r2
 8101662:	d013      	beq.n	810168c <TIM_Base_SetConfig+0x40>
 8101664:	687b      	ldr	r3, [r7, #4]
 8101666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810166a:	d00f      	beq.n	810168c <TIM_Base_SetConfig+0x40>
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	4a3d      	ldr	r2, [pc, #244]	; (8101764 <TIM_Base_SetConfig+0x118>)
 8101670:	4293      	cmp	r3, r2
 8101672:	d00b      	beq.n	810168c <TIM_Base_SetConfig+0x40>
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	4a3c      	ldr	r2, [pc, #240]	; (8101768 <TIM_Base_SetConfig+0x11c>)
 8101678:	4293      	cmp	r3, r2
 810167a:	d007      	beq.n	810168c <TIM_Base_SetConfig+0x40>
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	4a3b      	ldr	r2, [pc, #236]	; (810176c <TIM_Base_SetConfig+0x120>)
 8101680:	4293      	cmp	r3, r2
 8101682:	d003      	beq.n	810168c <TIM_Base_SetConfig+0x40>
 8101684:	687b      	ldr	r3, [r7, #4]
 8101686:	4a3a      	ldr	r2, [pc, #232]	; (8101770 <TIM_Base_SetConfig+0x124>)
 8101688:	4293      	cmp	r3, r2
 810168a:	d108      	bne.n	810169e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810168c:	68fb      	ldr	r3, [r7, #12]
 810168e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101694:	683b      	ldr	r3, [r7, #0]
 8101696:	685b      	ldr	r3, [r3, #4]
 8101698:	68fa      	ldr	r2, [r7, #12]
 810169a:	4313      	orrs	r3, r2
 810169c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	4a2f      	ldr	r2, [pc, #188]	; (8101760 <TIM_Base_SetConfig+0x114>)
 81016a2:	4293      	cmp	r3, r2
 81016a4:	d01f      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81016ac:	d01b      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016ae:	687b      	ldr	r3, [r7, #4]
 81016b0:	4a2c      	ldr	r2, [pc, #176]	; (8101764 <TIM_Base_SetConfig+0x118>)
 81016b2:	4293      	cmp	r3, r2
 81016b4:	d017      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	4a2b      	ldr	r2, [pc, #172]	; (8101768 <TIM_Base_SetConfig+0x11c>)
 81016ba:	4293      	cmp	r3, r2
 81016bc:	d013      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016be:	687b      	ldr	r3, [r7, #4]
 81016c0:	4a2a      	ldr	r2, [pc, #168]	; (810176c <TIM_Base_SetConfig+0x120>)
 81016c2:	4293      	cmp	r3, r2
 81016c4:	d00f      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	4a29      	ldr	r2, [pc, #164]	; (8101770 <TIM_Base_SetConfig+0x124>)
 81016ca:	4293      	cmp	r3, r2
 81016cc:	d00b      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	4a28      	ldr	r2, [pc, #160]	; (8101774 <TIM_Base_SetConfig+0x128>)
 81016d2:	4293      	cmp	r3, r2
 81016d4:	d007      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	4a27      	ldr	r2, [pc, #156]	; (8101778 <TIM_Base_SetConfig+0x12c>)
 81016da:	4293      	cmp	r3, r2
 81016dc:	d003      	beq.n	81016e6 <TIM_Base_SetConfig+0x9a>
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	4a26      	ldr	r2, [pc, #152]	; (810177c <TIM_Base_SetConfig+0x130>)
 81016e2:	4293      	cmp	r3, r2
 81016e4:	d108      	bne.n	81016f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81016e6:	68fb      	ldr	r3, [r7, #12]
 81016e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81016ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81016ee:	683b      	ldr	r3, [r7, #0]
 81016f0:	68db      	ldr	r3, [r3, #12]
 81016f2:	68fa      	ldr	r2, [r7, #12]
 81016f4:	4313      	orrs	r3, r2
 81016f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81016f8:	68fb      	ldr	r3, [r7, #12]
 81016fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81016fe:	683b      	ldr	r3, [r7, #0]
 8101700:	695b      	ldr	r3, [r3, #20]
 8101702:	4313      	orrs	r3, r2
 8101704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	68fa      	ldr	r2, [r7, #12]
 810170a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810170c:	683b      	ldr	r3, [r7, #0]
 810170e:	689a      	ldr	r2, [r3, #8]
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101714:	683b      	ldr	r3, [r7, #0]
 8101716:	681a      	ldr	r2, [r3, #0]
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	4a10      	ldr	r2, [pc, #64]	; (8101760 <TIM_Base_SetConfig+0x114>)
 8101720:	4293      	cmp	r3, r2
 8101722:	d00f      	beq.n	8101744 <TIM_Base_SetConfig+0xf8>
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	4a12      	ldr	r2, [pc, #72]	; (8101770 <TIM_Base_SetConfig+0x124>)
 8101728:	4293      	cmp	r3, r2
 810172a:	d00b      	beq.n	8101744 <TIM_Base_SetConfig+0xf8>
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	4a11      	ldr	r2, [pc, #68]	; (8101774 <TIM_Base_SetConfig+0x128>)
 8101730:	4293      	cmp	r3, r2
 8101732:	d007      	beq.n	8101744 <TIM_Base_SetConfig+0xf8>
 8101734:	687b      	ldr	r3, [r7, #4]
 8101736:	4a10      	ldr	r2, [pc, #64]	; (8101778 <TIM_Base_SetConfig+0x12c>)
 8101738:	4293      	cmp	r3, r2
 810173a:	d003      	beq.n	8101744 <TIM_Base_SetConfig+0xf8>
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	4a0f      	ldr	r2, [pc, #60]	; (810177c <TIM_Base_SetConfig+0x130>)
 8101740:	4293      	cmp	r3, r2
 8101742:	d103      	bne.n	810174c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101744:	683b      	ldr	r3, [r7, #0]
 8101746:	691a      	ldr	r2, [r3, #16]
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810174c:	687b      	ldr	r3, [r7, #4]
 810174e:	2201      	movs	r2, #1
 8101750:	615a      	str	r2, [r3, #20]
}
 8101752:	bf00      	nop
 8101754:	3714      	adds	r7, #20
 8101756:	46bd      	mov	sp, r7
 8101758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810175c:	4770      	bx	lr
 810175e:	bf00      	nop
 8101760:	40010000 	.word	0x40010000
 8101764:	40000400 	.word	0x40000400
 8101768:	40000800 	.word	0x40000800
 810176c:	40000c00 	.word	0x40000c00
 8101770:	40010400 	.word	0x40010400
 8101774:	40014000 	.word	0x40014000
 8101778:	40014400 	.word	0x40014400
 810177c:	40014800 	.word	0x40014800

08101780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8101780:	b480      	push	{r7}
 8101782:	b083      	sub	sp, #12
 8101784:	af00      	add	r7, sp, #0
 8101786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8101788:	bf00      	nop
 810178a:	370c      	adds	r7, #12
 810178c:	46bd      	mov	sp, r7
 810178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101792:	4770      	bx	lr

08101794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8101794:	b480      	push	{r7}
 8101796:	b083      	sub	sp, #12
 8101798:	af00      	add	r7, sp, #0
 810179a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810179c:	bf00      	nop
 810179e:	370c      	adds	r7, #12
 81017a0:	46bd      	mov	sp, r7
 81017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a6:	4770      	bx	lr

081017a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81017a8:	b480      	push	{r7}
 81017aa:	b083      	sub	sp, #12
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81017b0:	bf00      	nop
 81017b2:	370c      	adds	r7, #12
 81017b4:	46bd      	mov	sp, r7
 81017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ba:	4770      	bx	lr

081017bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 81017bc:	b480      	push	{r7}
 81017be:	b085      	sub	sp, #20
 81017c0:	af00      	add	r7, sp, #0
 81017c2:	4603      	mov	r3, r0
 81017c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 81017c6:	2300      	movs	r3, #0
 81017c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 81017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017ce:	2b84      	cmp	r3, #132	; 0x84
 81017d0:	d005      	beq.n	81017de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 81017d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 81017d6:	68fb      	ldr	r3, [r7, #12]
 81017d8:	4413      	add	r3, r2
 81017da:	3303      	adds	r3, #3
 81017dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 81017de:	68fb      	ldr	r3, [r7, #12]
}
 81017e0:	4618      	mov	r0, r3
 81017e2:	3714      	adds	r7, #20
 81017e4:	46bd      	mov	sp, r7
 81017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ea:	4770      	bx	lr

081017ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 81017ec:	b580      	push	{r7, lr}
 81017ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 81017f0:	f000 feda 	bl	81025a8 <vTaskStartScheduler>
  
  return osOK;
 81017f4:	2300      	movs	r3, #0
}
 81017f6:	4618      	mov	r0, r3
 81017f8:	bd80      	pop	{r7, pc}

081017fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 81017fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 81017fc:	b089      	sub	sp, #36	; 0x24
 81017fe:	af04      	add	r7, sp, #16
 8101800:	6078      	str	r0, [r7, #4]
 8101802:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8101804:	687b      	ldr	r3, [r7, #4]
 8101806:	695b      	ldr	r3, [r3, #20]
 8101808:	2b00      	cmp	r3, #0
 810180a:	d020      	beq.n	810184e <osThreadCreate+0x54>
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	699b      	ldr	r3, [r3, #24]
 8101810:	2b00      	cmp	r3, #0
 8101812:	d01c      	beq.n	810184e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	685c      	ldr	r4, [r3, #4]
 8101818:	687b      	ldr	r3, [r7, #4]
 810181a:	681d      	ldr	r5, [r3, #0]
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	691e      	ldr	r6, [r3, #16]
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8101826:	4618      	mov	r0, r3
 8101828:	f7ff ffc8 	bl	81017bc <makeFreeRtosPriority>
 810182c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	695b      	ldr	r3, [r3, #20]
 8101832:	687a      	ldr	r2, [r7, #4]
 8101834:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8101836:	9202      	str	r2, [sp, #8]
 8101838:	9301      	str	r3, [sp, #4]
 810183a:	9100      	str	r1, [sp, #0]
 810183c:	683b      	ldr	r3, [r7, #0]
 810183e:	4632      	mov	r2, r6
 8101840:	4629      	mov	r1, r5
 8101842:	4620      	mov	r0, r4
 8101844:	f000 fce8 	bl	8102218 <xTaskCreateStatic>
 8101848:	4603      	mov	r3, r0
 810184a:	60fb      	str	r3, [r7, #12]
 810184c:	e01c      	b.n	8101888 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	685c      	ldr	r4, [r3, #4]
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 810185a:	b29e      	uxth	r6, r3
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8101862:	4618      	mov	r0, r3
 8101864:	f7ff ffaa 	bl	81017bc <makeFreeRtosPriority>
 8101868:	4602      	mov	r2, r0
 810186a:	f107 030c 	add.w	r3, r7, #12
 810186e:	9301      	str	r3, [sp, #4]
 8101870:	9200      	str	r2, [sp, #0]
 8101872:	683b      	ldr	r3, [r7, #0]
 8101874:	4632      	mov	r2, r6
 8101876:	4629      	mov	r1, r5
 8101878:	4620      	mov	r0, r4
 810187a:	f000 fd2a 	bl	81022d2 <xTaskCreate>
 810187e:	4603      	mov	r3, r0
 8101880:	2b01      	cmp	r3, #1
 8101882:	d001      	beq.n	8101888 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8101884:	2300      	movs	r3, #0
 8101886:	e000      	b.n	810188a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8101888:	68fb      	ldr	r3, [r7, #12]
}
 810188a:	4618      	mov	r0, r3
 810188c:	3714      	adds	r7, #20
 810188e:	46bd      	mov	sp, r7
 8101890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08101892 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8101892:	b580      	push	{r7, lr}
 8101894:	b084      	sub	sp, #16
 8101896:	af00      	add	r7, sp, #0
 8101898:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 810189e:	68fb      	ldr	r3, [r7, #12]
 81018a0:	2b00      	cmp	r3, #0
 81018a2:	d001      	beq.n	81018a8 <osDelay+0x16>
 81018a4:	68fb      	ldr	r3, [r7, #12]
 81018a6:	e000      	b.n	81018aa <osDelay+0x18>
 81018a8:	2301      	movs	r3, #1
 81018aa:	4618      	mov	r0, r3
 81018ac:	f000 fe48 	bl	8102540 <vTaskDelay>
  
  return osOK;
 81018b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 81018b2:	4618      	mov	r0, r3
 81018b4:	3710      	adds	r7, #16
 81018b6:	46bd      	mov	sp, r7
 81018b8:	bd80      	pop	{r7, pc}
	...

081018bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81018bc:	b580      	push	{r7, lr}
 81018be:	b08a      	sub	sp, #40	; 0x28
 81018c0:	af00      	add	r7, sp, #0
 81018c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81018c4:	2300      	movs	r3, #0
 81018c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81018c8:	f000 fece 	bl	8102668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81018cc:	4b5b      	ldr	r3, [pc, #364]	; (8101a3c <pvPortMalloc+0x180>)
 81018ce:	681b      	ldr	r3, [r3, #0]
 81018d0:	2b00      	cmp	r3, #0
 81018d2:	d101      	bne.n	81018d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81018d4:	f000 f920 	bl	8101b18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81018d8:	4b59      	ldr	r3, [pc, #356]	; (8101a40 <pvPortMalloc+0x184>)
 81018da:	681a      	ldr	r2, [r3, #0]
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	4013      	ands	r3, r2
 81018e0:	2b00      	cmp	r3, #0
 81018e2:	f040 8093 	bne.w	8101a0c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	2b00      	cmp	r3, #0
 81018ea:	d01d      	beq.n	8101928 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 81018ec:	2208      	movs	r2, #8
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	4413      	add	r3, r2
 81018f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	f003 0307 	and.w	r3, r3, #7
 81018fa:	2b00      	cmp	r3, #0
 81018fc:	d014      	beq.n	8101928 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	f023 0307 	bic.w	r3, r3, #7
 8101904:	3308      	adds	r3, #8
 8101906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	f003 0307 	and.w	r3, r3, #7
 810190e:	2b00      	cmp	r3, #0
 8101910:	d00a      	beq.n	8101928 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8101912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101916:	f383 8811 	msr	BASEPRI, r3
 810191a:	f3bf 8f6f 	isb	sy
 810191e:	f3bf 8f4f 	dsb	sy
 8101922:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8101924:	bf00      	nop
 8101926:	e7fe      	b.n	8101926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	2b00      	cmp	r3, #0
 810192c:	d06e      	beq.n	8101a0c <pvPortMalloc+0x150>
 810192e:	4b45      	ldr	r3, [pc, #276]	; (8101a44 <pvPortMalloc+0x188>)
 8101930:	681b      	ldr	r3, [r3, #0]
 8101932:	687a      	ldr	r2, [r7, #4]
 8101934:	429a      	cmp	r2, r3
 8101936:	d869      	bhi.n	8101a0c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8101938:	4b43      	ldr	r3, [pc, #268]	; (8101a48 <pvPortMalloc+0x18c>)
 810193a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810193c:	4b42      	ldr	r3, [pc, #264]	; (8101a48 <pvPortMalloc+0x18c>)
 810193e:	681b      	ldr	r3, [r3, #0]
 8101940:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8101942:	e004      	b.n	810194e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8101944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101946:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8101948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810194a:	681b      	ldr	r3, [r3, #0]
 810194c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101950:	685b      	ldr	r3, [r3, #4]
 8101952:	687a      	ldr	r2, [r7, #4]
 8101954:	429a      	cmp	r2, r3
 8101956:	d903      	bls.n	8101960 <pvPortMalloc+0xa4>
 8101958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810195a:	681b      	ldr	r3, [r3, #0]
 810195c:	2b00      	cmp	r3, #0
 810195e:	d1f1      	bne.n	8101944 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8101960:	4b36      	ldr	r3, [pc, #216]	; (8101a3c <pvPortMalloc+0x180>)
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101966:	429a      	cmp	r2, r3
 8101968:	d050      	beq.n	8101a0c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810196a:	6a3b      	ldr	r3, [r7, #32]
 810196c:	681b      	ldr	r3, [r3, #0]
 810196e:	2208      	movs	r2, #8
 8101970:	4413      	add	r3, r2
 8101972:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8101974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101976:	681a      	ldr	r2, [r3, #0]
 8101978:	6a3b      	ldr	r3, [r7, #32]
 810197a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810197e:	685a      	ldr	r2, [r3, #4]
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	1ad2      	subs	r2, r2, r3
 8101984:	2308      	movs	r3, #8
 8101986:	005b      	lsls	r3, r3, #1
 8101988:	429a      	cmp	r2, r3
 810198a:	d91f      	bls.n	81019cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	4413      	add	r3, r2
 8101992:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8101994:	69bb      	ldr	r3, [r7, #24]
 8101996:	f003 0307 	and.w	r3, r3, #7
 810199a:	2b00      	cmp	r3, #0
 810199c:	d00a      	beq.n	81019b4 <pvPortMalloc+0xf8>
	__asm volatile
 810199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81019a2:	f383 8811 	msr	BASEPRI, r3
 81019a6:	f3bf 8f6f 	isb	sy
 81019aa:	f3bf 8f4f 	dsb	sy
 81019ae:	613b      	str	r3, [r7, #16]
}
 81019b0:	bf00      	nop
 81019b2:	e7fe      	b.n	81019b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019b6:	685a      	ldr	r2, [r3, #4]
 81019b8:	687b      	ldr	r3, [r7, #4]
 81019ba:	1ad2      	subs	r2, r2, r3
 81019bc:	69bb      	ldr	r3, [r7, #24]
 81019be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019c2:	687a      	ldr	r2, [r7, #4]
 81019c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81019c6:	69b8      	ldr	r0, [r7, #24]
 81019c8:	f000 f908 	bl	8101bdc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81019cc:	4b1d      	ldr	r3, [pc, #116]	; (8101a44 <pvPortMalloc+0x188>)
 81019ce:	681a      	ldr	r2, [r3, #0]
 81019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019d2:	685b      	ldr	r3, [r3, #4]
 81019d4:	1ad3      	subs	r3, r2, r3
 81019d6:	4a1b      	ldr	r2, [pc, #108]	; (8101a44 <pvPortMalloc+0x188>)
 81019d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81019da:	4b1a      	ldr	r3, [pc, #104]	; (8101a44 <pvPortMalloc+0x188>)
 81019dc:	681a      	ldr	r2, [r3, #0]
 81019de:	4b1b      	ldr	r3, [pc, #108]	; (8101a4c <pvPortMalloc+0x190>)
 81019e0:	681b      	ldr	r3, [r3, #0]
 81019e2:	429a      	cmp	r2, r3
 81019e4:	d203      	bcs.n	81019ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81019e6:	4b17      	ldr	r3, [pc, #92]	; (8101a44 <pvPortMalloc+0x188>)
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	4a18      	ldr	r2, [pc, #96]	; (8101a4c <pvPortMalloc+0x190>)
 81019ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019f0:	685a      	ldr	r2, [r3, #4]
 81019f2:	4b13      	ldr	r3, [pc, #76]	; (8101a40 <pvPortMalloc+0x184>)
 81019f4:	681b      	ldr	r3, [r3, #0]
 81019f6:	431a      	orrs	r2, r3
 81019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81019fe:	2200      	movs	r2, #0
 8101a00:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8101a02:	4b13      	ldr	r3, [pc, #76]	; (8101a50 <pvPortMalloc+0x194>)
 8101a04:	681b      	ldr	r3, [r3, #0]
 8101a06:	3301      	adds	r3, #1
 8101a08:	4a11      	ldr	r2, [pc, #68]	; (8101a50 <pvPortMalloc+0x194>)
 8101a0a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8101a0c:	f000 fe3a 	bl	8102684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8101a10:	69fb      	ldr	r3, [r7, #28]
 8101a12:	f003 0307 	and.w	r3, r3, #7
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d00a      	beq.n	8101a30 <pvPortMalloc+0x174>
	__asm volatile
 8101a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101a1e:	f383 8811 	msr	BASEPRI, r3
 8101a22:	f3bf 8f6f 	isb	sy
 8101a26:	f3bf 8f4f 	dsb	sy
 8101a2a:	60fb      	str	r3, [r7, #12]
}
 8101a2c:	bf00      	nop
 8101a2e:	e7fe      	b.n	8101a2e <pvPortMalloc+0x172>
	return pvReturn;
 8101a30:	69fb      	ldr	r3, [r7, #28]
}
 8101a32:	4618      	mov	r0, r3
 8101a34:	3728      	adds	r7, #40	; 0x28
 8101a36:	46bd      	mov	sp, r7
 8101a38:	bd80      	pop	{r7, pc}
 8101a3a:	bf00      	nop
 8101a3c:	10003e8c 	.word	0x10003e8c
 8101a40:	10003ea0 	.word	0x10003ea0
 8101a44:	10003e90 	.word	0x10003e90
 8101a48:	10003e84 	.word	0x10003e84
 8101a4c:	10003e94 	.word	0x10003e94
 8101a50:	10003e98 	.word	0x10003e98

08101a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8101a54:	b580      	push	{r7, lr}
 8101a56:	b086      	sub	sp, #24
 8101a58:	af00      	add	r7, sp, #0
 8101a5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8101a5c:	687b      	ldr	r3, [r7, #4]
 8101a5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	2b00      	cmp	r3, #0
 8101a64:	d04d      	beq.n	8101b02 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8101a66:	2308      	movs	r3, #8
 8101a68:	425b      	negs	r3, r3
 8101a6a:	697a      	ldr	r2, [r7, #20]
 8101a6c:	4413      	add	r3, r2
 8101a6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8101a70:	697b      	ldr	r3, [r7, #20]
 8101a72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8101a74:	693b      	ldr	r3, [r7, #16]
 8101a76:	685a      	ldr	r2, [r3, #4]
 8101a78:	4b24      	ldr	r3, [pc, #144]	; (8101b0c <vPortFree+0xb8>)
 8101a7a:	681b      	ldr	r3, [r3, #0]
 8101a7c:	4013      	ands	r3, r2
 8101a7e:	2b00      	cmp	r3, #0
 8101a80:	d10a      	bne.n	8101a98 <vPortFree+0x44>
	__asm volatile
 8101a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101a86:	f383 8811 	msr	BASEPRI, r3
 8101a8a:	f3bf 8f6f 	isb	sy
 8101a8e:	f3bf 8f4f 	dsb	sy
 8101a92:	60fb      	str	r3, [r7, #12]
}
 8101a94:	bf00      	nop
 8101a96:	e7fe      	b.n	8101a96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8101a98:	693b      	ldr	r3, [r7, #16]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	2b00      	cmp	r3, #0
 8101a9e:	d00a      	beq.n	8101ab6 <vPortFree+0x62>
	__asm volatile
 8101aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101aa4:	f383 8811 	msr	BASEPRI, r3
 8101aa8:	f3bf 8f6f 	isb	sy
 8101aac:	f3bf 8f4f 	dsb	sy
 8101ab0:	60bb      	str	r3, [r7, #8]
}
 8101ab2:	bf00      	nop
 8101ab4:	e7fe      	b.n	8101ab4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8101ab6:	693b      	ldr	r3, [r7, #16]
 8101ab8:	685a      	ldr	r2, [r3, #4]
 8101aba:	4b14      	ldr	r3, [pc, #80]	; (8101b0c <vPortFree+0xb8>)
 8101abc:	681b      	ldr	r3, [r3, #0]
 8101abe:	4013      	ands	r3, r2
 8101ac0:	2b00      	cmp	r3, #0
 8101ac2:	d01e      	beq.n	8101b02 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8101ac4:	693b      	ldr	r3, [r7, #16]
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	2b00      	cmp	r3, #0
 8101aca:	d11a      	bne.n	8101b02 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8101acc:	693b      	ldr	r3, [r7, #16]
 8101ace:	685a      	ldr	r2, [r3, #4]
 8101ad0:	4b0e      	ldr	r3, [pc, #56]	; (8101b0c <vPortFree+0xb8>)
 8101ad2:	681b      	ldr	r3, [r3, #0]
 8101ad4:	43db      	mvns	r3, r3
 8101ad6:	401a      	ands	r2, r3
 8101ad8:	693b      	ldr	r3, [r7, #16]
 8101ada:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8101adc:	f000 fdc4 	bl	8102668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8101ae0:	693b      	ldr	r3, [r7, #16]
 8101ae2:	685a      	ldr	r2, [r3, #4]
 8101ae4:	4b0a      	ldr	r3, [pc, #40]	; (8101b10 <vPortFree+0xbc>)
 8101ae6:	681b      	ldr	r3, [r3, #0]
 8101ae8:	4413      	add	r3, r2
 8101aea:	4a09      	ldr	r2, [pc, #36]	; (8101b10 <vPortFree+0xbc>)
 8101aec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8101aee:	6938      	ldr	r0, [r7, #16]
 8101af0:	f000 f874 	bl	8101bdc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8101af4:	4b07      	ldr	r3, [pc, #28]	; (8101b14 <vPortFree+0xc0>)
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	3301      	adds	r3, #1
 8101afa:	4a06      	ldr	r2, [pc, #24]	; (8101b14 <vPortFree+0xc0>)
 8101afc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8101afe:	f000 fdc1 	bl	8102684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8101b02:	bf00      	nop
 8101b04:	3718      	adds	r7, #24
 8101b06:	46bd      	mov	sp, r7
 8101b08:	bd80      	pop	{r7, pc}
 8101b0a:	bf00      	nop
 8101b0c:	10003ea0 	.word	0x10003ea0
 8101b10:	10003e90 	.word	0x10003e90
 8101b14:	10003e9c 	.word	0x10003e9c

08101b18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8101b18:	b480      	push	{r7}
 8101b1a:	b085      	sub	sp, #20
 8101b1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8101b1e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8101b22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8101b24:	4b27      	ldr	r3, [pc, #156]	; (8101bc4 <prvHeapInit+0xac>)
 8101b26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8101b28:	68fb      	ldr	r3, [r7, #12]
 8101b2a:	f003 0307 	and.w	r3, r3, #7
 8101b2e:	2b00      	cmp	r3, #0
 8101b30:	d00c      	beq.n	8101b4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8101b32:	68fb      	ldr	r3, [r7, #12]
 8101b34:	3307      	adds	r3, #7
 8101b36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101b38:	68fb      	ldr	r3, [r7, #12]
 8101b3a:	f023 0307 	bic.w	r3, r3, #7
 8101b3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8101b40:	68ba      	ldr	r2, [r7, #8]
 8101b42:	68fb      	ldr	r3, [r7, #12]
 8101b44:	1ad3      	subs	r3, r2, r3
 8101b46:	4a1f      	ldr	r2, [pc, #124]	; (8101bc4 <prvHeapInit+0xac>)
 8101b48:	4413      	add	r3, r2
 8101b4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8101b4c:	68fb      	ldr	r3, [r7, #12]
 8101b4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8101b50:	4a1d      	ldr	r2, [pc, #116]	; (8101bc8 <prvHeapInit+0xb0>)
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8101b56:	4b1c      	ldr	r3, [pc, #112]	; (8101bc8 <prvHeapInit+0xb0>)
 8101b58:	2200      	movs	r2, #0
 8101b5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	68ba      	ldr	r2, [r7, #8]
 8101b60:	4413      	add	r3, r2
 8101b62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8101b64:	2208      	movs	r2, #8
 8101b66:	68fb      	ldr	r3, [r7, #12]
 8101b68:	1a9b      	subs	r3, r3, r2
 8101b6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8101b6c:	68fb      	ldr	r3, [r7, #12]
 8101b6e:	f023 0307 	bic.w	r3, r3, #7
 8101b72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8101b74:	68fb      	ldr	r3, [r7, #12]
 8101b76:	4a15      	ldr	r2, [pc, #84]	; (8101bcc <prvHeapInit+0xb4>)
 8101b78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8101b7a:	4b14      	ldr	r3, [pc, #80]	; (8101bcc <prvHeapInit+0xb4>)
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	2200      	movs	r2, #0
 8101b80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8101b82:	4b12      	ldr	r3, [pc, #72]	; (8101bcc <prvHeapInit+0xb4>)
 8101b84:	681b      	ldr	r3, [r3, #0]
 8101b86:	2200      	movs	r2, #0
 8101b88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8101b8e:	683b      	ldr	r3, [r7, #0]
 8101b90:	68fa      	ldr	r2, [r7, #12]
 8101b92:	1ad2      	subs	r2, r2, r3
 8101b94:	683b      	ldr	r3, [r7, #0]
 8101b96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8101b98:	4b0c      	ldr	r3, [pc, #48]	; (8101bcc <prvHeapInit+0xb4>)
 8101b9a:	681a      	ldr	r2, [r3, #0]
 8101b9c:	683b      	ldr	r3, [r7, #0]
 8101b9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101ba0:	683b      	ldr	r3, [r7, #0]
 8101ba2:	685b      	ldr	r3, [r3, #4]
 8101ba4:	4a0a      	ldr	r2, [pc, #40]	; (8101bd0 <prvHeapInit+0xb8>)
 8101ba6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8101ba8:	683b      	ldr	r3, [r7, #0]
 8101baa:	685b      	ldr	r3, [r3, #4]
 8101bac:	4a09      	ldr	r2, [pc, #36]	; (8101bd4 <prvHeapInit+0xbc>)
 8101bae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8101bb0:	4b09      	ldr	r3, [pc, #36]	; (8101bd8 <prvHeapInit+0xc0>)
 8101bb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8101bb6:	601a      	str	r2, [r3, #0]
}
 8101bb8:	bf00      	nop
 8101bba:	3714      	adds	r7, #20
 8101bbc:	46bd      	mov	sp, r7
 8101bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bc2:	4770      	bx	lr
 8101bc4:	10000284 	.word	0x10000284
 8101bc8:	10003e84 	.word	0x10003e84
 8101bcc:	10003e8c 	.word	0x10003e8c
 8101bd0:	10003e94 	.word	0x10003e94
 8101bd4:	10003e90 	.word	0x10003e90
 8101bd8:	10003ea0 	.word	0x10003ea0

08101bdc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8101bdc:	b480      	push	{r7}
 8101bde:	b085      	sub	sp, #20
 8101be0:	af00      	add	r7, sp, #0
 8101be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8101be4:	4b28      	ldr	r3, [pc, #160]	; (8101c88 <prvInsertBlockIntoFreeList+0xac>)
 8101be6:	60fb      	str	r3, [r7, #12]
 8101be8:	e002      	b.n	8101bf0 <prvInsertBlockIntoFreeList+0x14>
 8101bea:	68fb      	ldr	r3, [r7, #12]
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	60fb      	str	r3, [r7, #12]
 8101bf0:	68fb      	ldr	r3, [r7, #12]
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	687a      	ldr	r2, [r7, #4]
 8101bf6:	429a      	cmp	r2, r3
 8101bf8:	d8f7      	bhi.n	8101bea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8101bfa:	68fb      	ldr	r3, [r7, #12]
 8101bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8101bfe:	68fb      	ldr	r3, [r7, #12]
 8101c00:	685b      	ldr	r3, [r3, #4]
 8101c02:	68ba      	ldr	r2, [r7, #8]
 8101c04:	4413      	add	r3, r2
 8101c06:	687a      	ldr	r2, [r7, #4]
 8101c08:	429a      	cmp	r2, r3
 8101c0a:	d108      	bne.n	8101c1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8101c0c:	68fb      	ldr	r3, [r7, #12]
 8101c0e:	685a      	ldr	r2, [r3, #4]
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	685b      	ldr	r3, [r3, #4]
 8101c14:	441a      	add	r2, r3
 8101c16:	68fb      	ldr	r3, [r7, #12]
 8101c18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8101c1a:	68fb      	ldr	r3, [r7, #12]
 8101c1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	685b      	ldr	r3, [r3, #4]
 8101c26:	68ba      	ldr	r2, [r7, #8]
 8101c28:	441a      	add	r2, r3
 8101c2a:	68fb      	ldr	r3, [r7, #12]
 8101c2c:	681b      	ldr	r3, [r3, #0]
 8101c2e:	429a      	cmp	r2, r3
 8101c30:	d118      	bne.n	8101c64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8101c32:	68fb      	ldr	r3, [r7, #12]
 8101c34:	681a      	ldr	r2, [r3, #0]
 8101c36:	4b15      	ldr	r3, [pc, #84]	; (8101c8c <prvInsertBlockIntoFreeList+0xb0>)
 8101c38:	681b      	ldr	r3, [r3, #0]
 8101c3a:	429a      	cmp	r2, r3
 8101c3c:	d00d      	beq.n	8101c5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8101c3e:	687b      	ldr	r3, [r7, #4]
 8101c40:	685a      	ldr	r2, [r3, #4]
 8101c42:	68fb      	ldr	r3, [r7, #12]
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	685b      	ldr	r3, [r3, #4]
 8101c48:	441a      	add	r2, r3
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8101c4e:	68fb      	ldr	r3, [r7, #12]
 8101c50:	681b      	ldr	r3, [r3, #0]
 8101c52:	681a      	ldr	r2, [r3, #0]
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	601a      	str	r2, [r3, #0]
 8101c58:	e008      	b.n	8101c6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8101c5a:	4b0c      	ldr	r3, [pc, #48]	; (8101c8c <prvInsertBlockIntoFreeList+0xb0>)
 8101c5c:	681a      	ldr	r2, [r3, #0]
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	601a      	str	r2, [r3, #0]
 8101c62:	e003      	b.n	8101c6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8101c64:	68fb      	ldr	r3, [r7, #12]
 8101c66:	681a      	ldr	r2, [r3, #0]
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8101c6c:	68fa      	ldr	r2, [r7, #12]
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	429a      	cmp	r2, r3
 8101c72:	d002      	beq.n	8101c7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8101c74:	68fb      	ldr	r3, [r7, #12]
 8101c76:	687a      	ldr	r2, [r7, #4]
 8101c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8101c7a:	bf00      	nop
 8101c7c:	3714      	adds	r7, #20
 8101c7e:	46bd      	mov	sp, r7
 8101c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c84:	4770      	bx	lr
 8101c86:	bf00      	nop
 8101c88:	10003e84 	.word	0x10003e84
 8101c8c:	10003e8c 	.word	0x10003e8c

08101c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8101c90:	b480      	push	{r7}
 8101c92:	b083      	sub	sp, #12
 8101c94:	af00      	add	r7, sp, #0
 8101c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101c98:	687b      	ldr	r3, [r7, #4]
 8101c9a:	f103 0208 	add.w	r2, r3, #8
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8101ca2:	687b      	ldr	r3, [r7, #4]
 8101ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8101ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101caa:	687b      	ldr	r3, [r7, #4]
 8101cac:	f103 0208 	add.w	r2, r3, #8
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8101cb4:	687b      	ldr	r3, [r7, #4]
 8101cb6:	f103 0208 	add.w	r2, r3, #8
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	2200      	movs	r2, #0
 8101cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8101cc4:	bf00      	nop
 8101cc6:	370c      	adds	r7, #12
 8101cc8:	46bd      	mov	sp, r7
 8101cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cce:	4770      	bx	lr

08101cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8101cd0:	b480      	push	{r7}
 8101cd2:	b083      	sub	sp, #12
 8101cd4:	af00      	add	r7, sp, #0
 8101cd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8101cd8:	687b      	ldr	r3, [r7, #4]
 8101cda:	2200      	movs	r2, #0
 8101cdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8101cde:	bf00      	nop
 8101ce0:	370c      	adds	r7, #12
 8101ce2:	46bd      	mov	sp, r7
 8101ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce8:	4770      	bx	lr

08101cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101cea:	b480      	push	{r7}
 8101cec:	b085      	sub	sp, #20
 8101cee:	af00      	add	r7, sp, #0
 8101cf0:	6078      	str	r0, [r7, #4]
 8101cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	685b      	ldr	r3, [r3, #4]
 8101cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8101cfa:	683b      	ldr	r3, [r7, #0]
 8101cfc:	68fa      	ldr	r2, [r7, #12]
 8101cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8101d00:	68fb      	ldr	r3, [r7, #12]
 8101d02:	689a      	ldr	r2, [r3, #8]
 8101d04:	683b      	ldr	r3, [r7, #0]
 8101d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8101d08:	68fb      	ldr	r3, [r7, #12]
 8101d0a:	689b      	ldr	r3, [r3, #8]
 8101d0c:	683a      	ldr	r2, [r7, #0]
 8101d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8101d10:	68fb      	ldr	r3, [r7, #12]
 8101d12:	683a      	ldr	r2, [r7, #0]
 8101d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8101d16:	683b      	ldr	r3, [r7, #0]
 8101d18:	687a      	ldr	r2, [r7, #4]
 8101d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	1c5a      	adds	r2, r3, #1
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	601a      	str	r2, [r3, #0]
}
 8101d26:	bf00      	nop
 8101d28:	3714      	adds	r7, #20
 8101d2a:	46bd      	mov	sp, r7
 8101d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d30:	4770      	bx	lr

08101d32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8101d32:	b480      	push	{r7}
 8101d34:	b085      	sub	sp, #20
 8101d36:	af00      	add	r7, sp, #0
 8101d38:	6078      	str	r0, [r7, #4]
 8101d3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8101d3c:	683b      	ldr	r3, [r7, #0]
 8101d3e:	681b      	ldr	r3, [r3, #0]
 8101d40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8101d42:	68bb      	ldr	r3, [r7, #8]
 8101d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101d48:	d103      	bne.n	8101d52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8101d4a:	687b      	ldr	r3, [r7, #4]
 8101d4c:	691b      	ldr	r3, [r3, #16]
 8101d4e:	60fb      	str	r3, [r7, #12]
 8101d50:	e00c      	b.n	8101d6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	3308      	adds	r3, #8
 8101d56:	60fb      	str	r3, [r7, #12]
 8101d58:	e002      	b.n	8101d60 <vListInsert+0x2e>
 8101d5a:	68fb      	ldr	r3, [r7, #12]
 8101d5c:	685b      	ldr	r3, [r3, #4]
 8101d5e:	60fb      	str	r3, [r7, #12]
 8101d60:	68fb      	ldr	r3, [r7, #12]
 8101d62:	685b      	ldr	r3, [r3, #4]
 8101d64:	681b      	ldr	r3, [r3, #0]
 8101d66:	68ba      	ldr	r2, [r7, #8]
 8101d68:	429a      	cmp	r2, r3
 8101d6a:	d2f6      	bcs.n	8101d5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8101d6c:	68fb      	ldr	r3, [r7, #12]
 8101d6e:	685a      	ldr	r2, [r3, #4]
 8101d70:	683b      	ldr	r3, [r7, #0]
 8101d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8101d74:	683b      	ldr	r3, [r7, #0]
 8101d76:	685b      	ldr	r3, [r3, #4]
 8101d78:	683a      	ldr	r2, [r7, #0]
 8101d7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8101d7c:	683b      	ldr	r3, [r7, #0]
 8101d7e:	68fa      	ldr	r2, [r7, #12]
 8101d80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8101d82:	68fb      	ldr	r3, [r7, #12]
 8101d84:	683a      	ldr	r2, [r7, #0]
 8101d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8101d88:	683b      	ldr	r3, [r7, #0]
 8101d8a:	687a      	ldr	r2, [r7, #4]
 8101d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8101d8e:	687b      	ldr	r3, [r7, #4]
 8101d90:	681b      	ldr	r3, [r3, #0]
 8101d92:	1c5a      	adds	r2, r3, #1
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	601a      	str	r2, [r3, #0]
}
 8101d98:	bf00      	nop
 8101d9a:	3714      	adds	r7, #20
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101da2:	4770      	bx	lr

08101da4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8101da4:	b480      	push	{r7}
 8101da6:	b085      	sub	sp, #20
 8101da8:	af00      	add	r7, sp, #0
 8101daa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	691b      	ldr	r3, [r3, #16]
 8101db0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	685b      	ldr	r3, [r3, #4]
 8101db6:	687a      	ldr	r2, [r7, #4]
 8101db8:	6892      	ldr	r2, [r2, #8]
 8101dba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	689b      	ldr	r3, [r3, #8]
 8101dc0:	687a      	ldr	r2, [r7, #4]
 8101dc2:	6852      	ldr	r2, [r2, #4]
 8101dc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8101dc6:	68fb      	ldr	r3, [r7, #12]
 8101dc8:	685b      	ldr	r3, [r3, #4]
 8101dca:	687a      	ldr	r2, [r7, #4]
 8101dcc:	429a      	cmp	r2, r3
 8101dce:	d103      	bne.n	8101dd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	689a      	ldr	r2, [r3, #8]
 8101dd4:	68fb      	ldr	r3, [r7, #12]
 8101dd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	2200      	movs	r2, #0
 8101ddc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8101dde:	68fb      	ldr	r3, [r7, #12]
 8101de0:	681b      	ldr	r3, [r3, #0]
 8101de2:	1e5a      	subs	r2, r3, #1
 8101de4:	68fb      	ldr	r3, [r7, #12]
 8101de6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8101de8:	68fb      	ldr	r3, [r7, #12]
 8101dea:	681b      	ldr	r3, [r3, #0]
}
 8101dec:	4618      	mov	r0, r3
 8101dee:	3714      	adds	r7, #20
 8101df0:	46bd      	mov	sp, r7
 8101df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101df6:	4770      	bx	lr

08101df8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8101df8:	b480      	push	{r7}
 8101dfa:	b085      	sub	sp, #20
 8101dfc:	af00      	add	r7, sp, #0
 8101dfe:	60f8      	str	r0, [r7, #12]
 8101e00:	60b9      	str	r1, [r7, #8]
 8101e02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8101e04:	68fb      	ldr	r3, [r7, #12]
 8101e06:	3b04      	subs	r3, #4
 8101e08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8101e0a:	68fb      	ldr	r3, [r7, #12]
 8101e0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8101e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101e12:	68fb      	ldr	r3, [r7, #12]
 8101e14:	3b04      	subs	r3, #4
 8101e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8101e18:	68bb      	ldr	r3, [r7, #8]
 8101e1a:	f023 0201 	bic.w	r2, r3, #1
 8101e1e:	68fb      	ldr	r3, [r7, #12]
 8101e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8101e22:	68fb      	ldr	r3, [r7, #12]
 8101e24:	3b04      	subs	r3, #4
 8101e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8101e28:	4a0c      	ldr	r2, [pc, #48]	; (8101e5c <pxPortInitialiseStack+0x64>)
 8101e2a:	68fb      	ldr	r3, [r7, #12]
 8101e2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8101e2e:	68fb      	ldr	r3, [r7, #12]
 8101e30:	3b14      	subs	r3, #20
 8101e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8101e34:	687a      	ldr	r2, [r7, #4]
 8101e36:	68fb      	ldr	r3, [r7, #12]
 8101e38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8101e3a:	68fb      	ldr	r3, [r7, #12]
 8101e3c:	3b04      	subs	r3, #4
 8101e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8101e40:	68fb      	ldr	r3, [r7, #12]
 8101e42:	f06f 0202 	mvn.w	r2, #2
 8101e46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8101e48:	68fb      	ldr	r3, [r7, #12]
 8101e4a:	3b20      	subs	r3, #32
 8101e4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8101e4e:	68fb      	ldr	r3, [r7, #12]
}
 8101e50:	4618      	mov	r0, r3
 8101e52:	3714      	adds	r7, #20
 8101e54:	46bd      	mov	sp, r7
 8101e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e5a:	4770      	bx	lr
 8101e5c:	08101e61 	.word	0x08101e61

08101e60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8101e60:	b480      	push	{r7}
 8101e62:	b085      	sub	sp, #20
 8101e64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8101e66:	2300      	movs	r3, #0
 8101e68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8101e6a:	4b12      	ldr	r3, [pc, #72]	; (8101eb4 <prvTaskExitError+0x54>)
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e72:	d00a      	beq.n	8101e8a <prvTaskExitError+0x2a>
	__asm volatile
 8101e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e78:	f383 8811 	msr	BASEPRI, r3
 8101e7c:	f3bf 8f6f 	isb	sy
 8101e80:	f3bf 8f4f 	dsb	sy
 8101e84:	60fb      	str	r3, [r7, #12]
}
 8101e86:	bf00      	nop
 8101e88:	e7fe      	b.n	8101e88 <prvTaskExitError+0x28>
	__asm volatile
 8101e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101e8e:	f383 8811 	msr	BASEPRI, r3
 8101e92:	f3bf 8f6f 	isb	sy
 8101e96:	f3bf 8f4f 	dsb	sy
 8101e9a:	60bb      	str	r3, [r7, #8]
}
 8101e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8101e9e:	bf00      	nop
 8101ea0:	687b      	ldr	r3, [r7, #4]
 8101ea2:	2b00      	cmp	r3, #0
 8101ea4:	d0fc      	beq.n	8101ea0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8101ea6:	bf00      	nop
 8101ea8:	bf00      	nop
 8101eaa:	3714      	adds	r7, #20
 8101eac:	46bd      	mov	sp, r7
 8101eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eb2:	4770      	bx	lr
 8101eb4:	10000010 	.word	0x10000010
	...

08101ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8101ec0:	4b07      	ldr	r3, [pc, #28]	; (8101ee0 <pxCurrentTCBConst2>)
 8101ec2:	6819      	ldr	r1, [r3, #0]
 8101ec4:	6808      	ldr	r0, [r1, #0]
 8101ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101eca:	f380 8809 	msr	PSP, r0
 8101ece:	f3bf 8f6f 	isb	sy
 8101ed2:	f04f 0000 	mov.w	r0, #0
 8101ed6:	f380 8811 	msr	BASEPRI, r0
 8101eda:	4770      	bx	lr
 8101edc:	f3af 8000 	nop.w

08101ee0 <pxCurrentTCBConst2>:
 8101ee0:	10003eac 	.word	0x10003eac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8101ee4:	bf00      	nop
 8101ee6:	bf00      	nop

08101ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8101ee8:	4808      	ldr	r0, [pc, #32]	; (8101f0c <prvPortStartFirstTask+0x24>)
 8101eea:	6800      	ldr	r0, [r0, #0]
 8101eec:	6800      	ldr	r0, [r0, #0]
 8101eee:	f380 8808 	msr	MSP, r0
 8101ef2:	f04f 0000 	mov.w	r0, #0
 8101ef6:	f380 8814 	msr	CONTROL, r0
 8101efa:	b662      	cpsie	i
 8101efc:	b661      	cpsie	f
 8101efe:	f3bf 8f4f 	dsb	sy
 8101f02:	f3bf 8f6f 	isb	sy
 8101f06:	df00      	svc	0
 8101f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8101f0a:	bf00      	nop
 8101f0c:	e000ed08 	.word	0xe000ed08

08101f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8101f10:	b580      	push	{r7, lr}
 8101f12:	b086      	sub	sp, #24
 8101f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8101f16:	4b46      	ldr	r3, [pc, #280]	; (8102030 <xPortStartScheduler+0x120>)
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	4a46      	ldr	r2, [pc, #280]	; (8102034 <xPortStartScheduler+0x124>)
 8101f1c:	4293      	cmp	r3, r2
 8101f1e:	d10a      	bne.n	8101f36 <xPortStartScheduler+0x26>
	__asm volatile
 8101f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f24:	f383 8811 	msr	BASEPRI, r3
 8101f28:	f3bf 8f6f 	isb	sy
 8101f2c:	f3bf 8f4f 	dsb	sy
 8101f30:	613b      	str	r3, [r7, #16]
}
 8101f32:	bf00      	nop
 8101f34:	e7fe      	b.n	8101f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8101f36:	4b3e      	ldr	r3, [pc, #248]	; (8102030 <xPortStartScheduler+0x120>)
 8101f38:	681b      	ldr	r3, [r3, #0]
 8101f3a:	4a3f      	ldr	r2, [pc, #252]	; (8102038 <xPortStartScheduler+0x128>)
 8101f3c:	4293      	cmp	r3, r2
 8101f3e:	d10a      	bne.n	8101f56 <xPortStartScheduler+0x46>
	__asm volatile
 8101f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101f44:	f383 8811 	msr	BASEPRI, r3
 8101f48:	f3bf 8f6f 	isb	sy
 8101f4c:	f3bf 8f4f 	dsb	sy
 8101f50:	60fb      	str	r3, [r7, #12]
}
 8101f52:	bf00      	nop
 8101f54:	e7fe      	b.n	8101f54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8101f56:	4b39      	ldr	r3, [pc, #228]	; (810203c <xPortStartScheduler+0x12c>)
 8101f58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8101f5a:	697b      	ldr	r3, [r7, #20]
 8101f5c:	781b      	ldrb	r3, [r3, #0]
 8101f5e:	b2db      	uxtb	r3, r3
 8101f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8101f62:	697b      	ldr	r3, [r7, #20]
 8101f64:	22ff      	movs	r2, #255	; 0xff
 8101f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8101f68:	697b      	ldr	r3, [r7, #20]
 8101f6a:	781b      	ldrb	r3, [r3, #0]
 8101f6c:	b2db      	uxtb	r3, r3
 8101f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8101f70:	78fb      	ldrb	r3, [r7, #3]
 8101f72:	b2db      	uxtb	r3, r3
 8101f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8101f78:	b2da      	uxtb	r2, r3
 8101f7a:	4b31      	ldr	r3, [pc, #196]	; (8102040 <xPortStartScheduler+0x130>)
 8101f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8101f7e:	4b31      	ldr	r3, [pc, #196]	; (8102044 <xPortStartScheduler+0x134>)
 8101f80:	2207      	movs	r2, #7
 8101f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101f84:	e009      	b.n	8101f9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8101f86:	4b2f      	ldr	r3, [pc, #188]	; (8102044 <xPortStartScheduler+0x134>)
 8101f88:	681b      	ldr	r3, [r3, #0]
 8101f8a:	3b01      	subs	r3, #1
 8101f8c:	4a2d      	ldr	r2, [pc, #180]	; (8102044 <xPortStartScheduler+0x134>)
 8101f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8101f90:	78fb      	ldrb	r3, [r7, #3]
 8101f92:	b2db      	uxtb	r3, r3
 8101f94:	005b      	lsls	r3, r3, #1
 8101f96:	b2db      	uxtb	r3, r3
 8101f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8101f9a:	78fb      	ldrb	r3, [r7, #3]
 8101f9c:	b2db      	uxtb	r3, r3
 8101f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101fa2:	2b80      	cmp	r3, #128	; 0x80
 8101fa4:	d0ef      	beq.n	8101f86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8101fa6:	4b27      	ldr	r3, [pc, #156]	; (8102044 <xPortStartScheduler+0x134>)
 8101fa8:	681b      	ldr	r3, [r3, #0]
 8101faa:	f1c3 0307 	rsb	r3, r3, #7
 8101fae:	2b04      	cmp	r3, #4
 8101fb0:	d00a      	beq.n	8101fc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8101fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8101fb6:	f383 8811 	msr	BASEPRI, r3
 8101fba:	f3bf 8f6f 	isb	sy
 8101fbe:	f3bf 8f4f 	dsb	sy
 8101fc2:	60bb      	str	r3, [r7, #8]
}
 8101fc4:	bf00      	nop
 8101fc6:	e7fe      	b.n	8101fc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8101fc8:	4b1e      	ldr	r3, [pc, #120]	; (8102044 <xPortStartScheduler+0x134>)
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	021b      	lsls	r3, r3, #8
 8101fce:	4a1d      	ldr	r2, [pc, #116]	; (8102044 <xPortStartScheduler+0x134>)
 8101fd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8101fd2:	4b1c      	ldr	r3, [pc, #112]	; (8102044 <xPortStartScheduler+0x134>)
 8101fd4:	681b      	ldr	r3, [r3, #0]
 8101fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8101fda:	4a1a      	ldr	r2, [pc, #104]	; (8102044 <xPortStartScheduler+0x134>)
 8101fdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	b2da      	uxtb	r2, r3
 8101fe2:	697b      	ldr	r3, [r7, #20]
 8101fe4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8101fe6:	4b18      	ldr	r3, [pc, #96]	; (8102048 <xPortStartScheduler+0x138>)
 8101fe8:	681b      	ldr	r3, [r3, #0]
 8101fea:	4a17      	ldr	r2, [pc, #92]	; (8102048 <xPortStartScheduler+0x138>)
 8101fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8101ff2:	4b15      	ldr	r3, [pc, #84]	; (8102048 <xPortStartScheduler+0x138>)
 8101ff4:	681b      	ldr	r3, [r3, #0]
 8101ff6:	4a14      	ldr	r2, [pc, #80]	; (8102048 <xPortStartScheduler+0x138>)
 8101ff8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8101ffc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8101ffe:	f000 f8dd 	bl	81021bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8102002:	4b12      	ldr	r3, [pc, #72]	; (810204c <xPortStartScheduler+0x13c>)
 8102004:	2200      	movs	r2, #0
 8102006:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8102008:	f000 f8fc 	bl	8102204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810200c:	4b10      	ldr	r3, [pc, #64]	; (8102050 <xPortStartScheduler+0x140>)
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	4a0f      	ldr	r2, [pc, #60]	; (8102050 <xPortStartScheduler+0x140>)
 8102012:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8102016:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8102018:	f7ff ff66 	bl	8101ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810201c:	f000 fc86 	bl	810292c <vTaskSwitchContext>
	prvTaskExitError();
 8102020:	f7ff ff1e 	bl	8101e60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8102024:	2300      	movs	r3, #0
}
 8102026:	4618      	mov	r0, r3
 8102028:	3718      	adds	r7, #24
 810202a:	46bd      	mov	sp, r7
 810202c:	bd80      	pop	{r7, pc}
 810202e:	bf00      	nop
 8102030:	e000ed00 	.word	0xe000ed00
 8102034:	410fc271 	.word	0x410fc271
 8102038:	410fc270 	.word	0x410fc270
 810203c:	e000e400 	.word	0xe000e400
 8102040:	10003ea4 	.word	0x10003ea4
 8102044:	10003ea8 	.word	0x10003ea8
 8102048:	e000ed20 	.word	0xe000ed20
 810204c:	10000010 	.word	0x10000010
 8102050:	e000ef34 	.word	0xe000ef34

08102054 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8102054:	b480      	push	{r7}
 8102056:	b083      	sub	sp, #12
 8102058:	af00      	add	r7, sp, #0
	__asm volatile
 810205a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810205e:	f383 8811 	msr	BASEPRI, r3
 8102062:	f3bf 8f6f 	isb	sy
 8102066:	f3bf 8f4f 	dsb	sy
 810206a:	607b      	str	r3, [r7, #4]
}
 810206c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810206e:	4b0f      	ldr	r3, [pc, #60]	; (81020ac <vPortEnterCritical+0x58>)
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	3301      	adds	r3, #1
 8102074:	4a0d      	ldr	r2, [pc, #52]	; (81020ac <vPortEnterCritical+0x58>)
 8102076:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8102078:	4b0c      	ldr	r3, [pc, #48]	; (81020ac <vPortEnterCritical+0x58>)
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	2b01      	cmp	r3, #1
 810207e:	d10f      	bne.n	81020a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8102080:	4b0b      	ldr	r3, [pc, #44]	; (81020b0 <vPortEnterCritical+0x5c>)
 8102082:	681b      	ldr	r3, [r3, #0]
 8102084:	b2db      	uxtb	r3, r3
 8102086:	2b00      	cmp	r3, #0
 8102088:	d00a      	beq.n	81020a0 <vPortEnterCritical+0x4c>
	__asm volatile
 810208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810208e:	f383 8811 	msr	BASEPRI, r3
 8102092:	f3bf 8f6f 	isb	sy
 8102096:	f3bf 8f4f 	dsb	sy
 810209a:	603b      	str	r3, [r7, #0]
}
 810209c:	bf00      	nop
 810209e:	e7fe      	b.n	810209e <vPortEnterCritical+0x4a>
	}
}
 81020a0:	bf00      	nop
 81020a2:	370c      	adds	r7, #12
 81020a4:	46bd      	mov	sp, r7
 81020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020aa:	4770      	bx	lr
 81020ac:	10000010 	.word	0x10000010
 81020b0:	e000ed04 	.word	0xe000ed04

081020b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81020b4:	b480      	push	{r7}
 81020b6:	b083      	sub	sp, #12
 81020b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81020ba:	4b12      	ldr	r3, [pc, #72]	; (8102104 <vPortExitCritical+0x50>)
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	2b00      	cmp	r3, #0
 81020c0:	d10a      	bne.n	81020d8 <vPortExitCritical+0x24>
	__asm volatile
 81020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81020c6:	f383 8811 	msr	BASEPRI, r3
 81020ca:	f3bf 8f6f 	isb	sy
 81020ce:	f3bf 8f4f 	dsb	sy
 81020d2:	607b      	str	r3, [r7, #4]
}
 81020d4:	bf00      	nop
 81020d6:	e7fe      	b.n	81020d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 81020d8:	4b0a      	ldr	r3, [pc, #40]	; (8102104 <vPortExitCritical+0x50>)
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	3b01      	subs	r3, #1
 81020de:	4a09      	ldr	r2, [pc, #36]	; (8102104 <vPortExitCritical+0x50>)
 81020e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81020e2:	4b08      	ldr	r3, [pc, #32]	; (8102104 <vPortExitCritical+0x50>)
 81020e4:	681b      	ldr	r3, [r3, #0]
 81020e6:	2b00      	cmp	r3, #0
 81020e8:	d105      	bne.n	81020f6 <vPortExitCritical+0x42>
 81020ea:	2300      	movs	r3, #0
 81020ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81020ee:	683b      	ldr	r3, [r7, #0]
 81020f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 81020f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 81020f6:	bf00      	nop
 81020f8:	370c      	adds	r7, #12
 81020fa:	46bd      	mov	sp, r7
 81020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102100:	4770      	bx	lr
 8102102:	bf00      	nop
 8102104:	10000010 	.word	0x10000010
	...

08102110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8102110:	f3ef 8009 	mrs	r0, PSP
 8102114:	f3bf 8f6f 	isb	sy
 8102118:	4b15      	ldr	r3, [pc, #84]	; (8102170 <pxCurrentTCBConst>)
 810211a:	681a      	ldr	r2, [r3, #0]
 810211c:	f01e 0f10 	tst.w	lr, #16
 8102120:	bf08      	it	eq
 8102122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8102126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810212a:	6010      	str	r0, [r2, #0]
 810212c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8102130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8102134:	f380 8811 	msr	BASEPRI, r0
 8102138:	f3bf 8f4f 	dsb	sy
 810213c:	f3bf 8f6f 	isb	sy
 8102140:	f000 fbf4 	bl	810292c <vTaskSwitchContext>
 8102144:	f04f 0000 	mov.w	r0, #0
 8102148:	f380 8811 	msr	BASEPRI, r0
 810214c:	bc09      	pop	{r0, r3}
 810214e:	6819      	ldr	r1, [r3, #0]
 8102150:	6808      	ldr	r0, [r1, #0]
 8102152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102156:	f01e 0f10 	tst.w	lr, #16
 810215a:	bf08      	it	eq
 810215c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8102160:	f380 8809 	msr	PSP, r0
 8102164:	f3bf 8f6f 	isb	sy
 8102168:	4770      	bx	lr
 810216a:	bf00      	nop
 810216c:	f3af 8000 	nop.w

08102170 <pxCurrentTCBConst>:
 8102170:	10003eac 	.word	0x10003eac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8102174:	bf00      	nop
 8102176:	bf00      	nop

08102178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8102178:	b580      	push	{r7, lr}
 810217a:	b082      	sub	sp, #8
 810217c:	af00      	add	r7, sp, #0
	__asm volatile
 810217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102182:	f383 8811 	msr	BASEPRI, r3
 8102186:	f3bf 8f6f 	isb	sy
 810218a:	f3bf 8f4f 	dsb	sy
 810218e:	607b      	str	r3, [r7, #4]
}
 8102190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8102192:	f000 fb13 	bl	81027bc <xTaskIncrementTick>
 8102196:	4603      	mov	r3, r0
 8102198:	2b00      	cmp	r3, #0
 810219a:	d003      	beq.n	81021a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810219c:	4b06      	ldr	r3, [pc, #24]	; (81021b8 <SysTick_Handler+0x40>)
 810219e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81021a2:	601a      	str	r2, [r3, #0]
 81021a4:	2300      	movs	r3, #0
 81021a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 81021a8:	683b      	ldr	r3, [r7, #0]
 81021aa:	f383 8811 	msr	BASEPRI, r3
}
 81021ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 81021b0:	bf00      	nop
 81021b2:	3708      	adds	r7, #8
 81021b4:	46bd      	mov	sp, r7
 81021b6:	bd80      	pop	{r7, pc}
 81021b8:	e000ed04 	.word	0xe000ed04

081021bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81021bc:	b480      	push	{r7}
 81021be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81021c0:	4b0b      	ldr	r3, [pc, #44]	; (81021f0 <vPortSetupTimerInterrupt+0x34>)
 81021c2:	2200      	movs	r2, #0
 81021c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81021c6:	4b0b      	ldr	r3, [pc, #44]	; (81021f4 <vPortSetupTimerInterrupt+0x38>)
 81021c8:	2200      	movs	r2, #0
 81021ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81021cc:	4b0a      	ldr	r3, [pc, #40]	; (81021f8 <vPortSetupTimerInterrupt+0x3c>)
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a0a      	ldr	r2, [pc, #40]	; (81021fc <vPortSetupTimerInterrupt+0x40>)
 81021d2:	fba2 2303 	umull	r2, r3, r2, r3
 81021d6:	099b      	lsrs	r3, r3, #6
 81021d8:	4a09      	ldr	r2, [pc, #36]	; (8102200 <vPortSetupTimerInterrupt+0x44>)
 81021da:	3b01      	subs	r3, #1
 81021dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81021de:	4b04      	ldr	r3, [pc, #16]	; (81021f0 <vPortSetupTimerInterrupt+0x34>)
 81021e0:	2207      	movs	r2, #7
 81021e2:	601a      	str	r2, [r3, #0]
}
 81021e4:	bf00      	nop
 81021e6:	46bd      	mov	sp, r7
 81021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ec:	4770      	bx	lr
 81021ee:	bf00      	nop
 81021f0:	e000e010 	.word	0xe000e010
 81021f4:	e000e018 	.word	0xe000e018
 81021f8:	10000004 	.word	0x10000004
 81021fc:	10624dd3 	.word	0x10624dd3
 8102200:	e000e014 	.word	0xe000e014

08102204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8102204:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8102214 <vPortEnableVFP+0x10>
 8102208:	6801      	ldr	r1, [r0, #0]
 810220a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810220e:	6001      	str	r1, [r0, #0]
 8102210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8102212:	bf00      	nop
 8102214:	e000ed88 	.word	0xe000ed88

08102218 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8102218:	b580      	push	{r7, lr}
 810221a:	b08e      	sub	sp, #56	; 0x38
 810221c:	af04      	add	r7, sp, #16
 810221e:	60f8      	str	r0, [r7, #12]
 8102220:	60b9      	str	r1, [r7, #8]
 8102222:	607a      	str	r2, [r7, #4]
 8102224:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8102226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102228:	2b00      	cmp	r3, #0
 810222a:	d10a      	bne.n	8102242 <xTaskCreateStatic+0x2a>
	__asm volatile
 810222c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102230:	f383 8811 	msr	BASEPRI, r3
 8102234:	f3bf 8f6f 	isb	sy
 8102238:	f3bf 8f4f 	dsb	sy
 810223c:	623b      	str	r3, [r7, #32]
}
 810223e:	bf00      	nop
 8102240:	e7fe      	b.n	8102240 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8102242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102244:	2b00      	cmp	r3, #0
 8102246:	d10a      	bne.n	810225e <xTaskCreateStatic+0x46>
	__asm volatile
 8102248:	f04f 0350 	mov.w	r3, #80	; 0x50
 810224c:	f383 8811 	msr	BASEPRI, r3
 8102250:	f3bf 8f6f 	isb	sy
 8102254:	f3bf 8f4f 	dsb	sy
 8102258:	61fb      	str	r3, [r7, #28]
}
 810225a:	bf00      	nop
 810225c:	e7fe      	b.n	810225c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810225e:	2354      	movs	r3, #84	; 0x54
 8102260:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8102262:	693b      	ldr	r3, [r7, #16]
 8102264:	2b54      	cmp	r3, #84	; 0x54
 8102266:	d00a      	beq.n	810227e <xTaskCreateStatic+0x66>
	__asm volatile
 8102268:	f04f 0350 	mov.w	r3, #80	; 0x50
 810226c:	f383 8811 	msr	BASEPRI, r3
 8102270:	f3bf 8f6f 	isb	sy
 8102274:	f3bf 8f4f 	dsb	sy
 8102278:	61bb      	str	r3, [r7, #24]
}
 810227a:	bf00      	nop
 810227c:	e7fe      	b.n	810227c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810227e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8102280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102282:	2b00      	cmp	r3, #0
 8102284:	d01e      	beq.n	81022c4 <xTaskCreateStatic+0xac>
 8102286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102288:	2b00      	cmp	r3, #0
 810228a:	d01b      	beq.n	81022c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810228c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810228e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8102290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102294:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8102296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102298:	2202      	movs	r2, #2
 810229a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810229e:	2300      	movs	r3, #0
 81022a0:	9303      	str	r3, [sp, #12]
 81022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81022a4:	9302      	str	r3, [sp, #8]
 81022a6:	f107 0314 	add.w	r3, r7, #20
 81022aa:	9301      	str	r3, [sp, #4]
 81022ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81022ae:	9300      	str	r3, [sp, #0]
 81022b0:	683b      	ldr	r3, [r7, #0]
 81022b2:	687a      	ldr	r2, [r7, #4]
 81022b4:	68b9      	ldr	r1, [r7, #8]
 81022b6:	68f8      	ldr	r0, [r7, #12]
 81022b8:	f000 f850 	bl	810235c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81022bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81022be:	f000 f8d5 	bl	810246c <prvAddNewTaskToReadyList>
 81022c2:	e001      	b.n	81022c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 81022c4:	2300      	movs	r3, #0
 81022c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 81022c8:	697b      	ldr	r3, [r7, #20]
	}
 81022ca:	4618      	mov	r0, r3
 81022cc:	3728      	adds	r7, #40	; 0x28
 81022ce:	46bd      	mov	sp, r7
 81022d0:	bd80      	pop	{r7, pc}

081022d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 81022d2:	b580      	push	{r7, lr}
 81022d4:	b08c      	sub	sp, #48	; 0x30
 81022d6:	af04      	add	r7, sp, #16
 81022d8:	60f8      	str	r0, [r7, #12]
 81022da:	60b9      	str	r1, [r7, #8]
 81022dc:	603b      	str	r3, [r7, #0]
 81022de:	4613      	mov	r3, r2
 81022e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 81022e2:	88fb      	ldrh	r3, [r7, #6]
 81022e4:	009b      	lsls	r3, r3, #2
 81022e6:	4618      	mov	r0, r3
 81022e8:	f7ff fae8 	bl	81018bc <pvPortMalloc>
 81022ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 81022ee:	697b      	ldr	r3, [r7, #20]
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	d00e      	beq.n	8102312 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 81022f4:	2054      	movs	r0, #84	; 0x54
 81022f6:	f7ff fae1 	bl	81018bc <pvPortMalloc>
 81022fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 81022fc:	69fb      	ldr	r3, [r7, #28]
 81022fe:	2b00      	cmp	r3, #0
 8102300:	d003      	beq.n	810230a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8102302:	69fb      	ldr	r3, [r7, #28]
 8102304:	697a      	ldr	r2, [r7, #20]
 8102306:	631a      	str	r2, [r3, #48]	; 0x30
 8102308:	e005      	b.n	8102316 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810230a:	6978      	ldr	r0, [r7, #20]
 810230c:	f7ff fba2 	bl	8101a54 <vPortFree>
 8102310:	e001      	b.n	8102316 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8102312:	2300      	movs	r3, #0
 8102314:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8102316:	69fb      	ldr	r3, [r7, #28]
 8102318:	2b00      	cmp	r3, #0
 810231a:	d017      	beq.n	810234c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810231c:	69fb      	ldr	r3, [r7, #28]
 810231e:	2200      	movs	r2, #0
 8102320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8102324:	88fa      	ldrh	r2, [r7, #6]
 8102326:	2300      	movs	r3, #0
 8102328:	9303      	str	r3, [sp, #12]
 810232a:	69fb      	ldr	r3, [r7, #28]
 810232c:	9302      	str	r3, [sp, #8]
 810232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102330:	9301      	str	r3, [sp, #4]
 8102332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102334:	9300      	str	r3, [sp, #0]
 8102336:	683b      	ldr	r3, [r7, #0]
 8102338:	68b9      	ldr	r1, [r7, #8]
 810233a:	68f8      	ldr	r0, [r7, #12]
 810233c:	f000 f80e 	bl	810235c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8102340:	69f8      	ldr	r0, [r7, #28]
 8102342:	f000 f893 	bl	810246c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8102346:	2301      	movs	r3, #1
 8102348:	61bb      	str	r3, [r7, #24]
 810234a:	e002      	b.n	8102352 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810234c:	f04f 33ff 	mov.w	r3, #4294967295
 8102350:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8102352:	69bb      	ldr	r3, [r7, #24]
	}
 8102354:	4618      	mov	r0, r3
 8102356:	3720      	adds	r7, #32
 8102358:	46bd      	mov	sp, r7
 810235a:	bd80      	pop	{r7, pc}

0810235c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810235c:	b580      	push	{r7, lr}
 810235e:	b088      	sub	sp, #32
 8102360:	af00      	add	r7, sp, #0
 8102362:	60f8      	str	r0, [r7, #12]
 8102364:	60b9      	str	r1, [r7, #8]
 8102366:	607a      	str	r2, [r7, #4]
 8102368:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810236c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8102374:	3b01      	subs	r3, #1
 8102376:	009b      	lsls	r3, r3, #2
 8102378:	4413      	add	r3, r2
 810237a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810237c:	69bb      	ldr	r3, [r7, #24]
 810237e:	f023 0307 	bic.w	r3, r3, #7
 8102382:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8102384:	69bb      	ldr	r3, [r7, #24]
 8102386:	f003 0307 	and.w	r3, r3, #7
 810238a:	2b00      	cmp	r3, #0
 810238c:	d00a      	beq.n	81023a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 810238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102392:	f383 8811 	msr	BASEPRI, r3
 8102396:	f3bf 8f6f 	isb	sy
 810239a:	f3bf 8f4f 	dsb	sy
 810239e:	617b      	str	r3, [r7, #20]
}
 81023a0:	bf00      	nop
 81023a2:	e7fe      	b.n	81023a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 81023a4:	68bb      	ldr	r3, [r7, #8]
 81023a6:	2b00      	cmp	r3, #0
 81023a8:	d01f      	beq.n	81023ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81023aa:	2300      	movs	r3, #0
 81023ac:	61fb      	str	r3, [r7, #28]
 81023ae:	e012      	b.n	81023d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 81023b0:	68ba      	ldr	r2, [r7, #8]
 81023b2:	69fb      	ldr	r3, [r7, #28]
 81023b4:	4413      	add	r3, r2
 81023b6:	7819      	ldrb	r1, [r3, #0]
 81023b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81023ba:	69fb      	ldr	r3, [r7, #28]
 81023bc:	4413      	add	r3, r2
 81023be:	3334      	adds	r3, #52	; 0x34
 81023c0:	460a      	mov	r2, r1
 81023c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 81023c4:	68ba      	ldr	r2, [r7, #8]
 81023c6:	69fb      	ldr	r3, [r7, #28]
 81023c8:	4413      	add	r3, r2
 81023ca:	781b      	ldrb	r3, [r3, #0]
 81023cc:	2b00      	cmp	r3, #0
 81023ce:	d006      	beq.n	81023de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 81023d0:	69fb      	ldr	r3, [r7, #28]
 81023d2:	3301      	adds	r3, #1
 81023d4:	61fb      	str	r3, [r7, #28]
 81023d6:	69fb      	ldr	r3, [r7, #28]
 81023d8:	2b0f      	cmp	r3, #15
 81023da:	d9e9      	bls.n	81023b0 <prvInitialiseNewTask+0x54>
 81023dc:	e000      	b.n	81023e0 <prvInitialiseNewTask+0x84>
			{
				break;
 81023de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 81023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81023e2:	2200      	movs	r2, #0
 81023e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 81023e8:	e003      	b.n	81023f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 81023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81023ec:	2200      	movs	r2, #0
 81023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 81023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81023f4:	2b06      	cmp	r3, #6
 81023f6:	d901      	bls.n	81023fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 81023f8:	2306      	movs	r3, #6
 81023fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 81023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81023fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102400:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8102402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102406:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8102408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810240a:	2200      	movs	r2, #0
 810240c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102410:	3304      	adds	r3, #4
 8102412:	4618      	mov	r0, r3
 8102414:	f7ff fc5c 	bl	8101cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8102418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810241a:	3318      	adds	r3, #24
 810241c:	4618      	mov	r0, r3
 810241e:	f7ff fc57 	bl	8101cd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8102422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102426:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8102428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810242a:	f1c3 0207 	rsb	r2, r3, #7
 810242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102430:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8102432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102436:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8102438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810243a:	2200      	movs	r2, #0
 810243c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102440:	2200      	movs	r2, #0
 8102442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8102446:	683a      	ldr	r2, [r7, #0]
 8102448:	68f9      	ldr	r1, [r7, #12]
 810244a:	69b8      	ldr	r0, [r7, #24]
 810244c:	f7ff fcd4 	bl	8101df8 <pxPortInitialiseStack>
 8102450:	4602      	mov	r2, r0
 8102452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8102456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102458:	2b00      	cmp	r3, #0
 810245a:	d002      	beq.n	8102462 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810245e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8102462:	bf00      	nop
 8102464:	3720      	adds	r7, #32
 8102466:	46bd      	mov	sp, r7
 8102468:	bd80      	pop	{r7, pc}
	...

0810246c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810246c:	b580      	push	{r7, lr}
 810246e:	b082      	sub	sp, #8
 8102470:	af00      	add	r7, sp, #0
 8102472:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8102474:	f7ff fdee 	bl	8102054 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8102478:	4b2a      	ldr	r3, [pc, #168]	; (8102524 <prvAddNewTaskToReadyList+0xb8>)
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	3301      	adds	r3, #1
 810247e:	4a29      	ldr	r2, [pc, #164]	; (8102524 <prvAddNewTaskToReadyList+0xb8>)
 8102480:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8102482:	4b29      	ldr	r3, [pc, #164]	; (8102528 <prvAddNewTaskToReadyList+0xbc>)
 8102484:	681b      	ldr	r3, [r3, #0]
 8102486:	2b00      	cmp	r3, #0
 8102488:	d109      	bne.n	810249e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810248a:	4a27      	ldr	r2, [pc, #156]	; (8102528 <prvAddNewTaskToReadyList+0xbc>)
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8102490:	4b24      	ldr	r3, [pc, #144]	; (8102524 <prvAddNewTaskToReadyList+0xb8>)
 8102492:	681b      	ldr	r3, [r3, #0]
 8102494:	2b01      	cmp	r3, #1
 8102496:	d110      	bne.n	81024ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8102498:	f000 fabc 	bl	8102a14 <prvInitialiseTaskLists>
 810249c:	e00d      	b.n	81024ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810249e:	4b23      	ldr	r3, [pc, #140]	; (810252c <prvAddNewTaskToReadyList+0xc0>)
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	2b00      	cmp	r3, #0
 81024a4:	d109      	bne.n	81024ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 81024a6:	4b20      	ldr	r3, [pc, #128]	; (8102528 <prvAddNewTaskToReadyList+0xbc>)
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024b0:	429a      	cmp	r2, r3
 81024b2:	d802      	bhi.n	81024ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 81024b4:	4a1c      	ldr	r2, [pc, #112]	; (8102528 <prvAddNewTaskToReadyList+0xbc>)
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 81024ba:	4b1d      	ldr	r3, [pc, #116]	; (8102530 <prvAddNewTaskToReadyList+0xc4>)
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	3301      	adds	r3, #1
 81024c0:	4a1b      	ldr	r2, [pc, #108]	; (8102530 <prvAddNewTaskToReadyList+0xc4>)
 81024c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024c8:	2201      	movs	r2, #1
 81024ca:	409a      	lsls	r2, r3
 81024cc:	4b19      	ldr	r3, [pc, #100]	; (8102534 <prvAddNewTaskToReadyList+0xc8>)
 81024ce:	681b      	ldr	r3, [r3, #0]
 81024d0:	4313      	orrs	r3, r2
 81024d2:	4a18      	ldr	r2, [pc, #96]	; (8102534 <prvAddNewTaskToReadyList+0xc8>)
 81024d4:	6013      	str	r3, [r2, #0]
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81024da:	4613      	mov	r3, r2
 81024dc:	009b      	lsls	r3, r3, #2
 81024de:	4413      	add	r3, r2
 81024e0:	009b      	lsls	r3, r3, #2
 81024e2:	4a15      	ldr	r2, [pc, #84]	; (8102538 <prvAddNewTaskToReadyList+0xcc>)
 81024e4:	441a      	add	r2, r3
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	3304      	adds	r3, #4
 81024ea:	4619      	mov	r1, r3
 81024ec:	4610      	mov	r0, r2
 81024ee:	f7ff fbfc 	bl	8101cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 81024f2:	f7ff fddf 	bl	81020b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 81024f6:	4b0d      	ldr	r3, [pc, #52]	; (810252c <prvAddNewTaskToReadyList+0xc0>)
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	2b00      	cmp	r3, #0
 81024fc:	d00e      	beq.n	810251c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 81024fe:	4b0a      	ldr	r3, [pc, #40]	; (8102528 <prvAddNewTaskToReadyList+0xbc>)
 8102500:	681b      	ldr	r3, [r3, #0]
 8102502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102508:	429a      	cmp	r2, r3
 810250a:	d207      	bcs.n	810251c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810250c:	4b0b      	ldr	r3, [pc, #44]	; (810253c <prvAddNewTaskToReadyList+0xd0>)
 810250e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102512:	601a      	str	r2, [r3, #0]
 8102514:	f3bf 8f4f 	dsb	sy
 8102518:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810251c:	bf00      	nop
 810251e:	3708      	adds	r7, #8
 8102520:	46bd      	mov	sp, r7
 8102522:	bd80      	pop	{r7, pc}
 8102524:	10003fac 	.word	0x10003fac
 8102528:	10003eac 	.word	0x10003eac
 810252c:	10003fb8 	.word	0x10003fb8
 8102530:	10003fc8 	.word	0x10003fc8
 8102534:	10003fb4 	.word	0x10003fb4
 8102538:	10003eb0 	.word	0x10003eb0
 810253c:	e000ed04 	.word	0xe000ed04

08102540 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8102540:	b580      	push	{r7, lr}
 8102542:	b084      	sub	sp, #16
 8102544:	af00      	add	r7, sp, #0
 8102546:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8102548:	2300      	movs	r3, #0
 810254a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	2b00      	cmp	r3, #0
 8102550:	d017      	beq.n	8102582 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8102552:	4b13      	ldr	r3, [pc, #76]	; (81025a0 <vTaskDelay+0x60>)
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	2b00      	cmp	r3, #0
 8102558:	d00a      	beq.n	8102570 <vTaskDelay+0x30>
	__asm volatile
 810255a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810255e:	f383 8811 	msr	BASEPRI, r3
 8102562:	f3bf 8f6f 	isb	sy
 8102566:	f3bf 8f4f 	dsb	sy
 810256a:	60bb      	str	r3, [r7, #8]
}
 810256c:	bf00      	nop
 810256e:	e7fe      	b.n	810256e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8102570:	f000 f87a 	bl	8102668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8102574:	2100      	movs	r1, #0
 8102576:	6878      	ldr	r0, [r7, #4]
 8102578:	f000 fb0a 	bl	8102b90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810257c:	f000 f882 	bl	8102684 <xTaskResumeAll>
 8102580:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8102582:	68fb      	ldr	r3, [r7, #12]
 8102584:	2b00      	cmp	r3, #0
 8102586:	d107      	bne.n	8102598 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8102588:	4b06      	ldr	r3, [pc, #24]	; (81025a4 <vTaskDelay+0x64>)
 810258a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810258e:	601a      	str	r2, [r3, #0]
 8102590:	f3bf 8f4f 	dsb	sy
 8102594:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8102598:	bf00      	nop
 810259a:	3710      	adds	r7, #16
 810259c:	46bd      	mov	sp, r7
 810259e:	bd80      	pop	{r7, pc}
 81025a0:	10003fd4 	.word	0x10003fd4
 81025a4:	e000ed04 	.word	0xe000ed04

081025a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 81025a8:	b580      	push	{r7, lr}
 81025aa:	b08a      	sub	sp, #40	; 0x28
 81025ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 81025ae:	2300      	movs	r3, #0
 81025b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 81025b2:	2300      	movs	r3, #0
 81025b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 81025b6:	463a      	mov	r2, r7
 81025b8:	1d39      	adds	r1, r7, #4
 81025ba:	f107 0308 	add.w	r3, r7, #8
 81025be:	4618      	mov	r0, r3
 81025c0:	f7fd feaa 	bl	8100318 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81025c4:	6839      	ldr	r1, [r7, #0]
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	68ba      	ldr	r2, [r7, #8]
 81025ca:	9202      	str	r2, [sp, #8]
 81025cc:	9301      	str	r3, [sp, #4]
 81025ce:	2300      	movs	r3, #0
 81025d0:	9300      	str	r3, [sp, #0]
 81025d2:	2300      	movs	r3, #0
 81025d4:	460a      	mov	r2, r1
 81025d6:	491e      	ldr	r1, [pc, #120]	; (8102650 <vTaskStartScheduler+0xa8>)
 81025d8:	481e      	ldr	r0, [pc, #120]	; (8102654 <vTaskStartScheduler+0xac>)
 81025da:	f7ff fe1d 	bl	8102218 <xTaskCreateStatic>
 81025de:	4603      	mov	r3, r0
 81025e0:	4a1d      	ldr	r2, [pc, #116]	; (8102658 <vTaskStartScheduler+0xb0>)
 81025e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81025e4:	4b1c      	ldr	r3, [pc, #112]	; (8102658 <vTaskStartScheduler+0xb0>)
 81025e6:	681b      	ldr	r3, [r3, #0]
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d002      	beq.n	81025f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81025ec:	2301      	movs	r3, #1
 81025ee:	617b      	str	r3, [r7, #20]
 81025f0:	e001      	b.n	81025f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81025f2:	2300      	movs	r3, #0
 81025f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81025f6:	697b      	ldr	r3, [r7, #20]
 81025f8:	2b01      	cmp	r3, #1
 81025fa:	d116      	bne.n	810262a <vTaskStartScheduler+0x82>
	__asm volatile
 81025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102600:	f383 8811 	msr	BASEPRI, r3
 8102604:	f3bf 8f6f 	isb	sy
 8102608:	f3bf 8f4f 	dsb	sy
 810260c:	613b      	str	r3, [r7, #16]
}
 810260e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8102610:	4b12      	ldr	r3, [pc, #72]	; (810265c <vTaskStartScheduler+0xb4>)
 8102612:	f04f 32ff 	mov.w	r2, #4294967295
 8102616:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8102618:	4b11      	ldr	r3, [pc, #68]	; (8102660 <vTaskStartScheduler+0xb8>)
 810261a:	2201      	movs	r2, #1
 810261c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810261e:	4b11      	ldr	r3, [pc, #68]	; (8102664 <vTaskStartScheduler+0xbc>)
 8102620:	2200      	movs	r2, #0
 8102622:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8102624:	f7ff fc74 	bl	8101f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8102628:	e00e      	b.n	8102648 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810262a:	697b      	ldr	r3, [r7, #20]
 810262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102630:	d10a      	bne.n	8102648 <vTaskStartScheduler+0xa0>
	__asm volatile
 8102632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102636:	f383 8811 	msr	BASEPRI, r3
 810263a:	f3bf 8f6f 	isb	sy
 810263e:	f3bf 8f4f 	dsb	sy
 8102642:	60fb      	str	r3, [r7, #12]
}
 8102644:	bf00      	nop
 8102646:	e7fe      	b.n	8102646 <vTaskStartScheduler+0x9e>
}
 8102648:	bf00      	nop
 810264a:	3718      	adds	r7, #24
 810264c:	46bd      	mov	sp, r7
 810264e:	bd80      	pop	{r7, pc}
 8102650:	08102ce4 	.word	0x08102ce4
 8102654:	081029e5 	.word	0x081029e5
 8102658:	10003fd0 	.word	0x10003fd0
 810265c:	10003fcc 	.word	0x10003fcc
 8102660:	10003fb8 	.word	0x10003fb8
 8102664:	10003fb0 	.word	0x10003fb0

08102668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8102668:	b480      	push	{r7}
 810266a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810266c:	4b04      	ldr	r3, [pc, #16]	; (8102680 <vTaskSuspendAll+0x18>)
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	3301      	adds	r3, #1
 8102672:	4a03      	ldr	r2, [pc, #12]	; (8102680 <vTaskSuspendAll+0x18>)
 8102674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8102676:	bf00      	nop
 8102678:	46bd      	mov	sp, r7
 810267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810267e:	4770      	bx	lr
 8102680:	10003fd4 	.word	0x10003fd4

08102684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8102684:	b580      	push	{r7, lr}
 8102686:	b084      	sub	sp, #16
 8102688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810268a:	2300      	movs	r3, #0
 810268c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810268e:	2300      	movs	r3, #0
 8102690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8102692:	4b41      	ldr	r3, [pc, #260]	; (8102798 <xTaskResumeAll+0x114>)
 8102694:	681b      	ldr	r3, [r3, #0]
 8102696:	2b00      	cmp	r3, #0
 8102698:	d10a      	bne.n	81026b0 <xTaskResumeAll+0x2c>
	__asm volatile
 810269a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810269e:	f383 8811 	msr	BASEPRI, r3
 81026a2:	f3bf 8f6f 	isb	sy
 81026a6:	f3bf 8f4f 	dsb	sy
 81026aa:	603b      	str	r3, [r7, #0]
}
 81026ac:	bf00      	nop
 81026ae:	e7fe      	b.n	81026ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 81026b0:	f7ff fcd0 	bl	8102054 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 81026b4:	4b38      	ldr	r3, [pc, #224]	; (8102798 <xTaskResumeAll+0x114>)
 81026b6:	681b      	ldr	r3, [r3, #0]
 81026b8:	3b01      	subs	r3, #1
 81026ba:	4a37      	ldr	r2, [pc, #220]	; (8102798 <xTaskResumeAll+0x114>)
 81026bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81026be:	4b36      	ldr	r3, [pc, #216]	; (8102798 <xTaskResumeAll+0x114>)
 81026c0:	681b      	ldr	r3, [r3, #0]
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	d161      	bne.n	810278a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81026c6:	4b35      	ldr	r3, [pc, #212]	; (810279c <xTaskResumeAll+0x118>)
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	2b00      	cmp	r3, #0
 81026cc:	d05d      	beq.n	810278a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81026ce:	e02e      	b.n	810272e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81026d0:	4b33      	ldr	r3, [pc, #204]	; (81027a0 <xTaskResumeAll+0x11c>)
 81026d2:	68db      	ldr	r3, [r3, #12]
 81026d4:	68db      	ldr	r3, [r3, #12]
 81026d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	3318      	adds	r3, #24
 81026dc:	4618      	mov	r0, r3
 81026de:	f7ff fb61 	bl	8101da4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	3304      	adds	r3, #4
 81026e6:	4618      	mov	r0, r3
 81026e8:	f7ff fb5c 	bl	8101da4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026f0:	2201      	movs	r2, #1
 81026f2:	409a      	lsls	r2, r3
 81026f4:	4b2b      	ldr	r3, [pc, #172]	; (81027a4 <xTaskResumeAll+0x120>)
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	4313      	orrs	r3, r2
 81026fa:	4a2a      	ldr	r2, [pc, #168]	; (81027a4 <xTaskResumeAll+0x120>)
 81026fc:	6013      	str	r3, [r2, #0]
 81026fe:	68fb      	ldr	r3, [r7, #12]
 8102700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102702:	4613      	mov	r3, r2
 8102704:	009b      	lsls	r3, r3, #2
 8102706:	4413      	add	r3, r2
 8102708:	009b      	lsls	r3, r3, #2
 810270a:	4a27      	ldr	r2, [pc, #156]	; (81027a8 <xTaskResumeAll+0x124>)
 810270c:	441a      	add	r2, r3
 810270e:	68fb      	ldr	r3, [r7, #12]
 8102710:	3304      	adds	r3, #4
 8102712:	4619      	mov	r1, r3
 8102714:	4610      	mov	r0, r2
 8102716:	f7ff fae8 	bl	8101cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810271a:	68fb      	ldr	r3, [r7, #12]
 810271c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810271e:	4b23      	ldr	r3, [pc, #140]	; (81027ac <xTaskResumeAll+0x128>)
 8102720:	681b      	ldr	r3, [r3, #0]
 8102722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102724:	429a      	cmp	r2, r3
 8102726:	d302      	bcc.n	810272e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8102728:	4b21      	ldr	r3, [pc, #132]	; (81027b0 <xTaskResumeAll+0x12c>)
 810272a:	2201      	movs	r2, #1
 810272c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810272e:	4b1c      	ldr	r3, [pc, #112]	; (81027a0 <xTaskResumeAll+0x11c>)
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	2b00      	cmp	r3, #0
 8102734:	d1cc      	bne.n	81026d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8102736:	68fb      	ldr	r3, [r7, #12]
 8102738:	2b00      	cmp	r3, #0
 810273a:	d001      	beq.n	8102740 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810273c:	f000 fa08 	bl	8102b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8102740:	4b1c      	ldr	r3, [pc, #112]	; (81027b4 <xTaskResumeAll+0x130>)
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	2b00      	cmp	r3, #0
 810274a:	d010      	beq.n	810276e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810274c:	f000 f836 	bl	81027bc <xTaskIncrementTick>
 8102750:	4603      	mov	r3, r0
 8102752:	2b00      	cmp	r3, #0
 8102754:	d002      	beq.n	810275c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8102756:	4b16      	ldr	r3, [pc, #88]	; (81027b0 <xTaskResumeAll+0x12c>)
 8102758:	2201      	movs	r2, #1
 810275a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	3b01      	subs	r3, #1
 8102760:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	2b00      	cmp	r3, #0
 8102766:	d1f1      	bne.n	810274c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8102768:	4b12      	ldr	r3, [pc, #72]	; (81027b4 <xTaskResumeAll+0x130>)
 810276a:	2200      	movs	r2, #0
 810276c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810276e:	4b10      	ldr	r3, [pc, #64]	; (81027b0 <xTaskResumeAll+0x12c>)
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	2b00      	cmp	r3, #0
 8102774:	d009      	beq.n	810278a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8102776:	2301      	movs	r3, #1
 8102778:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810277a:	4b0f      	ldr	r3, [pc, #60]	; (81027b8 <xTaskResumeAll+0x134>)
 810277c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8102780:	601a      	str	r2, [r3, #0]
 8102782:	f3bf 8f4f 	dsb	sy
 8102786:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810278a:	f7ff fc93 	bl	81020b4 <vPortExitCritical>

	return xAlreadyYielded;
 810278e:	68bb      	ldr	r3, [r7, #8]
}
 8102790:	4618      	mov	r0, r3
 8102792:	3710      	adds	r7, #16
 8102794:	46bd      	mov	sp, r7
 8102796:	bd80      	pop	{r7, pc}
 8102798:	10003fd4 	.word	0x10003fd4
 810279c:	10003fac 	.word	0x10003fac
 81027a0:	10003f6c 	.word	0x10003f6c
 81027a4:	10003fb4 	.word	0x10003fb4
 81027a8:	10003eb0 	.word	0x10003eb0
 81027ac:	10003eac 	.word	0x10003eac
 81027b0:	10003fc0 	.word	0x10003fc0
 81027b4:	10003fbc 	.word	0x10003fbc
 81027b8:	e000ed04 	.word	0xe000ed04

081027bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81027bc:	b580      	push	{r7, lr}
 81027be:	b086      	sub	sp, #24
 81027c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81027c2:	2300      	movs	r3, #0
 81027c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81027c6:	4b4e      	ldr	r3, [pc, #312]	; (8102900 <xTaskIncrementTick+0x144>)
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	2b00      	cmp	r3, #0
 81027cc:	f040 808e 	bne.w	81028ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81027d0:	4b4c      	ldr	r3, [pc, #304]	; (8102904 <xTaskIncrementTick+0x148>)
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	3301      	adds	r3, #1
 81027d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81027d8:	4a4a      	ldr	r2, [pc, #296]	; (8102904 <xTaskIncrementTick+0x148>)
 81027da:	693b      	ldr	r3, [r7, #16]
 81027dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81027de:	693b      	ldr	r3, [r7, #16]
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d120      	bne.n	8102826 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 81027e4:	4b48      	ldr	r3, [pc, #288]	; (8102908 <xTaskIncrementTick+0x14c>)
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	2b00      	cmp	r3, #0
 81027ec:	d00a      	beq.n	8102804 <xTaskIncrementTick+0x48>
	__asm volatile
 81027ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81027f2:	f383 8811 	msr	BASEPRI, r3
 81027f6:	f3bf 8f6f 	isb	sy
 81027fa:	f3bf 8f4f 	dsb	sy
 81027fe:	603b      	str	r3, [r7, #0]
}
 8102800:	bf00      	nop
 8102802:	e7fe      	b.n	8102802 <xTaskIncrementTick+0x46>
 8102804:	4b40      	ldr	r3, [pc, #256]	; (8102908 <xTaskIncrementTick+0x14c>)
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	60fb      	str	r3, [r7, #12]
 810280a:	4b40      	ldr	r3, [pc, #256]	; (810290c <xTaskIncrementTick+0x150>)
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	4a3e      	ldr	r2, [pc, #248]	; (8102908 <xTaskIncrementTick+0x14c>)
 8102810:	6013      	str	r3, [r2, #0]
 8102812:	4a3e      	ldr	r2, [pc, #248]	; (810290c <xTaskIncrementTick+0x150>)
 8102814:	68fb      	ldr	r3, [r7, #12]
 8102816:	6013      	str	r3, [r2, #0]
 8102818:	4b3d      	ldr	r3, [pc, #244]	; (8102910 <xTaskIncrementTick+0x154>)
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	3301      	adds	r3, #1
 810281e:	4a3c      	ldr	r2, [pc, #240]	; (8102910 <xTaskIncrementTick+0x154>)
 8102820:	6013      	str	r3, [r2, #0]
 8102822:	f000 f995 	bl	8102b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8102826:	4b3b      	ldr	r3, [pc, #236]	; (8102914 <xTaskIncrementTick+0x158>)
 8102828:	681b      	ldr	r3, [r3, #0]
 810282a:	693a      	ldr	r2, [r7, #16]
 810282c:	429a      	cmp	r2, r3
 810282e:	d348      	bcc.n	81028c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102830:	4b35      	ldr	r3, [pc, #212]	; (8102908 <xTaskIncrementTick+0x14c>)
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	2b00      	cmp	r3, #0
 8102838:	d104      	bne.n	8102844 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810283a:	4b36      	ldr	r3, [pc, #216]	; (8102914 <xTaskIncrementTick+0x158>)
 810283c:	f04f 32ff 	mov.w	r2, #4294967295
 8102840:	601a      	str	r2, [r3, #0]
					break;
 8102842:	e03e      	b.n	81028c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102844:	4b30      	ldr	r3, [pc, #192]	; (8102908 <xTaskIncrementTick+0x14c>)
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	68db      	ldr	r3, [r3, #12]
 810284a:	68db      	ldr	r3, [r3, #12]
 810284c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810284e:	68bb      	ldr	r3, [r7, #8]
 8102850:	685b      	ldr	r3, [r3, #4]
 8102852:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8102854:	693a      	ldr	r2, [r7, #16]
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	429a      	cmp	r2, r3
 810285a:	d203      	bcs.n	8102864 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810285c:	4a2d      	ldr	r2, [pc, #180]	; (8102914 <xTaskIncrementTick+0x158>)
 810285e:	687b      	ldr	r3, [r7, #4]
 8102860:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8102862:	e02e      	b.n	81028c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102864:	68bb      	ldr	r3, [r7, #8]
 8102866:	3304      	adds	r3, #4
 8102868:	4618      	mov	r0, r3
 810286a:	f7ff fa9b 	bl	8101da4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810286e:	68bb      	ldr	r3, [r7, #8]
 8102870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102872:	2b00      	cmp	r3, #0
 8102874:	d004      	beq.n	8102880 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8102876:	68bb      	ldr	r3, [r7, #8]
 8102878:	3318      	adds	r3, #24
 810287a:	4618      	mov	r0, r3
 810287c:	f7ff fa92 	bl	8101da4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8102880:	68bb      	ldr	r3, [r7, #8]
 8102882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102884:	2201      	movs	r2, #1
 8102886:	409a      	lsls	r2, r3
 8102888:	4b23      	ldr	r3, [pc, #140]	; (8102918 <xTaskIncrementTick+0x15c>)
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	4313      	orrs	r3, r2
 810288e:	4a22      	ldr	r2, [pc, #136]	; (8102918 <xTaskIncrementTick+0x15c>)
 8102890:	6013      	str	r3, [r2, #0]
 8102892:	68bb      	ldr	r3, [r7, #8]
 8102894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102896:	4613      	mov	r3, r2
 8102898:	009b      	lsls	r3, r3, #2
 810289a:	4413      	add	r3, r2
 810289c:	009b      	lsls	r3, r3, #2
 810289e:	4a1f      	ldr	r2, [pc, #124]	; (810291c <xTaskIncrementTick+0x160>)
 81028a0:	441a      	add	r2, r3
 81028a2:	68bb      	ldr	r3, [r7, #8]
 81028a4:	3304      	adds	r3, #4
 81028a6:	4619      	mov	r1, r3
 81028a8:	4610      	mov	r0, r2
 81028aa:	f7ff fa1e 	bl	8101cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81028ae:	68bb      	ldr	r3, [r7, #8]
 81028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81028b2:	4b1b      	ldr	r3, [pc, #108]	; (8102920 <xTaskIncrementTick+0x164>)
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81028b8:	429a      	cmp	r2, r3
 81028ba:	d3b9      	bcc.n	8102830 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 81028bc:	2301      	movs	r3, #1
 81028be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81028c0:	e7b6      	b.n	8102830 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81028c2:	4b17      	ldr	r3, [pc, #92]	; (8102920 <xTaskIncrementTick+0x164>)
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81028c8:	4914      	ldr	r1, [pc, #80]	; (810291c <xTaskIncrementTick+0x160>)
 81028ca:	4613      	mov	r3, r2
 81028cc:	009b      	lsls	r3, r3, #2
 81028ce:	4413      	add	r3, r2
 81028d0:	009b      	lsls	r3, r3, #2
 81028d2:	440b      	add	r3, r1
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	2b01      	cmp	r3, #1
 81028d8:	d901      	bls.n	81028de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 81028da:	2301      	movs	r3, #1
 81028dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 81028de:	4b11      	ldr	r3, [pc, #68]	; (8102924 <xTaskIncrementTick+0x168>)
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	2b00      	cmp	r3, #0
 81028e4:	d007      	beq.n	81028f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 81028e6:	2301      	movs	r3, #1
 81028e8:	617b      	str	r3, [r7, #20]
 81028ea:	e004      	b.n	81028f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 81028ec:	4b0e      	ldr	r3, [pc, #56]	; (8102928 <xTaskIncrementTick+0x16c>)
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	3301      	adds	r3, #1
 81028f2:	4a0d      	ldr	r2, [pc, #52]	; (8102928 <xTaskIncrementTick+0x16c>)
 81028f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 81028f6:	697b      	ldr	r3, [r7, #20]
}
 81028f8:	4618      	mov	r0, r3
 81028fa:	3718      	adds	r7, #24
 81028fc:	46bd      	mov	sp, r7
 81028fe:	bd80      	pop	{r7, pc}
 8102900:	10003fd4 	.word	0x10003fd4
 8102904:	10003fb0 	.word	0x10003fb0
 8102908:	10003f64 	.word	0x10003f64
 810290c:	10003f68 	.word	0x10003f68
 8102910:	10003fc4 	.word	0x10003fc4
 8102914:	10003fcc 	.word	0x10003fcc
 8102918:	10003fb4 	.word	0x10003fb4
 810291c:	10003eb0 	.word	0x10003eb0
 8102920:	10003eac 	.word	0x10003eac
 8102924:	10003fc0 	.word	0x10003fc0
 8102928:	10003fbc 	.word	0x10003fbc

0810292c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810292c:	b480      	push	{r7}
 810292e:	b087      	sub	sp, #28
 8102930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8102932:	4b27      	ldr	r3, [pc, #156]	; (81029d0 <vTaskSwitchContext+0xa4>)
 8102934:	681b      	ldr	r3, [r3, #0]
 8102936:	2b00      	cmp	r3, #0
 8102938:	d003      	beq.n	8102942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810293a:	4b26      	ldr	r3, [pc, #152]	; (81029d4 <vTaskSwitchContext+0xa8>)
 810293c:	2201      	movs	r2, #1
 810293e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8102940:	e03f      	b.n	81029c2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8102942:	4b24      	ldr	r3, [pc, #144]	; (81029d4 <vTaskSwitchContext+0xa8>)
 8102944:	2200      	movs	r2, #0
 8102946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102948:	4b23      	ldr	r3, [pc, #140]	; (81029d8 <vTaskSwitchContext+0xac>)
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 810294e:	68fb      	ldr	r3, [r7, #12]
 8102950:	fab3 f383 	clz	r3, r3
 8102954:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8102956:	7afb      	ldrb	r3, [r7, #11]
 8102958:	f1c3 031f 	rsb	r3, r3, #31
 810295c:	617b      	str	r3, [r7, #20]
 810295e:	491f      	ldr	r1, [pc, #124]	; (81029dc <vTaskSwitchContext+0xb0>)
 8102960:	697a      	ldr	r2, [r7, #20]
 8102962:	4613      	mov	r3, r2
 8102964:	009b      	lsls	r3, r3, #2
 8102966:	4413      	add	r3, r2
 8102968:	009b      	lsls	r3, r3, #2
 810296a:	440b      	add	r3, r1
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	2b00      	cmp	r3, #0
 8102970:	d10a      	bne.n	8102988 <vTaskSwitchContext+0x5c>
	__asm volatile
 8102972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102976:	f383 8811 	msr	BASEPRI, r3
 810297a:	f3bf 8f6f 	isb	sy
 810297e:	f3bf 8f4f 	dsb	sy
 8102982:	607b      	str	r3, [r7, #4]
}
 8102984:	bf00      	nop
 8102986:	e7fe      	b.n	8102986 <vTaskSwitchContext+0x5a>
 8102988:	697a      	ldr	r2, [r7, #20]
 810298a:	4613      	mov	r3, r2
 810298c:	009b      	lsls	r3, r3, #2
 810298e:	4413      	add	r3, r2
 8102990:	009b      	lsls	r3, r3, #2
 8102992:	4a12      	ldr	r2, [pc, #72]	; (81029dc <vTaskSwitchContext+0xb0>)
 8102994:	4413      	add	r3, r2
 8102996:	613b      	str	r3, [r7, #16]
 8102998:	693b      	ldr	r3, [r7, #16]
 810299a:	685b      	ldr	r3, [r3, #4]
 810299c:	685a      	ldr	r2, [r3, #4]
 810299e:	693b      	ldr	r3, [r7, #16]
 81029a0:	605a      	str	r2, [r3, #4]
 81029a2:	693b      	ldr	r3, [r7, #16]
 81029a4:	685a      	ldr	r2, [r3, #4]
 81029a6:	693b      	ldr	r3, [r7, #16]
 81029a8:	3308      	adds	r3, #8
 81029aa:	429a      	cmp	r2, r3
 81029ac:	d104      	bne.n	81029b8 <vTaskSwitchContext+0x8c>
 81029ae:	693b      	ldr	r3, [r7, #16]
 81029b0:	685b      	ldr	r3, [r3, #4]
 81029b2:	685a      	ldr	r2, [r3, #4]
 81029b4:	693b      	ldr	r3, [r7, #16]
 81029b6:	605a      	str	r2, [r3, #4]
 81029b8:	693b      	ldr	r3, [r7, #16]
 81029ba:	685b      	ldr	r3, [r3, #4]
 81029bc:	68db      	ldr	r3, [r3, #12]
 81029be:	4a08      	ldr	r2, [pc, #32]	; (81029e0 <vTaskSwitchContext+0xb4>)
 81029c0:	6013      	str	r3, [r2, #0]
}
 81029c2:	bf00      	nop
 81029c4:	371c      	adds	r7, #28
 81029c6:	46bd      	mov	sp, r7
 81029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029cc:	4770      	bx	lr
 81029ce:	bf00      	nop
 81029d0:	10003fd4 	.word	0x10003fd4
 81029d4:	10003fc0 	.word	0x10003fc0
 81029d8:	10003fb4 	.word	0x10003fb4
 81029dc:	10003eb0 	.word	0x10003eb0
 81029e0:	10003eac 	.word	0x10003eac

081029e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81029e4:	b580      	push	{r7, lr}
 81029e6:	b082      	sub	sp, #8
 81029e8:	af00      	add	r7, sp, #0
 81029ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81029ec:	f000 f852 	bl	8102a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81029f0:	4b06      	ldr	r3, [pc, #24]	; (8102a0c <prvIdleTask+0x28>)
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	2b01      	cmp	r3, #1
 81029f6:	d9f9      	bls.n	81029ec <prvIdleTask+0x8>
			{
				taskYIELD();
 81029f8:	4b05      	ldr	r3, [pc, #20]	; (8102a10 <prvIdleTask+0x2c>)
 81029fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81029fe:	601a      	str	r2, [r3, #0]
 8102a00:	f3bf 8f4f 	dsb	sy
 8102a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8102a08:	e7f0      	b.n	81029ec <prvIdleTask+0x8>
 8102a0a:	bf00      	nop
 8102a0c:	10003eb0 	.word	0x10003eb0
 8102a10:	e000ed04 	.word	0xe000ed04

08102a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8102a14:	b580      	push	{r7, lr}
 8102a16:	b082      	sub	sp, #8
 8102a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8102a1a:	2300      	movs	r3, #0
 8102a1c:	607b      	str	r3, [r7, #4]
 8102a1e:	e00c      	b.n	8102a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8102a20:	687a      	ldr	r2, [r7, #4]
 8102a22:	4613      	mov	r3, r2
 8102a24:	009b      	lsls	r3, r3, #2
 8102a26:	4413      	add	r3, r2
 8102a28:	009b      	lsls	r3, r3, #2
 8102a2a:	4a12      	ldr	r2, [pc, #72]	; (8102a74 <prvInitialiseTaskLists+0x60>)
 8102a2c:	4413      	add	r3, r2
 8102a2e:	4618      	mov	r0, r3
 8102a30:	f7ff f92e 	bl	8101c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	3301      	adds	r3, #1
 8102a38:	607b      	str	r3, [r7, #4]
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	2b06      	cmp	r3, #6
 8102a3e:	d9ef      	bls.n	8102a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8102a40:	480d      	ldr	r0, [pc, #52]	; (8102a78 <prvInitialiseTaskLists+0x64>)
 8102a42:	f7ff f925 	bl	8101c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8102a46:	480d      	ldr	r0, [pc, #52]	; (8102a7c <prvInitialiseTaskLists+0x68>)
 8102a48:	f7ff f922 	bl	8101c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8102a4c:	480c      	ldr	r0, [pc, #48]	; (8102a80 <prvInitialiseTaskLists+0x6c>)
 8102a4e:	f7ff f91f 	bl	8101c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8102a52:	480c      	ldr	r0, [pc, #48]	; (8102a84 <prvInitialiseTaskLists+0x70>)
 8102a54:	f7ff f91c 	bl	8101c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8102a58:	480b      	ldr	r0, [pc, #44]	; (8102a88 <prvInitialiseTaskLists+0x74>)
 8102a5a:	f7ff f919 	bl	8101c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8102a5e:	4b0b      	ldr	r3, [pc, #44]	; (8102a8c <prvInitialiseTaskLists+0x78>)
 8102a60:	4a05      	ldr	r2, [pc, #20]	; (8102a78 <prvInitialiseTaskLists+0x64>)
 8102a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8102a64:	4b0a      	ldr	r3, [pc, #40]	; (8102a90 <prvInitialiseTaskLists+0x7c>)
 8102a66:	4a05      	ldr	r2, [pc, #20]	; (8102a7c <prvInitialiseTaskLists+0x68>)
 8102a68:	601a      	str	r2, [r3, #0]
}
 8102a6a:	bf00      	nop
 8102a6c:	3708      	adds	r7, #8
 8102a6e:	46bd      	mov	sp, r7
 8102a70:	bd80      	pop	{r7, pc}
 8102a72:	bf00      	nop
 8102a74:	10003eb0 	.word	0x10003eb0
 8102a78:	10003f3c 	.word	0x10003f3c
 8102a7c:	10003f50 	.word	0x10003f50
 8102a80:	10003f6c 	.word	0x10003f6c
 8102a84:	10003f80 	.word	0x10003f80
 8102a88:	10003f98 	.word	0x10003f98
 8102a8c:	10003f64 	.word	0x10003f64
 8102a90:	10003f68 	.word	0x10003f68

08102a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8102a94:	b580      	push	{r7, lr}
 8102a96:	b082      	sub	sp, #8
 8102a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8102a9a:	e019      	b.n	8102ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8102a9c:	f7ff fada 	bl	8102054 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102aa0:	4b10      	ldr	r3, [pc, #64]	; (8102ae4 <prvCheckTasksWaitingTermination+0x50>)
 8102aa2:	68db      	ldr	r3, [r3, #12]
 8102aa4:	68db      	ldr	r3, [r3, #12]
 8102aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	3304      	adds	r3, #4
 8102aac:	4618      	mov	r0, r3
 8102aae:	f7ff f979 	bl	8101da4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8102ab2:	4b0d      	ldr	r3, [pc, #52]	; (8102ae8 <prvCheckTasksWaitingTermination+0x54>)
 8102ab4:	681b      	ldr	r3, [r3, #0]
 8102ab6:	3b01      	subs	r3, #1
 8102ab8:	4a0b      	ldr	r2, [pc, #44]	; (8102ae8 <prvCheckTasksWaitingTermination+0x54>)
 8102aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8102abc:	4b0b      	ldr	r3, [pc, #44]	; (8102aec <prvCheckTasksWaitingTermination+0x58>)
 8102abe:	681b      	ldr	r3, [r3, #0]
 8102ac0:	3b01      	subs	r3, #1
 8102ac2:	4a0a      	ldr	r2, [pc, #40]	; (8102aec <prvCheckTasksWaitingTermination+0x58>)
 8102ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8102ac6:	f7ff faf5 	bl	81020b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8102aca:	6878      	ldr	r0, [r7, #4]
 8102acc:	f000 f810 	bl	8102af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8102ad0:	4b06      	ldr	r3, [pc, #24]	; (8102aec <prvCheckTasksWaitingTermination+0x58>)
 8102ad2:	681b      	ldr	r3, [r3, #0]
 8102ad4:	2b00      	cmp	r3, #0
 8102ad6:	d1e1      	bne.n	8102a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8102ad8:	bf00      	nop
 8102ada:	bf00      	nop
 8102adc:	3708      	adds	r7, #8
 8102ade:	46bd      	mov	sp, r7
 8102ae0:	bd80      	pop	{r7, pc}
 8102ae2:	bf00      	nop
 8102ae4:	10003f80 	.word	0x10003f80
 8102ae8:	10003fac 	.word	0x10003fac
 8102aec:	10003f94 	.word	0x10003f94

08102af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8102af0:	b580      	push	{r7, lr}
 8102af2:	b084      	sub	sp, #16
 8102af4:	af00      	add	r7, sp, #0
 8102af6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8102afe:	2b00      	cmp	r3, #0
 8102b00:	d108      	bne.n	8102b14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8102b02:	687b      	ldr	r3, [r7, #4]
 8102b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b06:	4618      	mov	r0, r3
 8102b08:	f7fe ffa4 	bl	8101a54 <vPortFree>
				vPortFree( pxTCB );
 8102b0c:	6878      	ldr	r0, [r7, #4]
 8102b0e:	f7fe ffa1 	bl	8101a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8102b12:	e018      	b.n	8102b46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8102b1a:	2b01      	cmp	r3, #1
 8102b1c:	d103      	bne.n	8102b26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8102b1e:	6878      	ldr	r0, [r7, #4]
 8102b20:	f7fe ff98 	bl	8101a54 <vPortFree>
	}
 8102b24:	e00f      	b.n	8102b46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8102b26:	687b      	ldr	r3, [r7, #4]
 8102b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8102b2c:	2b02      	cmp	r3, #2
 8102b2e:	d00a      	beq.n	8102b46 <prvDeleteTCB+0x56>
	__asm volatile
 8102b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8102b34:	f383 8811 	msr	BASEPRI, r3
 8102b38:	f3bf 8f6f 	isb	sy
 8102b3c:	f3bf 8f4f 	dsb	sy
 8102b40:	60fb      	str	r3, [r7, #12]
}
 8102b42:	bf00      	nop
 8102b44:	e7fe      	b.n	8102b44 <prvDeleteTCB+0x54>
	}
 8102b46:	bf00      	nop
 8102b48:	3710      	adds	r7, #16
 8102b4a:	46bd      	mov	sp, r7
 8102b4c:	bd80      	pop	{r7, pc}
	...

08102b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8102b50:	b480      	push	{r7}
 8102b52:	b083      	sub	sp, #12
 8102b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8102b56:	4b0c      	ldr	r3, [pc, #48]	; (8102b88 <prvResetNextTaskUnblockTime+0x38>)
 8102b58:	681b      	ldr	r3, [r3, #0]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	2b00      	cmp	r3, #0
 8102b5e:	d104      	bne.n	8102b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8102b60:	4b0a      	ldr	r3, [pc, #40]	; (8102b8c <prvResetNextTaskUnblockTime+0x3c>)
 8102b62:	f04f 32ff 	mov.w	r2, #4294967295
 8102b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8102b68:	e008      	b.n	8102b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8102b6a:	4b07      	ldr	r3, [pc, #28]	; (8102b88 <prvResetNextTaskUnblockTime+0x38>)
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	68db      	ldr	r3, [r3, #12]
 8102b70:	68db      	ldr	r3, [r3, #12]
 8102b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	685b      	ldr	r3, [r3, #4]
 8102b78:	4a04      	ldr	r2, [pc, #16]	; (8102b8c <prvResetNextTaskUnblockTime+0x3c>)
 8102b7a:	6013      	str	r3, [r2, #0]
}
 8102b7c:	bf00      	nop
 8102b7e:	370c      	adds	r7, #12
 8102b80:	46bd      	mov	sp, r7
 8102b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b86:	4770      	bx	lr
 8102b88:	10003f64 	.word	0x10003f64
 8102b8c:	10003fcc 	.word	0x10003fcc

08102b90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8102b90:	b580      	push	{r7, lr}
 8102b92:	b084      	sub	sp, #16
 8102b94:	af00      	add	r7, sp, #0
 8102b96:	6078      	str	r0, [r7, #4]
 8102b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8102b9a:	4b29      	ldr	r3, [pc, #164]	; (8102c40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8102ba0:	4b28      	ldr	r3, [pc, #160]	; (8102c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102ba2:	681b      	ldr	r3, [r3, #0]
 8102ba4:	3304      	adds	r3, #4
 8102ba6:	4618      	mov	r0, r3
 8102ba8:	f7ff f8fc 	bl	8101da4 <uxListRemove>
 8102bac:	4603      	mov	r3, r0
 8102bae:	2b00      	cmp	r3, #0
 8102bb0:	d10b      	bne.n	8102bca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8102bb2:	4b24      	ldr	r3, [pc, #144]	; (8102c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bb8:	2201      	movs	r2, #1
 8102bba:	fa02 f303 	lsl.w	r3, r2, r3
 8102bbe:	43da      	mvns	r2, r3
 8102bc0:	4b21      	ldr	r3, [pc, #132]	; (8102c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8102bc2:	681b      	ldr	r3, [r3, #0]
 8102bc4:	4013      	ands	r3, r2
 8102bc6:	4a20      	ldr	r2, [pc, #128]	; (8102c48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8102bc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bd0:	d10a      	bne.n	8102be8 <prvAddCurrentTaskToDelayedList+0x58>
 8102bd2:	683b      	ldr	r3, [r7, #0]
 8102bd4:	2b00      	cmp	r3, #0
 8102bd6:	d007      	beq.n	8102be8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102bd8:	4b1a      	ldr	r3, [pc, #104]	; (8102c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102bda:	681b      	ldr	r3, [r3, #0]
 8102bdc:	3304      	adds	r3, #4
 8102bde:	4619      	mov	r1, r3
 8102be0:	481a      	ldr	r0, [pc, #104]	; (8102c4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8102be2:	f7ff f882 	bl	8101cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8102be6:	e026      	b.n	8102c36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8102be8:	68fa      	ldr	r2, [r7, #12]
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	4413      	add	r3, r2
 8102bee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8102bf0:	4b14      	ldr	r3, [pc, #80]	; (8102c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	68ba      	ldr	r2, [r7, #8]
 8102bf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8102bf8:	68ba      	ldr	r2, [r7, #8]
 8102bfa:	68fb      	ldr	r3, [r7, #12]
 8102bfc:	429a      	cmp	r2, r3
 8102bfe:	d209      	bcs.n	8102c14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102c00:	4b13      	ldr	r3, [pc, #76]	; (8102c50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8102c02:	681a      	ldr	r2, [r3, #0]
 8102c04:	4b0f      	ldr	r3, [pc, #60]	; (8102c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	3304      	adds	r3, #4
 8102c0a:	4619      	mov	r1, r3
 8102c0c:	4610      	mov	r0, r2
 8102c0e:	f7ff f890 	bl	8101d32 <vListInsert>
}
 8102c12:	e010      	b.n	8102c36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8102c14:	4b0f      	ldr	r3, [pc, #60]	; (8102c54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8102c16:	681a      	ldr	r2, [r3, #0]
 8102c18:	4b0a      	ldr	r3, [pc, #40]	; (8102c44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	3304      	adds	r3, #4
 8102c1e:	4619      	mov	r1, r3
 8102c20:	4610      	mov	r0, r2
 8102c22:	f7ff f886 	bl	8101d32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8102c26:	4b0c      	ldr	r3, [pc, #48]	; (8102c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8102c28:	681b      	ldr	r3, [r3, #0]
 8102c2a:	68ba      	ldr	r2, [r7, #8]
 8102c2c:	429a      	cmp	r2, r3
 8102c2e:	d202      	bcs.n	8102c36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8102c30:	4a09      	ldr	r2, [pc, #36]	; (8102c58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8102c32:	68bb      	ldr	r3, [r7, #8]
 8102c34:	6013      	str	r3, [r2, #0]
}
 8102c36:	bf00      	nop
 8102c38:	3710      	adds	r7, #16
 8102c3a:	46bd      	mov	sp, r7
 8102c3c:	bd80      	pop	{r7, pc}
 8102c3e:	bf00      	nop
 8102c40:	10003fb0 	.word	0x10003fb0
 8102c44:	10003eac 	.word	0x10003eac
 8102c48:	10003fb4 	.word	0x10003fb4
 8102c4c:	10003f98 	.word	0x10003f98
 8102c50:	10003f68 	.word	0x10003f68
 8102c54:	10003f64 	.word	0x10003f64
 8102c58:	10003fcc 	.word	0x10003fcc

08102c5c <__libc_init_array>:
 8102c5c:	b570      	push	{r4, r5, r6, lr}
 8102c5e:	4d0d      	ldr	r5, [pc, #52]	; (8102c94 <__libc_init_array+0x38>)
 8102c60:	4c0d      	ldr	r4, [pc, #52]	; (8102c98 <__libc_init_array+0x3c>)
 8102c62:	1b64      	subs	r4, r4, r5
 8102c64:	10a4      	asrs	r4, r4, #2
 8102c66:	2600      	movs	r6, #0
 8102c68:	42a6      	cmp	r6, r4
 8102c6a:	d109      	bne.n	8102c80 <__libc_init_array+0x24>
 8102c6c:	4d0b      	ldr	r5, [pc, #44]	; (8102c9c <__libc_init_array+0x40>)
 8102c6e:	4c0c      	ldr	r4, [pc, #48]	; (8102ca0 <__libc_init_array+0x44>)
 8102c70:	f000 f818 	bl	8102ca4 <_init>
 8102c74:	1b64      	subs	r4, r4, r5
 8102c76:	10a4      	asrs	r4, r4, #2
 8102c78:	2600      	movs	r6, #0
 8102c7a:	42a6      	cmp	r6, r4
 8102c7c:	d105      	bne.n	8102c8a <__libc_init_array+0x2e>
 8102c7e:	bd70      	pop	{r4, r5, r6, pc}
 8102c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8102c84:	4798      	blx	r3
 8102c86:	3601      	adds	r6, #1
 8102c88:	e7ee      	b.n	8102c68 <__libc_init_array+0xc>
 8102c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8102c8e:	4798      	blx	r3
 8102c90:	3601      	adds	r6, #1
 8102c92:	e7f2      	b.n	8102c7a <__libc_init_array+0x1e>
 8102c94:	08102cfc 	.word	0x08102cfc
 8102c98:	08102cfc 	.word	0x08102cfc
 8102c9c:	08102cfc 	.word	0x08102cfc
 8102ca0:	08102d00 	.word	0x08102d00

08102ca4 <_init>:
 8102ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102ca6:	bf00      	nop
 8102ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102caa:	bc08      	pop	{r3}
 8102cac:	469e      	mov	lr, r3
 8102cae:	4770      	bx	lr

08102cb0 <_fini>:
 8102cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8102cb2:	bf00      	nop
 8102cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8102cb6:	bc08      	pop	{r3}
 8102cb8:	469e      	mov	lr, r3
 8102cba:	4770      	bx	lr
